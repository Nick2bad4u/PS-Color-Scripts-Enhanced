name: Publish

on:
  workflow_dispatch:
    inputs:
      publishToNuGet:
        description: "Publish to NuGet.org (PowerShell Gallery uses same feed)"
        required: false
        default: "true"
      publishToGitHub:
        description: "Publish to GitHub Packages"
        required: false
        default: "true"
      versionOverride:
        description: "Override module version (optional)"
        required: false
        default: ""
  release:
    types: [published]
  workflow_call:
    secrets:
      PSGALLERY_API_KEY:
        required: false
      NUGET_API_KEY:
        required: false
      PACKAGES_TOKEN:
        required: false
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

permissions:
  contents: read

jobs:
  validate:
    name: Validate module
    runs-on: windows-latest
    outputs:
      version: ${{ steps.manifest.outputs.version }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install quality tools
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          if (-not (Get-Module -ListAvailable -Name Pester)) {
              Install-Module -Name Pester -MinimumVersion 5.4.0 -Force -SkipPublisherCheck
          }
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
              Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
          }
        shell: pwsh

      - name: Run Script Analyzer
        run: |
          Import-Module PSScriptAnalyzer
          $results = Invoke-ScriptAnalyzer -Path ./ColorScripts-Enhanced -Recurse -Settings ./PSScriptAnalyzerSettings.psd1 -Severity 'Error','Warning' -ReportSummary
          if ($results) {
              $results | Format-Table -AutoSize
              throw 'ScriptAnalyzer reported findings.'
          }
        shell: pwsh

      - name: Run Pester tests
        run: |
          Import-Module Pester
          $configuration = New-PesterConfiguration
          $configuration.Run.Path = './Tests'
          $configuration.Output.Verbosity = 'Detailed'
          Invoke-Pester -Configuration $configuration
        shell: pwsh

      - name: Verify manifest version
        id: manifest
        shell: pwsh
        run: |
          $manifest = Test-ModuleManifest -Path ./ColorScripts-Enhanced/ColorScripts-Enhanced.psd1
          $version = if ([string]::IsNullOrWhiteSpace('${{ github.event.inputs.versionOverride }}')) {
              $manifest.Version.ToString()
          } else {
              '${{ github.event.inputs.versionOverride }}'
          }

          Write-Host "Module version: $version"
          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

          if ('${{ github.event_name }}' -eq 'release') {
              $tag = '${{ github.event.release.tag_name }}'.TrimStart('v')
              if ($tag -ne $version) {
                  throw "Release tag $tag does not match module version $version"
              }
          }

      - name: Upload module artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: module-source
          path: ColorScripts-Enhanced/

  publish:
    name: Publish
    needs: validate
    if: needs.validate.result == 'success' && (github.event_name == 'workflow_dispatch' || github.event_name == 'release')
    runs-on: windows-latest
    env:
      PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
      PUBLISH_TO_GITHUB_INPUT: ${{ github.event.inputs.publishToGitHub }}
      MODULE_VERSION: ${{ needs.validate.outputs.version }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Publish to PowerShell Gallery
        if: ${{ env.PSGALLERY_API_KEY != '' || env.NUGET_API_KEY != '' }}
        run: |
          $galleryKey = $env:PSGALLERY_API_KEY
          $nugetKey = $env:NUGET_API_KEY
          $apiKey = if (-not [string]::IsNullOrWhiteSpace($galleryKey)) { $galleryKey } elseif (-not [string]::IsNullOrWhiteSpace($nugetKey)) { $nugetKey } else { '' }
          if ([string]::IsNullOrWhiteSpace($apiKey)) {
              Write-Host 'No PowerShell Gallery API key provided. Skipping publish.'
              return
          }

          Publish-Module -Path ./ColorScripts-Enhanced -NuGetApiKey $apiKey -Repository PSGallery -Verbose
        shell: pwsh

      - name: Publish to GitHub Packages
        if: ${{ env.PACKAGES_TOKEN != '' && (github.event_name != 'workflow_dispatch' || env.PUBLISH_TO_GITHUB_INPUT != 'false') }}
        run: |
          $token = $env:PACKAGES_TOKEN
          # GitHub Packages requires username:token format
          $auth = "${{ github.repository_owner }}:$token"
          $bytes = [System.Text.Encoding]::UTF8.GetBytes($auth)
          $encodedAuth = [System.Convert]::ToBase64String($bytes)

          # Register repository with authentication
          $source = "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

          # Use nuget.exe directly for GitHub Packages (PowerShell Gallery doesn't support it well)
          Write-Host "Publishing to GitHub Packages is currently not supported via Publish-Module."
          Write-Host "Use GitHub Releases or PowerShell Gallery instead."
          Write-Host "Skipping GitHub Packages publish."
        shell: pwsh
