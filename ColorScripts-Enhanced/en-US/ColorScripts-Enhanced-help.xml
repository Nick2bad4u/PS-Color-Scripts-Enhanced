<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-ColorScriptProfile</command:name>
      <maml:description>
        <maml:para>Appends the ColorScripts-Enhanced module import (and optionally Show-ColorScript) to a PowerShell profile file.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>ColorScriptProfile</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Adds a startup snippet to the specified PowerShell profile file. The snippet always imports the ColorScripts-Enhanced module and, unless suppressed with `-SkipStartupScript`, adds a call to `Show-ColorScript` so that a random colorscript is displayed on PowerShell launch.</maml:para>
      <maml:para>The profile file is created automatically if it does not already exist. Duplicate imports are avoided unless `-Force` is specified.</maml:para>
      <maml:para>The `-Path` parameter accepts relative paths, environment variables, and `~` expansion, making it easy to target profiles outside the default locations. If `-Path` is not provided, the `-Scope` parameter determines which standard PowerShell profile to modify.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-ColorScriptProfile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Append the snippet even if the profile already contains an `Import-Module ColorScripts-Enhanced` line. Use this to force duplicate entries or re-add the snippet after manual removal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>h</maml:name>
          <maml:description>
            <maml:para>Displays help information for this cmdlet. Equivalent to using `Get-Help Add-ColorScriptProfile`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Explicit profile path to update. Overrides `-Scope` when provided. Supports environment variables (e.g., `$env:USERPROFILE`), relative paths, and `~` expansion for the home directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Profile scope to update when `-Path` is not supplied. Accepts PowerShell's standard profile properties: `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts`, or `AllUsersCurrentHost`. Defaults to `CurrentUserAllHosts`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SkipStartupScript</maml:name>
          <maml:description>
            <maml:para>Skip adding `Show-ColorScript` to the profile. Only the `Import-Module ColorScripts-Enhanced` line is appended. Use this if you want to manually control when colorscripts are displayed.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Append the snippet even if the profile already contains an `Import-Module ColorScripts-Enhanced` line. Use this to force duplicate entries or re-add the snippet after manual removal.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>h</maml:name>
        <maml:description>
          <maml:para>Displays help information for this cmdlet. Equivalent to using `Get-Help Add-ColorScriptProfile`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Explicit profile path to update. Overrides `-Scope` when provided. Supports environment variables (e.g., `$env:USERPROFILE`), relative paths, and `~` expansion for the home directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Profile scope to update when `-Path` is not supplied. Accepts PowerShell's standard profile properties: `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts`, or `AllUsersCurrentHost`. Defaults to `CurrentUserAllHosts`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SkipStartupScript</maml:name>
        <maml:description>
          <maml:para>Skip adding `Show-ColorScript` to the profile. Only the `Import-Module ColorScripts-Enhanced` line is appended. Use this if you want to manually control when colorscripts are displayed.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet is not run.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Returns a custom object with the following properties:
- **ProfilePath** (string): The full path to the modified profile file
- **Changed** (bool): Whether the profile was actually modified
- **Message** (string): A status message describing the operation result</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

The profile file is created automatically if it does not exist, including any necessary parent directories. Duplicate imports are detected and suppressed unless `-Force` is used.

If you need elevated permissions to modify an AllUsers profile, ensure you run PowerShell as Administrator.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>Add to the current user's profile for all hosts (default behavior).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This adds both the module import and `Show-ColorScript` call to `$PROFILE.CurrentUserAllHosts`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>Add to the current user's profile for the current host only, without the startup script.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Scope CurrentUserCurrentHost -SkipStartupScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This adds only the `Import-Module ColorScripts-Enhanced` line to the current host profile.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>Add to a custom profile path with environment variable expansion.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Path "$env:USERPROFILE\Documents\CustomProfile.ps1"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This targets a specific profile file outside the standard PowerShell profile locations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>Force re-add the snippet even if it already exists.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>This appends the snippet again, even if the profile already contains an import statement for ColorScripts-Enhanced.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>./Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>./Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>./Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>GitHub Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Build-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Pre-build or refresh colorscript cache files for faster rendering.

## DESCRIPTION

`Build-ColorScriptCache` executes colorscripts in a background PowerShell instance and saves the rendered output using UTF-8 encoding (without BOM). Cached content dramatically speeds up subsequent calls to `Show-ColorScript` by eliminating the need to re-execute scripts.

You can target specific scripts by name (wildcards supported) or cache the entire collection. When no parameters are specified, the cmdlet defaults to caching all available scripts. You can also filter scripts by category or tag to cache only those that match specific criteria.

By default, the cmdlet displays a concise summary of the caching operation. Use `-PassThru` to return detailed result objects for each script, which you can inspect programmatically for status, standard output, and error streams.

The cmdlet intelligently skips scripts whose cache files are already up-to-date unless you specify the `-Force` parameter to rebuild all caches regardless of their current state.</maml:para>
      </maml:description>
      <command:verb>Build</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Build-ColorScriptCache` executes colorscripts in a background PowerShell instance and saves the rendered output using UTF-8 encoding (without BOM). Cached content dramatically speeds up subsequent calls to `Show-ColorScript` by eliminating the need to re-execute scripts.</maml:para>
      <maml:para>You can target specific scripts by name (wildcards supported) or cache the entire collection. When no parameters are specified, the cmdlet defaults to caching all available scripts. You can also filter scripts by category or tag to cache only those that match specific criteria.</maml:para>
      <maml:para>By default, the cmdlet displays a concise summary of the caching operation. Use `-PassThru` to return detailed result objects for each script, which you can inspect programmatically for status, standard output, and error streams.</maml:para>
      <maml:para>The cmdlet intelligently skips scripts whose cache files are already up-to-date unless you specify the `-Force` parameter to rebuild all caches regardless of their current state.</maml:para>
      <maml:para>## SYNTAX</maml:para>
      <maml:para>### All</maml:para>
      <maml:para>``` Build-ColorScriptCache [-All] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
      <maml:para>### Named</maml:para>
      <maml:para>``` Build-ColorScriptCache [-Name &lt;String[]&gt;] [-Category &lt;String[]&gt;] [-Tag &lt;String[]&gt;] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Build-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Cache every available script. When omitted and no names are supplied, all scripts are cached by default. This parameter is useful when you want to be explicit about caching all scripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Build-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Limit the selection to scripts that belong to the specified category (case-insensitive). Multiple values are treated as an OR filter, meaning scripts matching any of the specified categories will be cached.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>One or more colorscript names to cache. Supports wildcard patterns (e.g., 'aurora-*', '*-wave'). When this parameter is omitted and no filtering parameters are specified, the cmdlet caches every available script by default.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Limit the selection to scripts containing the specified metadata tags (case-insensitive). Multiple values are treated as an OR filter, caching scripts that match any of the specified tags.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Cache every available script. When omitted and no names are supplied, all scripts are cached by default. This parameter is useful when you want to be explicit about caching all scripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Limit the selection to scripts that belong to the specified category (case-insensitive). Multiple values are treated as an OR filter, meaning scripts matching any of the specified categories will be cached.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>One or more colorscript names to cache. Supports wildcard patterns (e.g., 'aurora-*', '*-wave'). When this parameter is omitted and no filtering parameters are specified, the cmdlet caches every available script by default.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Limit the selection to scripts containing the specified metadata tags (case-insensitive). Multiple values are treated as an OR filter, caching scripts that match any of the specified tags.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe script names to this cmdlet. Each string is treated as a potential script name and supports wildcard matching.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe an array of script names or metadata records with a `Name` property to this cmdlet for batch processing.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns a custom object for each processed script containing the following properties:

- **Name**: The colorscript name
- **Status**: Success, Skipped, or Failed
- **CacheFile**: Full path to the generated cache file
- **ExitCode**: The exit code from the script execution (0 indicates success)
- **StdOut**: Standard output captured during script execution
- **StdErr**: Standard error output captured during script execution

Without `-PassThru`, displays a concise summary table to the console showing the number of scripts cached, skipped, and failed.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced

Cache files are stored in the directory exposed by the module's `CacheDir` variable (typically within the module's data directory). A successful build sets the cache file's timestamp to match the script's last write time, enabling subsequent runs to skip unchanged scripts efficiently.

The cmdlet executes each script in an isolated background PowerShell process to capture its output without affecting the current session. This ensures accurate caching of the exact console output that would be displayed when running the script directly.

**Performance Tip:** Run this cmdlet once after installing or updating the module to pre-cache all scripts for optimal performance.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Build-ColorScriptCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Warm the cache for every script that ships with the module. This is the default behavior when no parameters are specified.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Build-ColorScriptCache -Name bars, 'aurora-*'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cache a mix of exact and wildcard matches. The cmdlet will process the 'bars' script and all scripts whose names start with 'aurora-'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Build-ColorScriptCache -Name mandelbrot-zoom -Force -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Force a rebuild of the 'mandelbrot-zoom' cache even if it's up-to-date, and examine the detailed result object.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Build-ColorScriptCache -Category 'Animation' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cache all scripts in the 'Animation' category and return detailed results for each operation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Build-ColorScriptCache -Tag 'geometric', 'colorful' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Rebuild caches for all scripts tagged with either 'geometric' or 'colorful', forcing regeneration even if caches are current.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList | Where-Object Category -eq 'Classic' | Build-ColorScriptCache -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Pipeline example: retrieve all classic scripts and cache them, returning detailed results.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Remove cached colorscript output files.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Clear-ColorScriptCache` cmdlet removes cached output files generated by the ColorScripts-Enhanced module. Cache files store pre-rendered script output to improve performance during subsequent invocations.</maml:para>
      <maml:para>You can delete cache files selectively using the `-Name` parameter with wildcard patterns, or remove all cache files at once with the `-All` parameter. The cmdlet also supports filtering by `-Category` and `-Tag` to target specific subsets of cached scripts.</maml:para>
      <maml:para>Unmatched script names report a `Missing` status in the results. Use `-DryRun` to preview removal actions without modifying the filesystem, and `-Path` to target an alternate cache directory (useful for custom cache configurations or CI/CD environments).</maml:para>
      <maml:para>Cache files are automatically regenerated the next time `Show-ColorScript` executes the corresponding script.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Remove every cache file in the target directory. This parameter is mutually exclusive with `-Name`, `-Category`, and `-Tag`. When specified, all filtering parameters are ignored and the entire cache is cleared.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by category before evaluating cache entries. Only cache files for scripts matching the specified categories will be considered for removal. Accepts an array of category names and can be combined with `-Tag` for more precise filtering.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. By default, this is enabled to prevent accidental deletion of cache files. Use `-Confirm:$false` to bypass the confirmation prompt.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Preview removal actions without deleting any files. The cmdlet will display which cache files would be removed but will not modify the filesystem. This is useful for verifying your selection criteria before committing to the deletion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Names or wildcard patterns identifying cache files to remove. Accepts pipeline input and property binding from objects with a `Name` property. Wildcard characters (`*`, `?`) are supported for pattern matching. Mutually exclusive with `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Alternate cache directory to operate against. Defaults to the module's standard cache path if not specified. Use this parameter when working with custom cache locations set via the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable, or when managing cache files in alternative directories for testing or CI/CD purposes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by metadata tag before evaluating cache entries. Only cache files for scripts with matching tags will be considered for removal. Accepts an array of tag names and can be combined with `-Category` for more granular control over which cache files are targeted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually executing the operation. The cmdlet displays the actions it would perform but does not modify the filesystem. This is a standard PowerShell common parameter that works similarly to `-DryRun` but follows PowerShell's built-in conventions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Remove every cache file in the target directory. This parameter is mutually exclusive with `-Name`, `-Category`, and `-Tag`. When specified, all filtering parameters are ignored and the entire cache is cleared.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by category before evaluating cache entries. Only cache files for scripts matching the specified categories will be considered for removal. Accepts an array of category names and can be combined with `-Tag` for more precise filtering.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. By default, this is enabled to prevent accidental deletion of cache files. Use `-Confirm:$false` to bypass the confirmation prompt.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Preview removal actions without deleting any files. The cmdlet will display which cache files would be removed but will not modify the filesystem. This is useful for verifying your selection criteria before committing to the deletion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Names or wildcard patterns identifying cache files to remove. Accepts pipeline input and property binding from objects with a `Name` property. Wildcard characters (`*`, `?`) are supported for pattern matching. Mutually exclusive with `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Alternate cache directory to operate against. Defaults to the module's standard cache path if not specified. Use this parameter when working with custom cache locations set via the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable, or when managing cache files in alternative directories for testing or CI/CD purposes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by metadata tag before evaluating cache entries. Only cache files for scripts with matching tags will be considered for removal. Accepts an array of tag names and can be combined with `-Category` for more granular control over which cache files are targeted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually executing the operation. The cmdlet displays the actions it would perform but does not modify the filesystem. This is a standard PowerShell common parameter that works similarly to `-DryRun` but follows PowerShell's built-in conventions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Remove every cache file in the target directory. This parameter is mutually exclusive with `-Name`, `-Category`, and `-Tag`. When specified, all filtering parameters are ignored and the entire cache is cleared.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by category before evaluating cache entries. Only cache files for scripts matching the specified categories will be considered for removal. Accepts an array of category names and can be combined with `-Tag` for more precise filtering.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. By default, this is enabled to prevent accidental deletion of cache files. Use `-Confirm:$false` to bypass the confirmation prompt.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Preview removal actions without deleting any files. The cmdlet will display which cache files would be removed but will not modify the filesystem. This is useful for verifying your selection criteria before committing to the deletion.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Names or wildcard patterns identifying cache files to remove. Accepts pipeline input and property binding from objects with a `Name` property. Wildcard characters (`*`, `?`) are supported for pattern matching. Mutually exclusive with `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Alternate cache directory to operate against. Defaults to the module's standard cache path if not specified. Use this parameter when working with custom cache locations set via the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable, or when managing cache files in alternative directories for testing or CI/CD purposes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the target scripts by metadata tag before evaluating cache entries. Only cache files for scripts with matching tags will be considered for removal. Accepts an array of tag names and can be combined with `-Category` for more granular control over which cache files are targeted.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually executing the operation. The cmdlet displays the actions it would perform but does not modify the filesystem. This is a standard PowerShell common parameter that works similarly to `-DryRun` but follows PowerShell's built-in conventions.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Remove every cache file in the target directory. This parameter is mutually exclusive with `-Name`, `-Category`, and `-Tag`. When specified, all filtering parameters are ignored and the entire cache is cleared.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filter the target scripts by category before evaluating cache entries. Only cache files for scripts matching the specified categories will be considered for removal. Accepts an array of category names and can be combined with `-Tag` for more precise filtering.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet. By default, this is enabled to prevent accidental deletion of cache files. Use `-Confirm:$false` to bypass the confirmation prompt.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Preview removal actions without deleting any files. The cmdlet will display which cache files would be removed but will not modify the filesystem. This is useful for verifying your selection criteria before committing to the deletion.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Names or wildcard patterns identifying cache files to remove. Accepts pipeline input and property binding from objects with a `Name` property. Wildcard characters (`*`, `?`) are supported for pattern matching. Mutually exclusive with `-All`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Alternate cache directory to operate against. Defaults to the module's standard cache path if not specified. Use this parameter when working with custom cache locations set via the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable, or when managing cache files in alternative directories for testing or CI/CD purposes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filter the target scripts by metadata tag before evaluating cache entries. Only cache files for scripts with matching tags will be considered for removal. Accepts an array of tag names and can be combined with `-Category` for more granular control over which cache files are targeted.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs without actually executing the operation. The cmdlet displays the actions it would perform but does not modify the filesystem. This is a standard PowerShell common parameter that works similarly to `-DryRun` but follows PowerShell's built-in conventions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe script names to this cmdlet. Each name will be evaluated for cache file removal based on the specified parameters.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe an array of script names to this cmdlet. This is particularly useful when combining with `Get-ColorScriptList` to filter scripts by various criteria before clearing their caches.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe objects with a `Name` property to this cmdlet. The cmdlet will extract the `Name` property value and use it to identify cache files for removal.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Returns status records for each processed cache file. Each output object contains the following properties:

- **Status**: The result of the operation (`Removed`, `Missing`, `DryRun`, or `Error`)
- **CacheFile**: The full path to the cache file that was processed
- **Message**: Descriptive text explaining the outcome of the operation
- **ScriptName**: The name of the script associated with the cache file</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author**: Nick
**Module**: ColorScripts-Enhanced

Cache files are stored with a `.cache` extension in the module's cache directory. Each cache file corresponds to a single colorscript and contains the pre-rendered ANSI output.

Cache files are automatically regenerated the next time `Show-ColorScript` executes the corresponding script. This regeneration happens transparently and does not require manual intervention.

The default cache path is exposed via the module's `$CacheDir` variable and can be overridden using the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable.

When using `-DryRun` or `-WhatIf`, the cmdlet will still validate that the cache directory exists and report any issues, but will not perform any deletions.

Filtering by `-Category` or `-Tag` requires that the scripts have associated metadata. Scripts without metadata will not match these filters.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -All -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Removes every cache file in the default cache directory without prompting for confirmation. This is useful for completely refreshing the cache after module updates or when troubleshooting display issues.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'aurora-*' -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Previews which aurora-themed cache files would be removed without actually deleting them. The output shows the cache files that match the pattern, allowing you to verify the selection before committing to the deletion.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name bars -Path $env:TEMP -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Clears the cache file for the 'bars' script from a custom cache directory located in the TEMP folder. This is useful when working with the `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` environment variable or testing alternative cache locations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Category Animation -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Shows what would happen if all cache files for scripts in the Animation category were removed. The `-WhatIf` parameter prevents actual deletion and displays the intended actions.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Tag retro | Clear-ColorScriptCache -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Uses pipeline input to preview the removal of cache files for all scripts tagged as 'retro'. Combines filtering by tag with a dry-run preview before committing to the deletion.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'test-*', 'demo-*' -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Removes cache files for all scripts whose names begin with 'test-' or 'demo-' without confirmation. Multiple wildcard patterns can be specified as an array.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Export-ColorScriptMetadata</command:name>
      <maml:description>
        <maml:para>Exports comprehensive metadata for all colorscripts to JSON format or emits structured objects to the pipeline.</maml:para>
      </maml:description>
      <command:verb>Export</command:verb>
      <command:noun>ColorScriptMetadata</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Export-ColorScriptMetadata` cmdlet compiles a comprehensive inventory of all colorscripts in the module's catalog and generates a structured dataset describing each entry. This metadata includes essential information such as script names, categories, tags, and optional enrichments.</maml:para>
      <maml:para>By default, the cmdlet returns PowerShell objects to the pipeline. When the `-Path` parameter is provided, it writes the metadata as formatted JSON to the specified file, automatically creating parent directories if they don't exist.</maml:para>
      <maml:para>The cmdlet offers two optional enrichment flags: - **IncludeFileInfo**: Adds file system metadata including full paths, file sizes (in bytes), and last modification timestamps - **IncludeCacheInfo**: Appends cache-related information including cache file paths, existence status, and cache timestamps</maml:para>
      <maml:para>This cmdlet is particularly useful for: - Creating documentation or dashboards showing all available colorscripts - Analyzing cache coverage and identifying scripts needing cache rebuilds - Feeding metadata to external tools or automation pipelines - Auditing colorscript inventory and file system status - Generating reports on colorscript usage and organization</maml:para>
      <maml:para>The output is ordered consistently, making it suitable for version control and diff operations when exported to JSON.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Augments each record with cache metadata, including the cache file path, whether a cache file exists, and its last modification timestamp. This is useful for identifying scripts that may need cache regeneration or analyzing cache coverage across the colorscript library.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Includes file system details (full path, size in bytes, and last write time) in each record. When file metadata cannot be read (due to permissions or missing files), errors are logged via verbose output and the affected properties are set to null values. This switch is valuable for auditing file sizes and modification dates.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the metadata objects to the pipeline even when the `-Path` parameter is specified. This allows you to both save the metadata to a file and perform additional processing or filtering on the objects in a single command. Without this switch, specifying `-Path` suppresses pipeline output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the destination file path for the JSON export. Supports relative paths, absolute paths, environment variables (e.g., `$env:TEMP\metadata.json`), and tilde expansion (e.g., `~/Documents/metadata.json`). Parent directories are automatically created if they don't exist. When this parameter is omitted, the cmdlet outputs objects directly to the pipeline instead of writing to a file. The JSON output is formatted with indentation for readability.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Augments each record with cache metadata, including the cache file path, whether a cache file exists, and its last modification timestamp. This is useful for identifying scripts that may need cache regeneration or analyzing cache coverage across the colorscript library.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Includes file system details (full path, size in bytes, and last write time) in each record. When file metadata cannot be read (due to permissions or missing files), errors are logged via verbose output and the affected properties are set to null values. This switch is valuable for auditing file sizes and modification dates.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the metadata objects to the pipeline even when the `-Path` parameter is specified. This allows you to both save the metadata to a file and perform additional processing or filtering on the objects in a single command. Without this switch, specifying `-Path` suppresses pipeline output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the destination file path for the JSON export. Supports relative paths, absolute paths, environment variables (e.g., `$env:TEMP\metadata.json`), and tilde expansion (e.g., `~/Documents/metadata.json`). Parent directories are automatically created if they don't exist. When this parameter is omitted, the cmdlet outputs objects directly to the pipeline instead of writing to a file. The JSON output is formatted with indentation for readability.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeCacheInfo</maml:name>
        <maml:description>
          <maml:para>Augments each record with cache metadata, including the cache file path, whether a cache file exists, and its last modification timestamp. This is useful for identifying scripts that may need cache regeneration or analyzing cache coverage across the colorscript library.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeFileInfo</maml:name>
        <maml:description>
          <maml:para>Includes file system details (full path, size in bytes, and last write time) in each record. When file metadata cannot be read (due to permissions or missing files), errors are logged via verbose output and the affected properties are set to null values. This switch is valuable for auditing file sizes and modification dates.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns the metadata objects to the pipeline even when the `-Path` parameter is specified. This allows you to both save the metadata to a file and perform additional processing or filtering on the objects in a single command. Without this switch, specifying `-Path` suppresses pipeline output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the destination file path for the JSON export. Supports relative paths, absolute paths, environment variables (e.g., `$env:TEMP\metadata.json`), and tilde expansion (e.g., `~/Documents/metadata.json`). Parent directories are automatically created if they don't exist. When this parameter is omitted, the cmdlet outputs objects directly to the pipeline instead of writing to a file. The JSON output is formatted with indentation for readability.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-Path` is not specified, or when `-PassThru` is used, the cmdlet returns custom objects. Each object represents a single colorscript with the following base properties:

- **Name**: The colorscript's filename without extension
- **Category**: The organizational category (e.g., "nature", "abstract", "geometric")
- **Tags**: An array of descriptive tags for filtering and searching

When `-IncludeFileInfo` is specified, these additional properties are included:

- **FilePath**: The full filesystem path to the script file
- **FileSize**: Size in bytes (null if file is inaccessible)
- **LastWriteTime**: Timestamp of last modification (null if unavailable)

When `-IncludeCacheInfo` is specified, these additional properties are included:

- **CachePath**: The full path to the corresponding cache file
- **CacheExists**: Boolean indicating whether a cache file exists
- **CacheLastWriteTime**: Timestamp of cache file modification (null if cache doesn't exist)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Performance Considerations:**
- Adding `-IncludeFileInfo` or `-IncludeCacheInfo` requires filesystem I/O operations and may impact performance when processing large colorscript libraries.

**Cache Directory Management:**
- Cache metadata collection ensures the cache directory exists before attempting to read cache files.
- When cache files are missing or unavailable, the `CacheExists` property is set to `false` and `CacheLastWriteTime` is set to null.

**Error Handling:**
- File metadata read errors are reported via verbose output (`-Verbose`) rather than terminating the cmdlet.
- Individual file errors result in null values for the affected properties while allowing the cmdlet to continue processing remaining colorscripts.

**JSON Output Format:**
- JSON files are written with indentation (depth 2) for human readability.
- The output encoding is UTF-8 for maximum compatibility.
- Existing files at the target path are overwritten without prompting.

**Use Cases:**
- Integrating with CI/CD pipelines for documentation generation
- Building web dashboards or API endpoints serving colorscript metadata
- Creating inventory reports for large colorscript collections
- Identifying scripts requiring cache regeneration</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Exports basic metadata for all colorscripts to the pipeline without file or cache information.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Returns objects that include file system details (full path, size, and last write time) for each colorscript.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Generates a JSON file containing basic metadata and writes it to the `dist` directory, creating the folder if it doesn't exist.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -IncludeFileInfo -IncludeCacheInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Generates a comprehensive JSON file with enriched metadata including both file system and cache information, writing it to the `dist` directory.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -PassThru | Where-Object { -not $_.CacheExists }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Writes the metadata file and also returns the objects to the pipeline, enabling queries that identify scripts without cache files.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo | Group-Object Category | Select-Object Name, Count
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Groups colorscripts by category and displays counts, useful for analyzing the distribution of scripts across categories.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$metadata = Export-ColorScriptMetadata -IncludeFileInfo
$totalSize = ($metadata | Measure-Object -Property FileSize -Sum).Sum
Write-Host "Total size of all colorscripts: $($totalSize / 1KB) KB"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Calculates the total disk space used by all colorscript files.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Invoke-ColorScript</maml:linkText>
        <command:uri>Invoke-ColorScript.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Retrieves the current ColorScripts-Enhanced module configuration settings.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Get-ColorScriptConfiguration` retrieves the effective module configuration, which controls various aspects of ColorScripts-Enhanced behavior. This includes:</maml:para>
      <maml:para>- **Cache Settings**: Location where script metadata and indexes are stored for performance optimization - **Startup Behavior**: Flags that control whether scripts run automatically when PowerShell sessions start - **Path Configuration**: Custom script directories and search paths - **Display Preferences**: Default formatting and output options</maml:para>
      <maml:para>The configuration is assembled from multiple sources in order of precedence: 1. Built-in module defaults (lowest priority) 2. Persisted user overrides from the configuration file 3. Session-specific modifications (highest priority)</maml:para>
      <maml:para>The configuration file is typically located at `%APPDATA%\ColorScripts-Enhanced\config.json` on Windows or `~/.config/ColorScripts-Enhanced/config.json` on Unix-like systems.</maml:para>
      <maml:para>The returned hashtable is a snapshot of the current configuration state and can be safely inspected, cloned, or serialized without affecting the active configuration.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptConfiguration</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Returns a nested hashtable containing the following structure:

- **Cache** (Hashtable): Cache-related settings
  - **Location** (String): Path to the cache directory
  - **Enabled** (Boolean): Whether caching is active
- **Startup** (Hashtable): Startup behavior settings
  - **Enabled** (Boolean): Whether scripts run on session start
  - **ScriptName** (String): Name of the default startup script
- **Paths** (Array): Additional script search paths
- **Display** (Hashtable): Output formatting preferences</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Module Initialization**: The configuration is initialized automatically when the ColorScripts-Enhanced module loads. This cmdlet retrieves the current in-memory configuration state.

**No Modifications**: Calling this cmdlet is read-only and does not modify any persisted settings or the active configuration.

**Thread Safety**: The returned hashtable is a copy of the configuration, making it safe for concurrent access and modification without affecting the module's internal state.

**Performance**: Configuration retrieval is lightweight and suitable for frequent calls, as it returns the cached in-memory configuration rather than reading from disk.

**Configuration File Format**: The persisted configuration uses JSON format with UTF-8 encoding. Manual editing is supported but not recommended; use `Set-ColorScriptConfiguration` instead.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the current configuration using the default table view, showing all cache and startup settings.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | ConvertTo-Json -Depth 4
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Serializes the configuration to JSON format for logging, debugging, or exporting to other tools.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
$config.Cache.Location
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Retrieves the configuration and accesses the cache location path directly from the hashtable.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
if ($config.Startup.Enabled) {
    Write-Host "Startup scripts are enabled"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Checks whether startup scripts are enabled in the current configuration.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | Format-List *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all configuration properties in a detailed list format for comprehensive inspection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_ColorScripts_Configuration</maml:linkText>
        <command:uri>about_ColorScripts_Configuration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptList</command:name>
      <maml:description>
        <maml:para>Lists available colorscripts with optional filtering and rich metadata output.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptList</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `Get-ColorScriptList` cmdlet retrieves and displays all colorscripts packaged with the ColorScripts-Enhanced module. It provides flexible filtering options and multiple output formats to suit different use cases.</maml:para>
      <maml:para>By default, the cmdlet displays a concise formatted table showing script names and categories. The `-Detailed` switch expands this view to include tags and descriptions, providing more context at a glance.</maml:para>
      <maml:para>For automation and programmatic scenarios, the `-AsObject` parameter returns the raw metadata records as PowerShell objects, enabling further processing through the pipeline. These records include comprehensive information such as name, category, categories, tags, description, and the original metadata property.</maml:para>
      <maml:para>Filtering capabilities allow you to narrow down the list by: - **Name**: Supports wildcard patterns (e.g., `aurora-*`) for flexible matching - **Category**: Filter by one or more category names (case-insensitive) - **Tag**: Filter by metadata tags such as "Recommended" or "Animated" (case-insensitive)</maml:para>
      <maml:para>The cmdlet validates filter patterns and generates warnings for any unmatched name patterns, helping you identify potential typos or missing scripts.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Returns raw metadata record objects instead of rendering a formatted table to the host. This enables pipeline processing and programmatic manipulation of the colorscript metadata.</maml:para>
            <maml:para>When this switch is specified, you can use standard PowerShell cmdlets like `Where-Object`, `Select-Object`, `Sort-Object`, and `ForEach-Object` to further process the results.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filters the list to include only scripts belonging to one or more specified categories. Category matching is case-insensitive.</maml:para>
            <maml:para>Common categories include: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, and more. You can specify multiple categories to broaden your search.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Includes additional columns (tags and description) when rendering the formatted table view. This provides more comprehensive information about each script at a glance.</maml:para>
            <maml:para>Without this switch, only the name and primary category are displayed in the table output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filters the colorscript list by one or more script names. Supports wildcard characters (`*` and `?`) for flexible pattern matching.</maml:para>
            <maml:para>If a specified pattern does not match any scripts, a warning is generated to help identify potential issues. Name matching is case-insensitive.</maml:para>
            <maml:para>You can specify exact names or use patterns like `aurora-*` to match multiple related scripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filters the list to include only scripts containing one or more specified metadata tags. Tag matching is case-insensitive.</maml:para>
            <maml:para>Common tags include: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, and more. Tags help categorize scripts by visual style, complexity, or use case.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Returns raw metadata record objects instead of rendering a formatted table to the host. This enables pipeline processing and programmatic manipulation of the colorscript metadata.</maml:para>
            <maml:para>When this switch is specified, you can use standard PowerShell cmdlets like `Where-Object`, `Select-Object`, `Sort-Object`, and `ForEach-Object` to further process the results.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filters the list to include only scripts belonging to one or more specified categories. Category matching is case-insensitive.</maml:para>
            <maml:para>Common categories include: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, and more. You can specify multiple categories to broaden your search.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Includes additional columns (tags and description) when rendering the formatted table view. This provides more comprehensive information about each script at a glance.</maml:para>
            <maml:para>Without this switch, only the name and primary category are displayed in the table output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filters the colorscript list by one or more script names. Supports wildcard characters (`*` and `?`) for flexible pattern matching.</maml:para>
            <maml:para>If a specified pattern does not match any scripts, a warning is generated to help identify potential issues. Name matching is case-insensitive.</maml:para>
            <maml:para>You can specify exact names or use patterns like `aurora-*` to match multiple related scripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filters the list to include only scripts containing one or more specified metadata tags. Tag matching is case-insensitive.</maml:para>
            <maml:para>Common tags include: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, and more. Tags help categorize scripts by visual style, complexity, or use case.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsObject</maml:name>
        <maml:description>
          <maml:para>Returns raw metadata record objects instead of rendering a formatted table to the host. This enables pipeline processing and programmatic manipulation of the colorscript metadata.</maml:para>
          <maml:para>When this switch is specified, you can use standard PowerShell cmdlets like `Where-Object`, `Select-Object`, `Sort-Object`, and `ForEach-Object` to further process the results.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filters the list to include only scripts belonging to one or more specified categories. Category matching is case-insensitive.</maml:para>
          <maml:para>Common categories include: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, and more. You can specify multiple categories to broaden your search.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Detailed</maml:name>
        <maml:description>
          <maml:para>Includes additional columns (tags and description) when rendering the formatted table view. This provides more comprehensive information about each script at a glance.</maml:para>
          <maml:para>Without this switch, only the name and primary category are displayed in the table output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Filters the colorscript list by one or more script names. Supports wildcard characters (`*` and `?`) for flexible pattern matching.</maml:para>
          <maml:para>If a specified pattern does not match any scripts, a warning is generated to help identify potential issues. Name matching is case-insensitive.</maml:para>
          <maml:para>You can specify exact names or use patterns like `aurora-*` to match multiple related scripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filters the list to include only scripts containing one or more specified metadata tags. Tag matching is case-insensitive.</maml:para>
          <maml:para>Common tags include: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, and more. Tags help categorize scripts by visual style, complexity, or use case.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-AsObject` is specified, returns colorscript metadata record objects with the following properties:
- **Name**: The script identifier used with `Show-ColorScript`
- **Category**: The primary category of the script
- **Categories**: An array of all categories the script belongs to
- **Tags**: An array of metadata tags describing the script
- **Description**: A human-readable description of the script's visual output
- **Metadata**: The original metadata object containing all raw script information

Without `-AsObject`, the cmdlet writes a formatted table to the host while still returning the record objects for potential pipeline processing.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author**: Nick
**Module**: ColorScripts-Enhanced
**Version**: 1.0

The returned metadata records provide comprehensive information for both display and automation purposes. The `Name` property can be used directly with the `Show-ColorScript` cmdlet to execute specific scripts.

All filtering operations (Name, Category, Tag) are case-insensitive and can be combined to create powerful queries. When using wildcards in the `-Name` parameter, unmatched patterns generate warnings to help with troubleshooting.

For best results when integrating colorscripts into your PowerShell profile, use the `-Tag Recommended` filter to identify curated scripts suitable for startup display.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all available colorscripts in a compact table format showing the name and category of each script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Shows all colorscripts with additional columns including tags and descriptions for a comprehensive overview.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed -Category Patterns
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays only scripts in the "Patterns" category with full metadata including tags and descriptions.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Name 'aurora-*' | Select-Object Name, Tags
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Returns structured objects for every script whose name matches the wildcard pattern, then selects only the Name and Tags properties for display.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Tag Recommended | Sort-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Retrieves all scripts tagged as "Recommended" and sorts them alphabetically by name. Useful for finding curated scripts suitable for profile integration.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Category Geometric,Abstract | Where-Object { $_.Tags -contains 'Colorful' }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Combines category and tag filtering to find scripts that are both in the Geometric or Abstract categories and tagged as Colorful.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Name blocks,pipes,matrix -AsObject | ForEach-Object { Show-ColorScript -Name $_.Name }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Retrieves specific named scripts and executes each one in sequence, demonstrating pipeline integration with `Show-ColorScript`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Module Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScript</command:name>
      <maml:description>
        <maml:para>Scaffold a new colorscript file and optionally emit metadata guidance.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>The `New-ColorScript` cmdlet creates a complete colorscript skeleton that serves as a foundation for developing custom ANSI art scripts. The generated file includes a pre-formatted template with ANSI escape sequence examples, proper UTF-8 encoding without a byte-order mark (BOM), and optional metadata guidance for integration with the module's metadata system.</maml:para>
      <maml:para>By default, the script is written into the module's `Scripts` directory, ensuring it can be automatically discovered by the module's script enumeration functions. However, the `-OutputPath` parameter allows targeting any custom directory for development or testing purposes.</maml:para>
      <maml:para>Script names must follow PowerShell naming conventions: they must begin with an alphanumeric character and may include underscores or hyphens. The `.ps1` extension is automatically appended if not provided. Existing files are protected from accidental overwrites unless the `-Force` switch is explicitly specified.</maml:para>
      <maml:para>When combined with the `-GenerateMetadataSnippet` parameter, the cmdlet produces ready-to-use PowerShell code that demonstrates how to register the new script in `ScriptMetadata.psd1`. This guidance includes the category and tag values specified through the respective parameters, streamlining the process of integrating custom scripts into the module's organizational structure.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Specifies the primary category for the colorscript when generating metadata guidance. This parameter is only meaningful when used with `-GenerateMetadataSnippet`. Common categories include 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming', and 'Abstract'. The value should align with existing categories in `ScriptMetadata.psd1` for consistency.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Overwrites the destination file if it already exists. Without this switch, the cmdlet will terminate with an error if a file with the same name is found at the target location. Use with caution to avoid data loss.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Includes a guidance snippet in the output that demonstrates how to register the new script in `ScriptMetadata.psd1`. The snippet uses the values from `-Category` and `-Tag` parameters if provided. This is particularly useful for maintaining consistent metadata across all colorscripts in the module.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the new colorscript. The name must begin with an alphanumeric character and can include underscores or hyphens. The `.ps1` extension is appended automatically if not included. This name will be used as the filename and should be descriptive of the script's content or theme.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Specifies the destination directory for the scaffold. When not specified, defaults to the module's `Scripts` directory. The path supports tilde (`~`) expansion for the user's home directory, environment variables (e.g., `$env:USERPROFILE`), and both relative and absolute paths. The directory will be created if it doesn't exist.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Specifies one or more metadata tags for the colorscript. Tags provide additional classification beyond the primary category and are useful for filtering and searching. Common tags include theme descriptors like 'Minimal', 'Colorful', 'Animated', technology references like 'Matrix', 'ASCII', or contextual markers like 'Holiday', 'Season'. Multiple tags can be specified as a comma-separated array.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing any actions. Displays the file path that would be created and any validation checks that would be performed. The cmdlet does not create any files or directories when this switch is specified.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Specifies the primary category for the colorscript when generating metadata guidance. This parameter is only meaningful when used with `-GenerateMetadataSnippet`. Common categories include 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming', and 'Abstract'. The value should align with existing categories in `ScriptMetadata.psd1` for consistency.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Overwrites the destination file if it already exists. Without this switch, the cmdlet will terminate with an error if a file with the same name is found at the target location. Use with caution to avoid data loss.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Includes a guidance snippet in the output that demonstrates how to register the new script in `ScriptMetadata.psd1`. The snippet uses the values from `-Category` and `-Tag` parameters if provided. This is particularly useful for maintaining consistent metadata across all colorscripts in the module.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the new colorscript. The name must begin with an alphanumeric character and can include underscores or hyphens. The `.ps1` extension is appended automatically if not included. This name will be used as the filename and should be descriptive of the script's content or theme.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Specifies the destination directory for the scaffold. When not specified, defaults to the module's `Scripts` directory. The path supports tilde (`~`) expansion for the user's home directory, environment variables (e.g., `$env:USERPROFILE`), and both relative and absolute paths. The directory will be created if it doesn't exist.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Specifies one or more metadata tags for the colorscript. Tags provide additional classification beyond the primary category and are useful for filtering and searching. Common tags include theme descriptors like 'Minimal', 'Colorful', 'Animated', technology references like 'Matrix', 'ASCII', or contextual markers like 'Holiday', 'Season'. Multiple tags can be specified as a comma-separated array.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing any actions. Displays the file path that would be created and any validation checks that would be performed. The cmdlet does not create any files or directories when this switch is specified.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Specifies the primary category for the colorscript when generating metadata guidance. This parameter is only meaningful when used with `-GenerateMetadataSnippet`. Common categories include 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming', and 'Abstract'. The value should align with existing categories in `ScriptMetadata.psd1` for consistency.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Overwrites the destination file if it already exists. Without this switch, the cmdlet will terminate with an error if a file with the same name is found at the target location. Use with caution to avoid data loss.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>GenerateMetadataSnippet</maml:name>
        <maml:description>
          <maml:para>Includes a guidance snippet in the output that demonstrates how to register the new script in `ScriptMetadata.psd1`. The snippet uses the values from `-Category` and `-Tag` parameters if provided. This is particularly useful for maintaining consistent metadata across all colorscripts in the module.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the new colorscript. The name must begin with an alphanumeric character and can include underscores or hyphens. The `.ps1` extension is appended automatically if not included. This name will be used as the filename and should be descriptive of the script's content or theme.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>OutputPath</maml:name>
        <maml:description>
          <maml:para>Specifies the destination directory for the scaffold. When not specified, defaults to the module's `Scripts` directory. The path supports tilde (`~`) expansion for the user's home directory, environment variables (e.g., `$env:USERPROFILE`), and both relative and absolute paths. The directory will be created if it doesn't exist.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Specifies one or more metadata tags for the colorscript. Tags provide additional classification beyond the primary category and are useful for filtering and searching. Common tags include theme descriptors like 'Minimal', 'Colorful', 'Animated', technology references like 'Matrix', 'ASCII', or contextual markers like 'Holiday', 'Season'. Multiple tags can be specified as a comma-separated array.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs without actually performing any actions. Displays the file path that would be created and any validation checks that would be performed. The cmdlet does not create any files or directories when this switch is specified.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>The cmdlet returns a custom object with the following properties:

- **ScriptName**: The name of the created colorscript (including .ps1 extension)
- **Path**: The full path to the generated file
- **Category**: The category value that was specified (if any)
- **Tags**: The array of tag values that were specified (if any)
- **MetadataGuidance**: The metadata snippet text (only when -GenerateMetadataSnippet is used)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Encoding**: The scaffold is written with UTF-8 encoding without a byte-order mark (BOM), ensuring compatibility across different platforms and editors.

**Template Structure**: The generated template includes:
- A comment-based help block with placeholders for documentation
- An ANSI art sample block demonstrating color sequences and formatting
- Proper PowerShell script structure with clear sections for customization

**Metadata Integration**: While the cmdlet can generate metadata guidance, you must manually add the snippet to `ScriptMetadata.psd1` to fully integrate the script into the module's discovery and categorization system.

**Development Workflow**:
1. Use `New-ColorScript` to create the scaffold
2. Edit the generated .ps1 file to add your ANSI art
3. If metadata guidance was generated, copy it to `ScriptMetadata.psd1`
4. Run `Build-ColorScriptCache` to rebuild the module's cache
5. Test your script with `Show-ColorScript -Name &lt;your-script-name&gt;`

**Best Practices**:
- Choose descriptive, hyphenated names that clearly indicate the script's theme
- Use consistent category values that align with existing scripts
- Apply multiple tags to improve discoverability
- Test scripts in different terminal environments to ensure compatibility</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'my-spectrum' -GenerateMetadataSnippet -Category 'Artistic' -Tag 'Custom','Demo'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Creates `my-spectrum.ps1` in the module's `Scripts` directory and returns a PowerShell object containing the file path and a metadata snippet. The snippet shows how to add an entry to `ScriptMetadata.psd1` with the 'Artistic' category and tags 'Custom' and 'Demo'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'holiday-banner' -OutputPath '~/Dev/colorscripts' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Generates the scaffold under a custom directory (`~/Dev/colorscripts`), creating the directory if it doesn't exist. If a file named `holiday-banner.ps1` already exists in that location, it will be overwritten due to the `-Force` switch.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$result = New-ColorScript -Name 'retro-wave' -Category 'Retro' -Tag '80s','Neon' -GenerateMetadataSnippet
$result.MetadataGuidance | Set-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Creates a new colorscript and copies the metadata guidance to the clipboard, making it easy to paste into `ScriptMetadata.psd1`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'test-pattern' -OutputPath '.\temp' -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Shows what would happen when creating a test pattern script in the `.\temp` directory without actually creating the file. Useful for validating paths and names before execution.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ScriptMetadata.psd1</maml:linkText>
        <command:uri>../ScriptMetadata.psd1</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Reset-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Restore the ColorScripts-Enhanced configuration to its default values.</maml:para>
      </maml:description>
      <command:verb>Reset</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Reset-ColorScriptConfiguration` clears all persisted configuration overrides and restores the module to its factory defaults. When executed, this cmdlet:</maml:para>
      <maml:para>- Removes all custom configuration settings from the configuration file - Resets the cache path to the platform-specific default location - Restores all startup flags (RunOnStartup, RandomOnStartup, etc.) to their original values - Preserves the configuration file structure while clearing user customizations</maml:para>
      <maml:para>This cmdlet supports `-WhatIf` and `-Confirm` parameters because it performs a destructive operation by overwriting the configuration file. The reset operation cannot be undone automatically, so users should consider backing up their current configuration using `Get-ColorScriptConfiguration` before proceeding.</maml:para>
      <maml:para>Use the `-PassThru` parameter to immediately inspect the newly restored default settings after the reset completes.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the updated configuration object after the reset completes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually executing the reset operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the updated configuration object after the reset completes.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually executing the reset operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return the updated configuration object after the reset completes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs without actually executing the reset operation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Returned when `-PassThru` is specified.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>The configuration file is stored under the directory resolved by `Get-ColorScriptConfiguration`. By default, this location is platform-specific:

- **Windows**: `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS**: `$HOME/.config/ColorScripts-Enhanced`

The environment variable `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` can override the default location if set before module import.

**Important Considerations:**

- The reset operation is immediate and cannot be automatically undone
- Any custom color script paths, cache locations, or startup behaviors will be lost
- Consider using `Get-ColorScriptConfiguration` to export your current settings before resetting
- The module must have write permissions to the configuration directory
- Other PowerShell sessions using the module will see the changes after their next configuration reload

**Default Values Restored:**

- CachePath: Platform-specific default cache directory
- RunOnStartup: `$false`
- RandomOnStartup: `$false`
- ScriptOnStartup: Empty string
- CustomScriptPaths: Empty array</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Resets the configuration without prompting for confirmation. This is useful in automated scripts or when you're certain about resetting to defaults.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Resets the configuration and returns the resulting hashtable for inspection, allowing you to verify the default values.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Backup current configuration before resetting
$backup = Get-ColorScriptConfiguration
Reset-ColorScriptConfiguration -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Uses `-WhatIf` to preview the reset operation without actually executing it, after backing up the current configuration.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Verbose
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Resets the configuration with verbose output to see detailed information about the operation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Persist changes to the ColorScripts-Enhanced cache and startup configuration.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Set-ColorScriptConfiguration` provides a persistent way to customize the behavior and storage location of the ColorScripts-Enhanced module. This cmdlet updates the module's configuration file, allowing you to control various aspects of script rendering and storage.</maml:para>
      <maml:para>**Key capabilities:**</maml:para>
      <maml:para>- **Cache relocation**: Move the colorscript cache to a custom directory, useful for network shares, faster drives, or centralized storage locations. - **Auto-import behavior**: Control whether a colorscript automatically displays when the module is first imported into your PowerShell session. - **Profile integration**: Configure default settings for `Add-ColorScriptProfile` to streamline profile setup. - **Default script selection**: Set a preferred colorscript that will be used when no specific script is requested.</maml:para>
      <maml:para>Any directory path supplied for `-CachePath` is automatically created if it does not already exist. The cmdlet supports environment variable expansion, tilde (`~`) home directory expansion, and both absolute and relative paths. Supplying an empty string (`''`) to `-CachePath` or `-DefaultScript` clears the stored value and reverts to module defaults.</maml:para>
      <maml:para>Changes made with this cmdlet take effect immediately for new operations but may not affect already-loaded cache data until the module is reimported or PowerShell is restarted.</maml:para>
      <maml:para>When `-PassThru` is specified, the cmdlet returns the updated configuration object, making it easy to verify changes or chain additional operations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
            <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
            <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
            <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
            <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
            <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
            <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
            <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
            <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
            <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
            <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
            <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
            <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>AutoShowOnImport</maml:name>
        <maml:description>
          <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>CachePath</maml:name>
        <maml:description>
          <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
          <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
          <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>DefaultScript</maml:name>
        <maml:description>
          <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
          <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
          <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
          <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>ProfileAutoShow</maml:name>
        <maml:description>
          <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
          <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet produces no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns a hashtable containing the complete updated configuration. The structure matches the output of `Get-ColorScriptConfiguration`, with keys such as `CachePath`, `AutoShowOnImport`, `ProfileAutoShow`, and `DefaultScript`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Configuration file location:**

Configuration changes are persisted to a JSON or XML file stored in a platform-specific application data directory. Use `Get-ColorScriptConfiguration` to view the current configuration root path. The environment variable `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` can override the default configuration directory location if set before module import.

**Platform defaults:**

- **Windows**: `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS**: `~/.config/ColorScripts-Enhanced` or `$XDG_CONFIG_HOME/ColorScripts-Enhanced`

**Best practices:**

- Test cache path changes in a non-production environment first, especially when using network locations.
- Use `-PassThru` when scripting to validate configuration updates programmatically.
- Consider setting `AutoShowOnImport:$false` in automated scripts or CI/CD pipelines to avoid unexpected visual output.
- Document custom configurations in team environments to ensure consistent behavior across users.

**Permissions:**

Ensure you have write permissions to the configuration directory. On shared systems, configuration changes affect only the current user's profile unless overridden with environment variables pointing to shared locations.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath 'D:/Temp/ColorScriptsCache' -AutoShowOnImport:$true -ProfileAutoShow:$false -DefaultScript 'bars'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Moves the cache to `D:/Temp/ColorScriptsCache`, enables automatic display on module import, disables profile auto-show, and sets `bars` as the default script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -DefaultScript '' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Clears the default script and returns the resulting configuration object, allowing you to verify that the setting was removed.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "$env:TEMP\ColorScripts" -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Relocates the cache to the Windows TEMP directory and displays the full updated configuration in list format. Useful for temporary testing scenarios.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -AutoShowOnImport:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Disables automatic colorscript rendering when the module loads. Useful if you prefer manual control over when scripts are displayed.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath '~/.local/share/colorscripts' -DefaultScript 'crunch'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Sets a Linux/macOS-style cache path using tilde expansion and configures 'crunch' as the default script for all operations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Show-ColorScript</command:name>
      <maml:description>
        <maml:para>Displays a colorscript with automatic caching for enhanced performance.</maml:para>
      </maml:description>
      <command:verb>Show</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Renders beautiful ANSI colorscripts in your terminal with intelligent performance optimization. The cmdlet provides four primary modes of operation:</maml:para>
      <maml:para>**Random Mode (Default):** Displays a randomly selected colorscript from the available collection. This is the default behavior when no parameters are specified.</maml:para>
      <maml:para>**Named Mode:** Displays a specific colorscript by name. Supports wildcard patterns for flexible matching. When multiple scripts match a pattern, the first match in alphabetical order is selected.</maml:para>
      <maml:para>**List Mode:** Displays a formatted list of all available colorscripts with their metadata, including name, category, tags, and descriptions.</maml:para>
      <maml:para>**All Mode:** Cycles through all available colorscripts in alphabetical order. Particularly useful for showcasing the entire collection or discovering new scripts.</maml:para>
      <maml:para>**Performance Features:** The caching system provides 6-19x performance improvements. On first execution, a colorscript runs normally and its output is cached. Subsequent displays use the cached output for near-instant rendering. The cache is automatically invalidated when source scripts are modified, ensuring output accuracy.</maml:para>
      <maml:para>**Filtering Capabilities:** Filter scripts by category or tags before selection occurs. This applies across all modes, allowing you to work with subsets of the collection (e.g., only nature-themed scripts or scripts tagged as "retro").</maml:para>
      <maml:para>**Output Options:** By default, colorscripts are written directly to the console for immediate visual display. Use `-ReturnText` to emit the rendered output to the pipeline for capture, redirection, or further processing. Use `-PassThru` to receive the script's metadata object for programmatic use.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Random</maml:name>
          <maml:description>
            <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>List</maml:name>
          <maml:description>
            <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Cycle through all available colorscripts in alphabetical order. When specified alone, scripts are displayed continuously with a short automatic delay. Combine with `-WaitForInput` to manually control progression through the collection. This mode is ideal for showcasing the full library or discovering new favorites.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WaitForInput</maml:name>
          <maml:description>
            <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Cycle through all available colorscripts in alphabetical order. When specified alone, scripts are displayed continuously with a short automatic delay. Combine with `-WaitForInput` to manually control progression through the collection. This mode is ideal for showcasing the full library or discovering new favorites.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>List</maml:name>
        <maml:description>
          <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoCache</maml:name>
        <maml:description>
          <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Random</maml:name>
        <maml:description>
          <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReturnText</maml:name>
        <maml:description>
          <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WaitForInput</maml:name>
        <maml:description>
          <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe colorscript names to Show-ColorScript. This enables pipeline-based workflows where script names are generated or filtered by other commands.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns the selected colorscript's metadata object containing properties like Name, Path, Category, Tags, and Description.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-ReturnText` is specified, emits the rendered colorscript as a string to the pipeline. This string contains all ANSI escape sequences for proper color rendering when displayed in a compatible terminal.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>In default operation (without `-PassThru` or `-ReturnText`), output is written directly to the console host and nothing is returned to the pipeline.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance:**
The intelligent caching system provides 6-19x performance improvements over direct execution. Cache files are stored in a module-managed directory and are automatically invalidated when source scripts are modified, ensuring accuracy.

**Cache Management:**
- Cache location: Use `(Get-Module ColorScripts-Enhanced).ModuleBase` and look for the cache directory
- Clear cache: Use `Clear-ColorScriptCache` to rebuild from scratch
- Rebuild cache: Use `Build-ColorScriptCache` to pre-populate cache for all scripts
- Inspect cache: Cache files are plain text and can be viewed directly

**Tips:**
- Add `Show-ColorScript -Random` to your PowerShell profile for a colorful greeting on each session start
- Use the module alias `scs` for quick access: `scs -Random`
- Combine category and tag filters for precise selection
- Use `-List` to discover new scripts and learn about their themes
- The `-All -WaitForInput` combination is perfect for presenting the collection to others

**Compatibility:**
Colorscripts use ANSI escape sequences and display best in terminals with full color support, such as Windows Terminal, ConEmu, or modern Unix terminals.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random colorscript with caching enabled. This is the quickest way to add visual flair to your terminal session.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "mandelbrot-zoom"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the specified colorscript by exact name. The .ps1 extension is not required.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "aurora-*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the first colorscript (alphabetically) that matches the wildcard pattern "aurora-*". Useful when you remember part of a script's name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
scs hearts
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Uses the module's alias 'scs' for quick access to the hearts colorscript. Aliases provide convenient shortcuts for frequent use.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists all available colorscripts with their metadata in a formatted table. Helpful for discovering available scripts and their attributes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name arch -NoCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the arch colorscript without using cache, forcing fresh execution. Useful during development or when troubleshooting cache issues.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Category Nature -PassThru | Select-Object Name, Category
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random nature-themed script and captures its metadata object for further inspection or processing.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "bars" -ReturnText | Set-Content bars.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Renders the colorscript and saves the output to a text file. The rendered ANSI codes are preserved, allowing the file to be displayed later with proper coloring.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts in alphabetical order with a brief automatic delay between each. Perfect for a visual showcase of the entire collection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts one at a time, pausing after each. Press spacebar to advance to the next script, or press 'q' to quit the sequence early.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -Category Nature -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cycles through all nature-themed colorscripts with manual progression. Combines filtering with interactive browsing for a curated experience.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Tag retro,geometric -Random
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random colorscript that has both "retro" and "geometric" tags. Tag filtering enables precise subset selection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List -Category Art,Abstract
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists only colorscripts categorized as "Art" or "Abstract", helping you discover scripts within specific themes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Build-ColorScriptCache</maml:linkText>
        <command:uri>Build-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>