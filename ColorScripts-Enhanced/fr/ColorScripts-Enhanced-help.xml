<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-ColorScriptProfile</command:name>
      <maml:description>
        <maml:para>Ajoute l'importation du module ColorScripts-Enhanced (et éventuellement Show-ColorScript) à un fichier de profil PowerShell.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>ColorScriptProfile</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Ajoute un extrait de démarrage au fichier de profil PowerShell spécifié. L'extrait importe toujours le module ColorScripts-Enhanced et, sauf si supprimé avec `-SkipStartupScript`, ajoute un appel à `Show-ColorScript` afin qu'un colorscript aléatoire soit affiché au lancement de PowerShell.</maml:para>
      <maml:para>Le fichier de profil est créé automatiquement s'il n'existe pas déjà. Les importations dupliquées sont évitées sauf si `-Force` est spécifié.</maml:para>
      <maml:para>Le paramètre `-Path` accepte les chemins relatifs, les variables d'environnement et l'expansion `~`, facilitant le ciblage de profils en dehors des emplacements par défaut. Si `-Path` n'est pas fourni, le paramètre `-Scope` détermine quel profil PowerShell standard modifier.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-ColorScriptProfile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Invite à confirmer avant d'exécuter l'applet de commande.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Ajoute l'extrait même si le profil contient déjà une ligne `Import-Module ColorScripts-Enhanced`. Utilisez ceci pour forcer des entrées dupliquées ou ré-ajouter l'extrait après suppression manuelle.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>h</maml:name>
          <maml:description>
            <maml:para>Affiche les informations d'aide pour cette applet de commande. Équivalent à utiliser `Get-Help Add-ColorScriptProfile`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Chemin explicite du profil à mettre à jour. Remplace `-Scope` lorsqu'il est fourni. Prend en charge les variables d'environnement (par exemple, `$env:USERPROFILE`), les chemins relatifs et l'expansion `~` pour le répertoire d'accueil.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Portée du profil à mettre à jour lorsque `-Path` n'est pas fourni. Accepte les propriétés de profil PowerShell standard : `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts` ou `AllUsersCurrentHost`. Par défaut à `CurrentUserAllHosts`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SkipStartupScript</maml:name>
          <maml:description>
            <maml:para>Ignore l'ajout de `Show-ColorScript` au profil. Seule la ligne `Import-Module ColorScripts-Enhanced` est ajoutée. Utilisez ceci si vous souhaitez contrôler manuellement quand les colorscripts sont affichés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si l'applet de commande s'exécute. L'applet de commande n'est pas exécutée.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Invite à confirmer avant d'exécuter l'applet de commande.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Ajoute l'extrait même si le profil contient déjà une ligne `Import-Module ColorScripts-Enhanced`. Utilisez ceci pour forcer des entrées dupliquées ou ré-ajouter l'extrait après suppression manuelle.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>h</maml:name>
        <maml:description>
          <maml:para>Affiche les informations d'aide pour cette applet de commande. Équivalent à utiliser `Get-Help Add-ColorScriptProfile`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Chemin explicite du profil à mettre à jour. Remplace `-Scope` lorsqu'il est fourni. Prend en charge les variables d'environnement (par exemple, `$env:USERPROFILE`), les chemins relatifs et l'expansion `~` pour le répertoire d'accueil.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Portée du profil à mettre à jour lorsque `-Path` n'est pas fourni. Accepte les propriétés de profil PowerShell standard : `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts` ou `AllUsersCurrentHost`. Par défaut à `CurrentUserAllHosts`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SkipStartupScript</maml:name>
        <maml:description>
          <maml:para>Ignore l'ajout de `Show-ColorScript` au profil. Seule la ligne `Import-Module ColorScripts-Enhanced` est ajoutée. Utilisez ceci si vous souhaitez contrôler manuellement quand les colorscripts sont affichés.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Montre ce qui se passerait si l'applet de commande s'exécute. L'applet de commande n'est pas exécutée.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette applet de commande n'accepte pas d'entrée de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Retourne un objet personnalisé avec les propriétés suivantes :
- **ProfilePath** (string) : Le chemin complet vers le fichier de profil modifié
- **Changed** (bool) : Si le profil a été réellement modifié
- **Message** (string) : Un message de statut décrivant le résultat de l'opération</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 ou version ultérieure

Le fichier de profil est créé automatiquement s'il n'existe pas, y compris tous les répertoires parents nécessaires. Les importations dupliquées sont détectées et supprimées sauf si `-Force` est utilisé.

Si vous avez besoin d'autorisations élevées pour modifier un profil AllUsers, assurez-vous d'exécuter PowerShell en tant qu'Administrateur.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>Ajouter au profil de l'utilisateur actuel pour tous les hôtes (comportement par défaut).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cela ajoute à la fois l'importation du module et l'appel `Show-ColorScript` à `$PROFILE.CurrentUserAllHosts`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>Ajouter au profil de l'utilisateur actuel pour l'hôte actuel uniquement, sans le script de démarrage.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Scope CurrentUserCurrentHost -SkipStartupScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cela ajoute uniquement la ligne `Import-Module ColorScripts-Enhanced` au profil de l'hôte actuel.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>Ajouter à un chemin de profil personnalisé avec expansion de variable d'environnement.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Path "$env:USERPROFILE\Documents\CustomProfile.ps1"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cela cible un fichier de profil spécifique en dehors des emplacements de profil PowerShell standard.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>Forcer la ré-ajout de l'extrait même s'il existe déjà.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cela ajoute à nouveau l'extrait, même si le profil contient déjà une instruction d'importation pour ColorScripts-Enhanced.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>Configuration sur une nouvelle machine - créer le profil si nécessaire et ajouter ColorScripts à tous les hôtes.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$profileExists = Test-Path $PROFILE.CurrentUserAllHosts
if (-not $profileExists) {
    New-Item -Path $PROFILE.CurrentUserAllHosts -ItemType File -Force | Out-Null
}
Add-ColorScriptProfile -Scope CurrentUserAllHosts -Confirm:$false
Write-Host "Profil configuré ! Redémarrez votre terminal pour voir les colorscripts au démarrage."
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>Ajouter avec un colorscript spécifique pour l'affichage (ajouter manuellement après cette commande) :</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -SkipStartupScript
# Puis modifier manuellement $PROFILE pour ajouter :
# Show-ColorScript -Name mandelbrot-zoom
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>Vérifier que le profil a été ajouté correctement :</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile
Get-Content $PROFILE.CurrentUserAllHosts | Select-String "ColorScripts-Enhanced"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>Ajouter à une portée de profil spécifique ciblant l'hôte actuel uniquement :</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Pour Windows Terminal ou ConEmu uniquement
Add-ColorScriptProfile -Scope CurrentUserCurrentHost</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Pour tous les hôtes PowerShell (ISE, VSCode, Console)
Add-ColorScriptProfile -Scope CurrentUserAllHosts
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>Utilisation de chemins relatifs et d'expansion tilde :</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Utilisation de l'expansion tilde pour le répertoire d'accueil
Add-ColorScriptProfile -Path "~/Documents/PowerShell/profile.ps1"</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Utilisation du chemin relatif du répertoire actuel
Add-ColorScriptProfile -Path ".\my-profile.ps1"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>Afficher un colorscript différent quotidiennement en ajoutant une logique personnalisée :</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -SkipStartupScript
# Puis ajouter ceci à $PROFILE manuellement :
# $seed = (Get-Date).DayOfYear
# Get-Random -SetSeed $seed
# Show-ColorScript
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>./Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>./New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>./Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>GitHub Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Supprimer les fichiers de sortie de script de couleur mis en cache.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Le cmdlet `Clear-ColorScriptCache` supprime les fichiers de sortie mis en cache générés par le module ColorScripts-Enhanced. Les fichiers cache stockent la sortie de script pré-rendue pour améliorer les performances lors des invocations ultérieures.</maml:para>
      <maml:para>Vous pouvez supprimer les fichiers cache de manière sélective en utilisant le paramètre `-Name` avec des modèles de caractères génériques, ou supprimer tous les fichiers cache à la fois avec le paramètre `-All`. Le cmdlet prend également en charge le filtrage par `-Category` et `-Tag` pour cibler des sous-ensembles spécifiques de scripts mis en cache.</maml:para>
      <maml:para>Les noms de script non appariés signalent un statut `Missing` dans les résultats. Utilisez `-DryRun` pour prévisualiser les actions de suppression sans modifier le système de fichiers, et `-Path` pour cibler un répertoire cache alternatif (utile pour les configurations cache personnalisées ou les environnements CI/CD).</maml:para>
      <maml:para>Les fichiers cache sont automatiquement régénérés la prochaine fois que `Show-ColorScript` exécute le script correspondant.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Supprime tous les fichiers cache dans le répertoire cible. Ce paramètre est mutuellement exclusif avec `-Name`, `-Category` et `-Tag`. Lorsqu'il est spécifié, tous les paramètres de filtrage sont ignorés et le cache entier est effacé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par catégorie avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts correspondant aux catégories spécifiées seront considérés pour la suppression. Accepte un tableau de noms de catégories et peut être combiné avec `-Tag` pour un filtrage plus précis.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Demande une confirmation avant d'exécuter le cmdlet. Par défaut, ceci est activé pour éviter la suppression accidentelle de fichiers cache. Utilisez `-Confirm:$false` pour contourner l'invite de confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Prévisualise les actions de suppression sans supprimer aucun fichier. Le cmdlet affichera les fichiers cache qui seraient supprimés mais ne modifiera pas le système de fichiers. Ceci est utile pour vérifier vos critères de sélection avant de procéder à la suppression.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Noms ou modèles de caractères génériques identifiant les fichiers cache à supprimer. Accepte l'entrée pipeline et la liaison de propriété à partir d'objets avec une propriété `Name`. Les caractères génériques (`*`, `?`) sont pris en charge pour la correspondance de modèles. Mutuellement exclusif avec `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Répertoire cache alternatif à utiliser. Par défaut, le chemin cache standard du module si non spécifié. Utilisez ce paramètre lorsque vous travaillez avec des emplacements cache personnalisés définis via la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, ou lorsque vous gérez des fichiers cache dans des répertoires alternatifs pour les tests ou les environnements CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par étiquette de métadonnées avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts avec des étiquettes correspondantes seront considérés pour la suppression. Accepte un tableau de noms d'étiquettes et peut être combiné avec `-Category` pour un contrôle plus granulaire sur les fichiers cache ciblés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si le cmdlet s'exécute sans exécuter réellement l'opération. Le cmdlet affiche les actions qu'il effectuerait mais ne modifie pas le système de fichiers. Ceci est un paramètre commun PowerShell standard qui fonctionne de manière similaire à `-DryRun` mais suit les conventions intégrées de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Supprime tous les fichiers cache dans le répertoire cible. Ce paramètre est mutuellement exclusif avec `-Name`, `-Category` et `-Tag`. Lorsqu'il est spécifié, tous les paramètres de filtrage sont ignorés et le cache entier est effacé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par catégorie avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts correspondant aux catégories spécifiées seront considérés pour la suppression. Accepte un tableau de noms de catégories et peut être combiné avec `-Tag` pour un filtrage plus précis.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Demande une confirmation avant d'exécuter le cmdlet. Par défaut, ceci est activé pour éviter la suppression accidentelle de fichiers cache. Utilisez `-Confirm:$false` pour contourner l'invite de confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Prévisualise les actions de suppression sans supprimer aucun fichier. Le cmdlet affichera les fichiers cache qui seraient supprimés mais ne modifiera pas le système de fichiers. Ceci est utile pour vérifier vos critères de sélection avant de procéder à la suppression.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Noms ou modèles de caractères génériques identifiant les fichiers cache à supprimer. Accepte l'entrée pipeline et la liaison de propriété à partir d'objets avec une propriété `Name`. Les caractères génériques (`*`, `?`) sont pris en charge pour la correspondance de modèles. Mutuellement exclusif avec `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Répertoire cache alternatif à utiliser. Par défaut, le chemin cache standard du module si non spécifié. Utilisez ce paramètre lorsque vous travaillez avec des emplacements cache personnalisés définis via la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, ou lorsque vous gérez des fichiers cache dans des répertoires alternatifs pour les tests ou les environnements CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par étiquette de métadonnées avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts avec des étiquettes correspondantes seront considérés pour la suppression. Accepte un tableau de noms d'étiquettes et peut être combiné avec `-Category` pour un contrôle plus granulaire sur les fichiers cache ciblés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si le cmdlet s'exécute sans exécuter réellement l'opération. Le cmdlet affiche les actions qu'il effectuerait mais ne modifie pas le système de fichiers. Ceci est un paramètre commun PowerShell standard qui fonctionne de manière similaire à `-DryRun` mais suit les conventions intégrées de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Supprime tous les fichiers cache dans le répertoire cible. Ce paramètre est mutuellement exclusif avec `-Name`, `-Category` et `-Tag`. Lorsqu'il est spécifié, tous les paramètres de filtrage sont ignorés et le cache entier est effacé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par catégorie avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts correspondant aux catégories spécifiées seront considérés pour la suppression. Accepte un tableau de noms de catégories et peut être combiné avec `-Tag` pour un filtrage plus précis.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Demande une confirmation avant d'exécuter le cmdlet. Par défaut, ceci est activé pour éviter la suppression accidentelle de fichiers cache. Utilisez `-Confirm:$false` pour contourner l'invite de confirmation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Prévisualise les actions de suppression sans supprimer aucun fichier. Le cmdlet affichera les fichiers cache qui seraient supprimés mais ne modifiera pas le système de fichiers. Ceci est utile pour vérifier vos critères de sélection avant de procéder à la suppression.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Noms ou modèles de caractères génériques identifiant les fichiers cache à supprimer. Accepte l'entrée pipeline et la liaison de propriété à partir d'objets avec une propriété `Name`. Les caractères génériques (`*`, `?`) sont pris en charge pour la correspondance de modèles. Mutuellement exclusif avec `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Répertoire cache alternatif à utiliser. Par défaut, le chemin cache standard du module si non spécifié. Utilisez ce paramètre lorsque vous travaillez avec des emplacements cache personnalisés définis via la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, ou lorsque vous gérez des fichiers cache dans des répertoires alternatifs pour les tests ou les environnements CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre les scripts cibles par étiquette de métadonnées avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts avec des étiquettes correspondantes seront considérés pour la suppression. Accepte un tableau de noms d'étiquettes et peut être combiné avec `-Category` pour un contrôle plus granulaire sur les fichiers cache ciblés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si le cmdlet s'exécute sans exécuter réellement l'opération. Le cmdlet affiche les actions qu'il effectuerait mais ne modifie pas le système de fichiers. Ceci est un paramètre commun PowerShell standard qui fonctionne de manière similaire à `-DryRun` mais suit les conventions intégrées de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Supprime tous les fichiers cache dans le répertoire cible. Ce paramètre est mutuellement exclusif avec `-Name`, `-Category` et `-Tag`. Lorsqu'il est spécifié, tous les paramètres de filtrage sont ignorés et le cache entier est effacé.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filtre les scripts cibles par catégorie avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts correspondant aux catégories spécifiées seront considérés pour la suppression. Accepte un tableau de noms de catégories et peut être combiné avec `-Tag` pour un filtrage plus précis.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Demande une confirmation avant d'exécuter le cmdlet. Par défaut, ceci est activé pour éviter la suppression accidentelle de fichiers cache. Utilisez `-Confirm:$false` pour contourner l'invite de confirmation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Prévisualise les actions de suppression sans supprimer aucun fichier. Le cmdlet affichera les fichiers cache qui seraient supprimés mais ne modifiera pas le système de fichiers. Ceci est utile pour vérifier vos critères de sélection avant de procéder à la suppression.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Noms ou modèles de caractères génériques identifiant les fichiers cache à supprimer. Accepte l'entrée pipeline et la liaison de propriété à partir d'objets avec une propriété `Name`. Les caractères génériques (`*`, `?`) sont pris en charge pour la correspondance de modèles. Mutuellement exclusif avec `-All`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Répertoire cache alternatif à utiliser. Par défaut, le chemin cache standard du module si non spécifié. Utilisez ce paramètre lorsque vous travaillez avec des emplacements cache personnalisés définis via la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, ou lorsque vous gérez des fichiers cache dans des répertoires alternatifs pour les tests ou les environnements CI/CD.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filtre les scripts cibles par étiquette de métadonnées avant d'évaluer les entrées cache. Seuls les fichiers cache pour les scripts avec des étiquettes correspondantes seront considérés pour la suppression. Accepte un tableau de noms d'étiquettes et peut être combiné avec `-Category` pour un contrôle plus granulaire sur les fichiers cache ciblés.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Montre ce qui se passerait si le cmdlet s'exécute sans exécuter réellement l'opération. Le cmdlet affiche les actions qu'il effectuerait mais ne modifie pas le système de fichiers. Ceci est un paramètre commun PowerShell standard qui fonctionne de manière similaire à `-DryRun` mais suit les conventions intégrées de PowerShell.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Vous pouvez diriger les noms de script vers ce cmdlet. Chaque nom sera évalué pour la suppression de fichier cache en fonction des paramètres spécifiés.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Vous pouvez diriger un tableau de noms de script vers ce cmdlet. Ceci est particulièrement utile lorsque vous combinez avec `Get-ColorScriptList` pour filtrer les scripts selon divers critères avant d'effacer leurs caches.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Vous pouvez diriger des objets avec une propriété `Name` vers ce cmdlet. Le cmdlet extraira la valeur de la propriété `Name` et l'utilisera pour identifier les fichiers cache à supprimer.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Retourne des enregistrements de statut pour chaque fichier cache traité. Chaque objet de sortie contient les propriétés suivantes :

- **Status** : Le résultat de l'opération (`Removed`, `Missing`, `DryRun` ou `Error`)
- **CacheFile** : Le chemin complet vers le fichier cache qui a été traité
- **Message** : Texte descriptif expliquant le résultat de l'opération
- **ScriptName** : Le nom du script associé au fichier cache</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author** : Nick
**Module** : ColorScripts-Enhanced

Les fichiers cache sont stockés avec une extension `.cache` dans le répertoire cache du module. Chaque fichier cache correspond à un seul colorscript et contient la sortie ANSI pré-rendue.

Les fichiers cache sont automatiquement régénérés la prochaine fois que `Show-ColorScript` exécute le script correspondant. Cette régénération se produit de manière transparente et ne nécessite pas d'intervention manuelle.

Le chemin cache par défaut est exposé via la variable `$CacheDir` du module et peut être remplacé en utilisant la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`.

Lorsque vous utilisez `-DryRun` ou `-WhatIf`, le cmdlet validera toujours que le répertoire cache existe et signalera tout problème, mais n'effectuera aucune suppression.

Le filtrage par `-Category` ou `-Tag` nécessite que les scripts aient des métadonnées associées. Les scripts sans métadonnées ne correspondront pas à ces filtres.

### Best Practices

- Utilisez toujours `-DryRun` ou `-WhatIf` avant les opérations destructives
- Utilisez `-Confirm:$false` uniquement lorsque vous êtes certain de l'opération
- Archivez le cache avant les opérations de nettoyage majeures pour la récupération
- Surveillez régulièrement l'espace disque pour la croissance du cache
- Utilisez le nettoyage sélectif plutôt que l'effacement complet lorsque possible
- Gardez une trace des scripts critiques qui ne devraient pas être effacés
- Planifiez des nettoyages automatisés pendant les fenêtres de maintenance
- Testez les opérations de nettoyage en non-production d'abord

### Troubleshooting

- **"Aucun fichier cache trouvé"** : Utilisez `-AsObject` pour vérifier quels scripts ont des caches
- **"Permission refusée"** : Vérifiez l'accès en écriture au répertoire cache
- **"Cache ne se régénère pas"** : Les scripts peuvent avoir des problèmes de rendu ; testez avec `-NoCache`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -All -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Supprime tous les fichiers cache dans le répertoire cache par défaut sans demander de confirmation. Ceci est utile pour actualiser complètement le cache après les mises à jour du module ou lors du dépannage des problèmes d'affichage.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'aurora-*' -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Prévisualise les fichiers cache thématiques aurora qui seraient supprimés sans les supprimer réellement. La sortie montre les fichiers cache qui correspondent au modèle, vous permettant de vérifier la sélection avant de procéder à la suppression.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name bars -Path $env:TEMP -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Efface le fichier cache pour le script 'bars' d'un répertoire cache personnalisé situé dans le dossier TEMP. Ceci est utile lorsque vous travaillez avec la variable d'environnement `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` ou que vous testez des emplacements cache alternatifs.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Category Animation -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Montre ce qui se passerait si tous les fichiers cache pour les scripts de la catégorie Animation étaient supprimés. Le paramètre `-WhatIf` empêche la suppression réelle et affiche les actions prévues.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Tag retro | Clear-ColorScriptCache -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Utilise l'entrée pipeline pour prévisualiser la suppression des fichiers cache pour tous les scripts étiquetés comme 'retro'. Combine le filtrage par étiquette avec une prévisualisation dry-run avant de procéder à la suppression.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'test-*', 'demo-*' -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Supprime les fichiers cache pour tous les scripts dont les noms commencent par 'test-' ou 'demo-' sans confirmation. Plusieurs modèles de caractères génériques peuvent être spécifiés sous forme de tableau.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Nettoyer le cache et le reconstruire pour l'optimisation
Clear-ColorScriptCache -All -Confirm:$false
New-ColorScriptCache -PassThru | Measure-Object
Write-Host "Cache reconstruit avec succès"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Effectue un rafraîchissement complet du cache en effaçant tout et en reconstruisant, puis affiche les statistiques.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Effacer les anciennes entrées de cache datant de plus de 30 jours
$cacheDir = "$env:APPDATA\ColorScripts-Enhanced\cache"
$thirtyDaysAgo = (Get-Date).AddDays(-30)
Get-ChildItem $cacheDir -Filter "*.cache" |
    Where-Object { $_.LastWriteTime -lt $thirtyDaysAgo } |
    ForEach-Object {
        Clear-ColorScriptCache -Name $_.BaseName -Confirm:$false
    }
Write-Host "Anciens fichiers cache nettoyés"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Supprime les fichiers cache qui n'ont pas été mis à jour depuis plus de 30 jours.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Rapport de gestion du cache
$cacheDir = "$env:APPDATA\ColorScripts-Enhanced\cache"
$beforeCount = @(Get-ChildItem $cacheDir -Filter "*.cache" -ErrorAction SilentlyContinue).Count
Clear-ColorScriptCache -Category Geometric -Confirm:$false
$afterCount = @(Get-ChildItem $cacheDir -Filter "*.cache" -ErrorAction SilentlyContinue).Count
Write-Host "Effacé $($beforeCount - $afterCount) fichiers cache géométriques"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche les statistiques sur les opérations de nettoyage du cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Dépannage - effacer et reconstruire un script spécifique
$scriptName = "mandelbrot-zoom"
Clear-ColorScriptCache -Name $scriptName -Confirm:$false
New-ColorScriptCache -Name $scriptName -Force
Show-ColorScript -Name $scriptName
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Efface et reconstruit le cache pour un script unique, puis l'affiche pour vérification.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Filtrer par plusieurs catégories
Clear-ColorScriptCache -Category Geometric,Abstract -DryRun |
    Select-Object CacheFile |
    Measure-Object
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Montre combien de fichiers cache seraient supprimés si on filtre par plusieurs catégories.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Export-ColorScriptMetadata</command:name>
      <maml:description>
        <maml:para>Exporte des métadonnées complètes pour tous les scripts de couleurs au format JSON ou émet des objets structurés vers le pipeline.</maml:para>
      </maml:description>
      <command:verb>Export</command:verb>
      <command:noun>ColorScriptMetadata</command:noun>
    </command:details>
    <maml:description>
      <maml:para>La cmdlet `Export-ColorScriptMetadata` compile un inventaire complet de tous les scripts de couleurs dans le catalogue du module et génère un ensemble de données structuré décrivant chaque entrée. Ces métadonnées incluent des informations essentielles telles que les noms des scripts, les catégories, les balises et des enrichissements optionnels.</maml:para>
      <maml:para>Par défaut, la cmdlet retourne des objets PowerShell vers le pipeline. Lorsque le paramètre `-Path` est fourni, elle écrit les métadonnées au format JSON formaté dans le fichier spécifié, créant automatiquement les répertoires parents s'ils n'existent pas.</maml:para>
      <maml:para>La cmdlet offre deux indicateurs d'enrichissement optionnels : - **IncludeFileInfo** : Ajoute des métadonnées du système de fichiers incluant les chemins complets, les tailles de fichiers (en octets) et les horodatages de dernière modification - **IncludeCacheInfo** : Ajoute des informations liées au cache incluant les chemins des fichiers de cache, le statut d'existence et les horodatages du cache</maml:para>
      <maml:para>Cette cmdlet est particulièrement utile pour : - Créer de la documentation ou des tableaux de bord montrant tous les scripts de couleurs disponibles - Analyser la couverture du cache et identifier les scripts nécessitant une reconstruction du cache - Alimenter des outils externes ou des pipelines d'automatisation avec des métadonnées - Auditer l'inventaire des scripts de couleurs et le statut du système de fichiers - Générer des rapports sur l'utilisation et l'organisation des scripts de couleurs</maml:para>
      <maml:para>La sortie est ordonnée de manière cohérente, la rendant adaptée au contrôle de version et aux opérations de diff lors de l'exportation vers JSON.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Augmente chaque enregistrement avec des métadonnées de cache, incluant le chemin du fichier de cache, si un fichier de cache existe, et son horodatage de dernière modification. Ceci est utile pour identifier les scripts qui peuvent nécessiter une régénération du cache ou analyser la couverture du cache dans la bibliothèque de scripts de couleurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Inclut des détails du système de fichiers (chemin complet, taille en octets et heure de dernière écriture) dans chaque enregistrement. Lorsque les métadonnées de fichier ne peuvent pas être lues (en raison de permissions ou de fichiers manquants), les erreurs sont enregistrées via la sortie verbose et les propriétés affectées sont définies sur des valeurs nulles. Cet interrupteur est précieux pour auditer les tailles de fichiers et les dates de modification.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne les objets de métadonnées vers le pipeline même lorsque le paramètre `-Path` est spécifié. Ceci permet de sauvegarder les métadonnées dans un fichier et d'effectuer un traitement ou un filtrage supplémentaire sur les objets dans une seule commande. Sans cet interrupteur, spécifier `-Path` supprime la sortie du pipeline.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Spécifie le chemin du fichier de destination pour l'exportation JSON. Prend en charge les chemins relatifs, absolus, les variables d'environnement (par exemple, `$env:TEMP\metadata.json`) et l'expansion tilde (par exemple, `~/Documents/metadata.json`). Les répertoires parents sont automatiquement créés s'ils n'existent pas. Lorsque ce paramètre est omis, la cmdlet sort les objets directement vers le pipeline au lieu d'écrire dans un fichier. La sortie JSON est formatée avec une indentation pour la lisibilité.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Augmente chaque enregistrement avec des métadonnées de cache, incluant le chemin du fichier de cache, si un fichier de cache existe, et son horodatage de dernière modification. Ceci est utile pour identifier les scripts qui peuvent nécessiter une régénération du cache ou analyser la couverture du cache dans la bibliothèque de scripts de couleurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Inclut des détails du système de fichiers (chemin complet, taille en octets et heure de dernière écriture) dans chaque enregistrement. Lorsque les métadonnées de fichier ne peuvent pas être lues (en raison de permissions ou de fichiers manquants), les erreurs sont enregistrées via la sortie verbose et les propriétés affectées sont définies sur des valeurs nulles. Cet interrupteur est précieux pour auditer les tailles de fichiers et les dates de modification.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne les objets de métadonnées vers le pipeline même lorsque le paramètre `-Path` est spécifié. Ceci permet de sauvegarder les métadonnées dans un fichier et d'effectuer un traitement ou un filtrage supplémentaire sur les objets dans une seule commande. Sans cet interrupteur, spécifier `-Path` supprime la sortie du pipeline.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Spécifie le chemin du fichier de destination pour l'exportation JSON. Prend en charge les chemins relatifs, absolus, les variables d'environnement (par exemple, `$env:TEMP\metadata.json`) et l'expansion tilde (par exemple, `~/Documents/metadata.json`). Les répertoires parents sont automatiquement créés s'ils n'existent pas. Lorsque ce paramètre est omis, la cmdlet sort les objets directement vers le pipeline au lieu d'écrire dans un fichier. La sortie JSON est formatée avec une indentation pour la lisibilité.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeCacheInfo</maml:name>
        <maml:description>
          <maml:para>Augmente chaque enregistrement avec des métadonnées de cache, incluant le chemin du fichier de cache, si un fichier de cache existe, et son horodatage de dernière modification. Ceci est utile pour identifier les scripts qui peuvent nécessiter une régénération du cache ou analyser la couverture du cache dans la bibliothèque de scripts de couleurs.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeFileInfo</maml:name>
        <maml:description>
          <maml:para>Inclut des détails du système de fichiers (chemin complet, taille en octets et heure de dernière écriture) dans chaque enregistrement. Lorsque les métadonnées de fichier ne peuvent pas être lues (en raison de permissions ou de fichiers manquants), les erreurs sont enregistrées via la sortie verbose et les propriétés affectées sont définies sur des valeurs nulles. Cet interrupteur est précieux pour auditer les tailles de fichiers et les dates de modification.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Retourne les objets de métadonnées vers le pipeline même lorsque le paramètre `-Path` est spécifié. Ceci permet de sauvegarder les métadonnées dans un fichier et d'effectuer un traitement ou un filtrage supplémentaire sur les objets dans une seule commande. Sans cet interrupteur, spécifier `-Path` supprime la sortie du pipeline.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Spécifie le chemin du fichier de destination pour l'exportation JSON. Prend en charge les chemins relatifs, absolus, les variables d'environnement (par exemple, `$env:TEMP\metadata.json`) et l'expansion tilde (par exemple, `~/Documents/metadata.json`). Les répertoires parents sont automatiquement créés s'ils n'existent pas. Lorsque ce paramètre est omis, la cmdlet sort les objets directement vers le pipeline au lieu d'écrire dans un fichier. La sortie JSON est formatée avec une indentation pour la lisibilité.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette cmdlet n'accepte pas d'entrée pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Lorsque `-Path` n'est pas spécifié, ou lorsque `-PassThru` est utilisé, la cmdlet retourne des objets personnalisés. Chaque objet représente un seul script de couleurs avec les propriétés de base suivantes :

- **Name** : Le nom du fichier du script de couleurs sans extension
- **Category** : La catégorie organisationnelle (par exemple, "nature", "abstract", "geometric")
- **Tags** : Un tableau de balises descriptives pour le filtrage et la recherche

Lorsque `-IncludeFileInfo` est spécifié, ces propriétés supplémentaires sont incluses :

- **FilePath** : Le chemin complet du système de fichiers vers le fichier de script
- **FileSize** : Taille en octets (null si le fichier est inaccessible)
- **LastWriteTime** : Horodatage de la dernière modification (null si indisponible)

Lorsque `-IncludeCacheInfo` est spécifié, ces propriétés supplémentaires sont incluses :

- **CachePath** : Le chemin complet vers le fichier de cache correspondant
- **CacheExists** : Booléen indiquant si un fichier de cache existe
- **CacheLastWriteTime** : Horodatage de la modification du fichier de cache (null si le cache n'existe pas)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Considérations de performance :**
- L'ajout de `-IncludeFileInfo` ou `-IncludeCacheInfo` nécessite des opérations d'E/S du système de fichiers et peut impacter les performances lors du traitement de grandes bibliothèques de scripts de couleurs.
- Pour de grandes exportations, considérez utiliser `-PassThru` avec un filtrage pipeline plutôt que de charger tout en mémoire
- Les opérations d'exportation évoluent linéairement avec le nombre de scripts

**Gestion du répertoire de cache :**
- La collecte de métadonnées de cache garantit que le répertoire de cache existe avant d'essayer de lire les fichiers de cache.
- Lorsque les fichiers de cache sont manquants ou indisponibles, la propriété `CacheExists` est définie sur `false` et `CacheLastWriteTime` sur null.

**Gestion d'erreurs :**
- Les erreurs de lecture de métadonnées de fichier sont rapportées via la sortie verbose (`-Verbose`) plutôt que de terminer la cmdlet.
- Les erreurs de fichiers individuels résultent en des valeurs nulles pour les propriétés affectées tout en permettant à la cmdlet de continuer le traitement des scripts de couleurs restants.

**Format de sortie JSON :**
- Les fichiers JSON sont écrits avec une indentation (profondeur 2) pour la lisibilité humaine.
- L'encodage de sortie est UTF-8 pour une compatibilité maximale.
- Les fichiers existants au chemin cible sont écrasés sans invite.

**Meilleures pratiques :**
- Planifier des exportations régulières de métadonnées pour l'audit
- Versionner vos exportations de métadonnées avec des horodatages
- Utiliser `-PassThru` pour l'exportation de fichier et le traitement pipeline
- Stocker les sauvegardes dans des systèmes de contrôle de version ou de sauvegarde
- Surveiller la croissance de la taille des fichiers d'exportation au fil du temps

**Cas d'utilisation :**
- Intégration avec des pipelines CI/CD pour la génération de documentation
- Construction de tableaux de bord web ou de points de terminaison API servant des métadonnées de scripts de couleurs
- Création de rapports d'inventaire pour de grandes collections de scripts de couleurs
- Identification des scripts nécessitant une régénération de cache
- Suivi des changements et maintenance des journaux d'audit</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Exporte des métadonnées de base pour tous les scripts de couleurs vers le pipeline sans informations sur les fichiers ou le cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Retourne des objets incluant des détails du système de fichiers (chemin complet, taille et heure de dernière écriture) pour chaque script de couleurs.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère un fichier JSON contenant des métadonnées de base et l'écrit dans le répertoire `dist`, créant le dossier s'il n'existe pas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -IncludeFileInfo -IncludeCacheInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère un fichier JSON complet avec des métadonnées enrichies incluant à la fois les informations du système de fichiers et du cache, l'écrivant dans le répertoire `dist`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -PassThru | Where-Object { -not $_.CacheExists }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Écrit le fichier de métadonnées et retourne également les objets vers le pipeline, permettant des requêtes qui identifient les scripts sans fichiers de cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo | Group-Object Category | Select-Object Name, Count
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Groupe les scripts de couleurs par catégorie et affiche les comptages, utile pour analyser la distribution des scripts dans les catégories.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$metadata = Export-ColorScriptMetadata -IncludeFileInfo
$totalSize = ($metadata | Measure-Object -Property FileSize -Sum).Sum
Write-Host "Taille totale de tous les scripts de couleurs : $($totalSize / 1KB) Ko"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Calcule l'espace disque total utilisé par tous les fichiers de scripts de couleurs.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Générer des statistiques et sauvegarder le rapport
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$stats = @{
    TotalScripts = $metadata.Count
    Categories = ($metadata | Select-Object -ExpandProperty Category -Unique).Count
    CachedScripts = ($metadata | Where-Object CacheExists).Count
    TotalFileSize = ($metadata | Measure-Object FileSize -Sum).Sum
    TotalCacheSize = ($metadata | Where-Object CacheExists |
        Measure-Object CacheFileSize -Sum).Sum
}
$stats | ConvertTo-Json | Out-File "./colorscripts-stats.json"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère un rapport de statistiques complet incluant la couverture du cache et les tailles.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Exporter et comparer avec une sauvegarde précédente
$current = Export-ColorScriptMetadata -Path "./current-metadata.json" -IncludeFileInfo -PassThru
$previous = Get-Content "./previous-metadata.json" | ConvertFrom-Json
$new = $current | Where-Object { $_.Name -notin $previous.Name }
$removed = $previous | Where-Object { $_.Name -notin $current.Name }
Write-Host "Nouveaux scripts : $($new.Count) | Scripts supprimés : $($removed.Count)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Compare les métadonnées actuelles avec une version précédente pour identifier les changements.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Construire une réponse API pour un tableau de bord web
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$apiResponse = @{
    version = (Get-Module ColorScripts-Enhanced | Select-Object Version).Version.ToString()
    timestamp = (Get-Date -Format 'o')
    count = $metadata.Count
    scripts = $metadata
} | ConvertTo-Json -Depth 5
$apiResponse | Out-File "./api/colorscripts.json" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère un JSON prêt pour l'API avec des informations de versionnement et d'horodatage.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Trouver des scripts avec cache manquant pour reconstruction par lot
$metadata = Export-ColorScriptMetadata -IncludeCacheInfo -AsObject
$uncached = $metadata | Where-Object { -not $_.CacheExists } | Select-Object -ExpandProperty Name
if ($uncached.Count -gt 0) {
    Write-Host "Reconstruction du cache pour $($uncached.Count) scripts..."
    New-ColorScriptCache -Name $uncached
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifie et reconstruit le cache pour les scripts qui n'ont pas de fichiers de cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Créer une galerie HTML à partir des métadonnées
$metadata = Export-ColorScriptMetadata -IncludeFileInfo
$html = @"
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Galerie ColorScripts-Enhanced&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;ColorScripts-Enhanced&lt;/h1&gt;
&lt;ul&gt;
"@
foreach ($script in $metadata) {
    $html += "&lt;li&gt;&lt;strong&gt;$($script.Name)&lt;/strong&gt; [$($script.Category)]&lt;/li&gt;`n"
}
$html += "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;"
$html | Out-File "./gallery.html" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée une page de galerie HTML listant tous les scripts de couleurs disponibles.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Surveiller les tailles des scripts au fil du temps
Export-ColorScriptMetadata -Path "./logs/metadata-$(Get-Date -Format 'yyyyMMdd').json" -IncludeFileInfo
Get-ChildItem "./logs/metadata-*.json" | Select-Object -Last 5 |
    ForEach-Object { Get-Content $_ | ConvertFrom-Json } |
    Group-Object { $_.Name } |
    ForEach-Object { Write-Host "$($_.Name): $(($_.Group | Measure-Object FileSize -Average).Average) octets en moyenne" }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Suit les changements de taille de fichier pour des scripts individuels sur plusieurs exportations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Récupère les paramètres de configuration actuels du module ColorScripts-Enhanced.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Get-ColorScriptConfiguration` récupère la configuration effective du module, qui contrôle divers aspects du comportement de ColorScripts-Enhanced. Cela inclut :</maml:para>
      <maml:para>- **Paramètres de cache** : Emplacement où les métadonnées et les index des scripts sont stockés pour l'optimisation des performances - **Comportement de démarrage** : Indicateurs qui contrôlent si les scripts s'exécutent automatiquement au démarrage des sessions PowerShell - **Configuration des chemins** : Répertoires de scripts personnalisés et chemins de recherche - **Préférences d'affichage** : Options de formatage et de sortie par défaut</maml:para>
      <maml:para>La configuration est assemblée à partir de plusieurs sources par ordre de priorité : 1. Valeurs par défaut intégrées du module (priorité la plus basse) 2. Substitutions utilisateur persistées depuis le fichier de configuration 3. Modifications spécifiques à la session (priorité la plus haute)</maml:para>
      <maml:para>Le fichier de configuration est généralement situé à `%APPDATA%\ColorScripts-Enhanced\config.json` sur Windows ou `~/.config/ColorScripts-Enhanced/config.json` sur les systèmes de type Unix.</maml:para>
      <maml:para>La hashtable retournée est un instantané de l'état actuel de la configuration et peut être inspectée, clonée ou sérialisée en toute sécurité sans affecter la configuration active.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptConfiguration</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette cmdlet n'accepte pas d'entrée pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Retourne une hashtable imbriquée contenant la structure suivante :

- **Cache** (Hashtable) : Paramètres liés au cache
  - **Location** (String) : Chemin vers le répertoire de cache
  - **Enabled** (Boolean) : Si le cache est actif
- **Startup** (Hashtable) : Paramètres de comportement de démarrage
  - **Enabled** (Boolean) : Si les scripts s'exécutent au démarrage de la session
  - **ScriptName** (String) : Nom du script de démarrage par défaut
- **Paths** (Array) : Chemins de recherche de scripts supplémentaires
- **Display** (Hashtable) : Préférences de formatage de sortie</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Initialisation du module** : La configuration est initialisée automatiquement lorsque le module ColorScripts-Enhanced se charge. Cette cmdlet récupère l'état de configuration en mémoire actuel.

**Aucune modification** : L'appel de cette cmdlet est en lecture seule et ne modifie aucun paramètre persistant ou la configuration active.

**Sécurité des threads** : La hashtable retournée est une copie de la configuration, la rendant sûre pour l'accès concurrent et la modification sans affecter l'état interne du module.

**Performance** : La récupération de configuration est légère et adaptée aux appels fréquents, car elle retourne la configuration en mémoire mise en cache plutôt que de lire sur le disque.

**Format du fichier de configuration** : La configuration persistée utilise le format JSON avec encodage UTF-8. L'édition manuelle est prise en charge mais non recommandée ; utilisez `Set-ColorScriptConfiguration` à la place.

### Meilleures pratiques

- Interroger la configuration une fois et réutiliser le résultat
- Valider la configuration avant d'utiliser les valeurs
- Surveiller la configuration pour la dérive au fil du temps
- Garder les sauvegardes de configuration dans le contrôle de version
- Documenter toute personnalisation apportée à la configuration
- Tester les changements de configuration en non-production d'abord
- Utiliser les journaux d'audit de configuration pour la conformité</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche la configuration actuelle en utilisant la vue tableau par défaut, montrant tous les paramètres de cache et de démarrage.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | ConvertTo-Json -Depth 4
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Sérialise la configuration au format JSON pour la journalisation, le débogage ou l'exportation vers d'autres outils.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
$config.Cache.Location
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Récupère la configuration et accède directement au chemin d'emplacement du cache depuis la hashtable.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
if ($config.Startup.Enabled) {
    Write-Host "Startup scripts are enabled"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Vérifie si les scripts de démarrage sont activés dans la configuration actuelle.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | Format-List *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche toutes les propriétés de configuration dans un format de liste détaillé pour une inspection complète.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
Write-Host "Cache Path: $($config.Cache.Path)"
Write-Host "Profile Auto-Show: $($config.Startup.ProfileAutoShow)"
Write-Host "Default Script: $($config.Startup.DefaultScript)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Extrait et affiche des propriétés de configuration spécifiques pour l'audit ou les scripts.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
if ($config.Cache.Path) {
    Write-Host "Custom cache path configured: $($config.Cache.Path)"
} else {
    Write-Host "Using default cache path"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Détermine si un chemin de cache personnalisé est configuré par rapport aux valeurs par défaut du module.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata | ConvertTo-Json -Depth 5 |
    Out-File -FilePath "./backup-config.json" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Sauvegarde la configuration actuelle dans un fichier JSON pour l'archivage ou la récupération après sinistre.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Compare current config with defaults
$current = Get-ColorScriptConfiguration
Reset-ColorScriptConfiguration -WhatIf
# Review the -WhatIf output to see what would change
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Compare la configuration actuelle avec les valeurs par défaut du module pour identifier les paramètres personnalisés.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Monitor configuration changes across sessions
Get-ColorScriptConfiguration |
    Select-Object Cache, Startup |
    Format-List |
    Out-File "./config-snapshot.txt" -Append
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée des instantanés horodatés de la configuration pour suivre les changements au fil du temps.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptList</command:name>
      <maml:description>
        <maml:para>Liste les scripts de couleurs disponibles avec filtrage optionnel et sortie de métadonnées riches.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptList</command:noun>
    </command:details>
    <maml:description>
      <maml:para>L'applet de commande `Get-ColorScriptList` récupère et affiche tous les scripts de couleurs inclus dans le module ColorScripts-Enhanced. Elle offre des options de filtrage flexibles et plusieurs formats de sortie pour s'adapter à différents cas d'usage.</maml:para>
      <maml:para>Par défaut, l'applet de commande affiche un tableau formaté concis montrant les noms des scripts et leurs catégories. Le commutateur `-Detailed` étend cette vue pour inclure les balises et les descriptions, fournissant plus de contexte d'un coup d'œil.</maml:para>
      <maml:para>Pour les scénarios d'automatisation et programmatiques, le paramètre `-AsObject` retourne les enregistrements de métadonnées brutes en tant qu'objets PowerShell, permettant un traitement supplémentaire via le pipeline. Ces enregistrements incluent des informations complètes telles que le nom, la catégorie, les catégories, les balises, la description et la propriété de métadonnées originale.</maml:para>
      <maml:para>Les capacités de filtrage vous permettent de réduire la liste par : - **Name** : Prend en charge les modèles de caractères génériques (par exemple, `aurora-*`) pour une correspondance flexible - **Category** : Filtre par un ou plusieurs noms de catégories (insensible à la casse) - **Tag** : Filtre par balises de métadonnées telles que "Recommended" ou "Animated" (insensible à la casse)</maml:para>
      <maml:para>L'applet de commande valide les modèles de filtre et génère des avertissements pour tout modèle de nom non apparié, vous aidant à identifier les erreurs potentielles ou les scripts manquants.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Retourne des objets d'enregistrement de métadonnées brutes au lieu de rendre un tableau formaté à l'hôte. Cela permet le traitement du pipeline et la manipulation programmatique des métadonnées des scripts de couleurs.</maml:para>
            <maml:para>Lorsque ce commutateur est spécifié, vous pouvez utiliser des applets de commande PowerShell standard comme `Where-Object`, `Select-Object`, `Sort-Object` et `ForEach-Object` pour traiter davantage les résultats.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la liste pour inclure uniquement les scripts appartenant à une ou plusieurs catégories spécifiées. La correspondance de catégories est insensible à la casse.</maml:para>
            <maml:para>Les catégories communes incluent : Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, et plus. Vous pouvez spécifier plusieurs catégories pour élargir votre recherche.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Inclut des colonnes supplémentaires (balises et description) lors du rendu de la vue de tableau formaté. Cela fournit des informations plus complètes sur chaque script d'un coup d'œil.</maml:para>
            <maml:para>Sans ce commutateur, seuls le nom et la catégorie primaire sont affichés dans la sortie du tableau.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filtre la liste des scripts de couleurs par un ou plusieurs noms de scripts. Prend en charge les caractères génériques (`*` et `?`) pour une correspondance de modèles flexible.</maml:para>
            <maml:para>Si un modèle spécifié ne correspond à aucun script, un avertissement est généré pour vous aider à identifier les problèmes potentiels. La correspondance de noms est insensible à la casse.</maml:para>
            <maml:para>Vous pouvez spécifier des noms exacts ou utiliser des modèles comme `aurora-*` pour correspondre à plusieurs scripts liés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la liste pour inclure uniquement les scripts contenant une ou plusieurs balises de métadonnées spécifiées. La correspondance de balises est insensible à la casse.</maml:para>
            <maml:para>Les balises communes incluent : Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, et plus. Les balises aident à catégoriser les scripts par style visuel, complexité ou cas d'usage.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Retourne des objets d'enregistrement de métadonnées brutes au lieu de rendre un tableau formaté à l'hôte. Cela permet le traitement du pipeline et la manipulation programmatique des métadonnées des scripts de couleurs.</maml:para>
            <maml:para>Lorsque ce commutateur est spécifié, vous pouvez utiliser des applets de commande PowerShell standard comme `Where-Object`, `Select-Object`, `Sort-Object` et `ForEach-Object` pour traiter davantage les résultats.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la liste pour inclure uniquement les scripts appartenant à une ou plusieurs catégories spécifiées. La correspondance de catégories est insensible à la casse.</maml:para>
            <maml:para>Les catégories communes incluent : Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, et plus. Vous pouvez spécifier plusieurs catégories pour élargir votre recherche.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Inclut des colonnes supplémentaires (balises et description) lors du rendu de la vue de tableau formaté. Cela fournit des informations plus complètes sur chaque script d'un coup d'œil.</maml:para>
            <maml:para>Sans ce commutateur, seuls le nom et la catégorie primaire sont affichés dans la sortie du tableau.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filtre la liste des scripts de couleurs par un ou plusieurs noms de scripts. Prend en charge les caractères génériques (`*` et `?`) pour une correspondance de modèles flexible.</maml:para>
            <maml:para>Si un modèle spécifié ne correspond à aucun script, un avertissement est généré pour vous aider à identifier les problèmes potentiels. La correspondance de noms est insensible à la casse.</maml:para>
            <maml:para>Vous pouvez spécifier des noms exacts ou utiliser des modèles comme `aurora-*` pour correspondre à plusieurs scripts liés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la liste pour inclure uniquement les scripts contenant une ou plusieurs balises de métadonnées spécifiées. La correspondance de balises est insensible à la casse.</maml:para>
            <maml:para>Les balises communes incluent : Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, et plus. Les balises aident à catégoriser les scripts par style visuel, complexité ou cas d'usage.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsObject</maml:name>
        <maml:description>
          <maml:para>Retourne des objets d'enregistrement de métadonnées brutes au lieu de rendre un tableau formaté à l'hôte. Cela permet le traitement du pipeline et la manipulation programmatique des métadonnées des scripts de couleurs.</maml:para>
          <maml:para>Lorsque ce commutateur est spécifié, vous pouvez utiliser des applets de commande PowerShell standard comme `Where-Object`, `Select-Object`, `Sort-Object` et `ForEach-Object` pour traiter davantage les résultats.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filtre la liste pour inclure uniquement les scripts appartenant à une ou plusieurs catégories spécifiées. La correspondance de catégories est insensible à la casse.</maml:para>
          <maml:para>Les catégories communes incluent : Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, et plus. Vous pouvez spécifier plusieurs catégories pour élargir votre recherche.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Detailed</maml:name>
        <maml:description>
          <maml:para>Inclut des colonnes supplémentaires (balises et description) lors du rendu de la vue de tableau formaté. Cela fournit des informations plus complètes sur chaque script d'un coup d'œil.</maml:para>
          <maml:para>Sans ce commutateur, seuls le nom et la catégorie primaire sont affichés dans la sortie du tableau.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Filtre la liste des scripts de couleurs par un ou plusieurs noms de scripts. Prend en charge les caractères génériques (`*` et `?`) pour une correspondance de modèles flexible.</maml:para>
          <maml:para>Si un modèle spécifié ne correspond à aucun script, un avertissement est généré pour vous aider à identifier les problèmes potentiels. La correspondance de noms est insensible à la casse.</maml:para>
          <maml:para>Vous pouvez spécifier des noms exacts ou utiliser des modèles comme `aurora-*` pour correspondre à plusieurs scripts liés.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filtre la liste pour inclure uniquement les scripts contenant une ou plusieurs balises de métadonnées spécifiées. La correspondance de balises est insensible à la casse.</maml:para>
          <maml:para>Les balises communes incluent : Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, et plus. Les balises aident à catégoriser les scripts par style visuel, complexité ou cas d'usage.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette applet de commande n'accepte pas d'entrée de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Lorsque `-AsObject` est spécifié, retourne des objets d'enregistrement de métadonnées de scripts de couleurs avec les propriétés suivantes :
- **Name** : L'identifiant du script utilisé avec `Show-ColorScript`
- **Category** : La catégorie primaire du script
- **Categories** : Un tableau de toutes les catégories auxquelles le script appartient
- **Tags** : Un tableau de balises de métadonnées décrivant le script
- **Description** : Une description lisible par l'homme de la sortie visuelle du script
- **Metadata** : L'objet de métadonnées original contenant toutes les informations de script brutes

Sans `-AsObject`, l'applet de commande écrit un tableau formaté à l'hôte tout en retournant les objets d'enregistrement pour un traitement de pipeline potentiel.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author** : Nick
**Module** : ColorScripts-Enhanced
**Version** : 1.0

Les enregistrements de métadonnées retournés fournissent des informations complètes pour l'affichage et l'automatisation. La propriété `Name` peut être utilisée directement avec l'applet de commande `Show-ColorScript` pour exécuter des scripts spécifiques.

Toutes les opérations de filtrage (Name, Category, Tag) sont insensibles à la casse et peuvent être combinées pour créer des requêtes puissantes. Lorsque vous utilisez des caractères génériques dans le paramètre `-Name`, des modèles non appariés génèrent des avertissements pour aider au dépannage.

Pour de meilleurs résultats lors de l'intégration de scripts de couleurs dans votre profil PowerShell, utilisez le filtre `-Tag Recommended` pour identifier des scripts curatés adaptés à l'affichage au démarrage.

### Best Practices

- Utilisez toujours `-AsObject` lorsque vous devez filtrer ou manipuler les résultats de manière programmatique
- Utilisez `-Detailed` lors de l'exploration interactive pour voir les balises et les descriptions
- Combinez plusieurs filtres pour des requêtes précises
- Exportez les métadonnées périodiquement pour suivre les changements au fil du temps
- Utilisez les objets de résultats pour l'automatisation plutôt que d'analyser la sortie texte
- Considérez les performances lors de l'exécution répétée de requêtes (mettez en cache les résultats si possible)
- Tirez parti de Group-Object pour l'analyse et les rapports
- Utilisez Where-Object pour une logique de filtrage complexe</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche tous les scripts de couleurs disponibles dans un format de tableau compact montrant le nom et la catégorie de chaque script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche tous les scripts de couleurs avec des colonnes supplémentaires incluant les balises et les descriptions pour un aperçu complet.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed -Category Patterns
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche uniquement les scripts de la catégorie "Patterns" avec toutes les métadonnées incluant les balises et les descriptions.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Name 'aurora-*' | Select-Object Name, Tags
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Retourne des objets structurés pour chaque script dont le nom correspond au modèle de caractères génériques, puis sélectionne uniquement les propriétés Name et Tags pour l'affichage.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Tag Recommended | Sort-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Récupère tous les scripts étiquetés comme "Recommended" et les trie par ordre alphabétique par nom. Utile pour trouver des scripts curatés adaptés à l'intégration dans le profil.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Category Geometric,Abstract | Where-Object { $_.Tags -contains 'Colorful' }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Combine le filtrage par catégorie et par balise pour trouver des scripts qui sont à la fois dans les catégories Geometric ou Abstract et étiquetés comme Colorful.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Name blocks,pipes,matrix -AsObject | ForEach-Object { Show-ColorScript -Name $_.Name }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Récupère des scripts nommés spécifiques et les exécute chacun en séquence, démontrant l'intégration du pipeline avec `Show-ColorScript`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Count scripts by category for inventory purposes
Get-ColorScriptList -AsObject |
    Group-Object Category |
    Select-Object Name, Count |
    Sort-Object Count -Descending
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Fournit un résumé du nombre de scripts de couleurs existant dans chaque catégorie.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find scripts with specific keywords in description
$scripts = Get-ColorScriptList -AsObject
$scripts |
    Where-Object { $_.Description -match 'fractal|mandelbrot' } |
    Select-Object Name, Category, Description
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Recherche des scripts basés sur le contenu de leur description en utilisant la correspondance de modèles.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export to CSV for external tool processing
Get-ColorScriptList -AsObject -Detailed |
    Select-Object Name, Category, Tags, Description |
    Export-Csv -Path "./colorscripts-inventory.csv" -NoTypeInformation
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Exporte l'inventaire complet des scripts de couleurs au format CSV pour une utilisation dans des applications de tableur.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Check for scripts without specific category
$allScripts = Get-ColorScriptList -AsObject
$uncategorized = $allScripts | Where-Object { -not $_.Category }
Write-Host "Uncategorized scripts: $($uncategorized.Count)"
$uncategorized | Select-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifie les scripts qui sont manquants de métadonnées de catégorie.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build cache for filtered scripts
Get-ColorScriptList -Tag Recommended -AsObject |
    ForEach-Object {
        New-ColorScriptCache -Name $_.Name -PassThru
    } |
    Format-Table Name, Status
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Met en cache uniquement les scripts recommandés et affiche les résultats de l'opération de mise en cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create a formatted report of all geometric scripts
Get-ColorScriptList -Category Geometric -Detailed |
    Out-String |
    Tee-Object -FilePath "./geometric-report.txt"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère et sauvegarde un rapport détaillé des scripts de couleurs de la catégorie géométrique dans un fichier.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 14 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find the first script matching a pattern for quick display
$script = Get-ColorScriptList -Name "aurora-*" -AsObject | Select-Object -First 1
if ($script) {
    Show-ColorScript -Name $script.Name -PassThru
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche rapidement le premier script correspondant basé sur un modèle de caractères génériques.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 15 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verify all referenced scripts exist before running automation
$requiredScripts = @("bars", "arch", "mandelbrot-zoom")
$available = Get-ColorScriptList -AsObject | Select-Object -ExpandProperty Name
$missing = $requiredScripts | Where-Object { $_ -notin $available }
if ($missing) {
    Write-Warning "Missing scripts: $($missing -join ', ')"
} else {
    Write-Host "All required scripts are available"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Valide que tous les scripts requis existent avant l'exécution de l'automatisation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Module Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScript</command:name>
      <maml:description>
        <maml:para>Crée un nouveau fichier colorscript et émet éventuellement des conseils de métadonnées.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>La cmdlet `New-ColorScript` crée un squelette complet de colorscript qui sert de base pour développer des scripts d'art ANSI personnalisés. Le fichier généré comprend un modèle préformaté avec des exemples de séquences d'échappement ANSI, un encodage UTF-8 approprié sans marque d'ordre d'octet (BOM), et des conseils de métadonnées optionnels pour l'intégration avec le système de métadonnées du module.</maml:para>
      <maml:para>Par défaut, le script est écrit dans le répertoire `Scripts` du module, garantissant qu'il peut être automatiquement découvert par les fonctions d'énumération de scripts du module. Cependant, le paramètre `-OutputPath` permet de cibler n'importe quel répertoire personnalisé pour le développement ou les tests.</maml:para>
      <maml:para>Les noms de scripts doivent suivre les conventions de nommage PowerShell : ils doivent commencer par un caractère alphanumérique et peuvent inclure des traits de soulignement ou des traits d'union. L'extension `.ps1` est automatiquement ajoutée si elle n'est pas fournie. Les fichiers existants sont protégés contre les écrasements accidentels à moins que le commutateur `-Force` ne soit explicitement spécifié.</maml:para>
      <maml:para>Lorsqu'il est combiné avec le paramètre `-GenerateMetadataSnippet`, la cmdlet produit du code PowerShell prêt à l'emploi qui démontre comment enregistrer le nouveau script dans `ScriptMetadata.psd1`. Ces conseils incluent les valeurs de catégorie et de balise spécifiées via les paramètres respectifs, rationalisant le processus d'intégration des scripts personnalisés dans la structure organisationnelle du module.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Spécifie la catégorie principale pour le colorscript lors de la génération des conseils de métadonnées. Ce paramètre n'est significatif que lorsqu'il est utilisé avec `-GenerateMetadataSnippet`. Les catégories communes incluent 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' et 'Abstract'. La valeur doit s'aligner avec les catégories existantes dans `ScriptMetadata.psd1` pour la cohérence.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Écrase le fichier de destination s'il existe déjà. Sans ce commutateur, la cmdlet se terminera avec une erreur si un fichier du même nom est trouvé à l'emplacement cible. Utilisez avec prudence pour éviter la perte de données.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Inclut un extrait de conseils dans la sortie qui démontre comment enregistrer le nouveau script dans `ScriptMetadata.psd1`. L'extrait utilise les valeurs des paramètres `-Category` et `-Tag` si elles sont fournies. Ceci est particulièrement utile pour maintenir des métadonnées cohérentes sur tous les colorscripts du module.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Spécifie le nom du nouveau colorscript. Le nom doit commencer par un caractère alphanumérique et peut inclure des traits de soulignement ou des traits d'union. L'extension `.ps1` est ajoutée automatiquement si elle n'est pas incluse. Ce nom sera utilisé comme nom de fichier et devrait être descriptif du contenu ou du thème du script.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Spécifie le répertoire de destination pour le squelette. Lorsqu'il n'est pas spécifié, il utilise par défaut le répertoire `Scripts` du module. Le chemin prend en charge l'expansion du tilde (`~`) pour le répertoire personnel de l'utilisateur, les variables d'environnement (par exemple, `$env:USERPROFILE`), et les chemins relatifs et absolus. Le répertoire sera créé s'il n'existe pas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Spécifie une ou plusieurs balises de métadonnées pour le colorscript. Les balises fournissent une classification supplémentaire au-delà de la catégorie principale et sont utiles pour le filtrage et la recherche. Les balises communes incluent des descripteurs de thème comme 'Minimal', 'Colorful', 'Animated', des références technologiques comme 'Matrix', 'ASCII', ou des marqueurs contextuels comme 'Holiday', 'Season'. Plusieurs balises peuvent être spécifiées sous forme de tableau séparé par des virgules.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans effectuer réellement d'actions. Affiche le chemin du fichier qui serait créé et toutes les vérifications de validation qui seraient effectuées. La cmdlet ne crée aucun fichier ou répertoire lorsque ce commutateur est spécifié.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Spécifie la catégorie principale pour le colorscript lors de la génération des conseils de métadonnées. Ce paramètre n'est significatif que lorsqu'il est utilisé avec `-GenerateMetadataSnippet`. Les catégories communes incluent 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' et 'Abstract'. La valeur doit s'aligner avec les catégories existantes dans `ScriptMetadata.psd1` pour la cohérence.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Écrase le fichier de destination s'il existe déjà. Sans ce commutateur, la cmdlet se terminera avec une erreur si un fichier du même nom est trouvé à l'emplacement cible. Utilisez avec prudence pour éviter la perte de données.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Inclut un extrait de conseils dans la sortie qui démontre comment enregistrer le nouveau script dans `ScriptMetadata.psd1`. L'extrait utilise les valeurs des paramètres `-Category` et `-Tag` si elles sont fournies. Ceci est particulièrement utile pour maintenir des métadonnées cohérentes sur tous les colorscripts du module.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Spécifie le nom du nouveau colorscript. Le nom doit commencer par un caractère alphanumérique et peut inclure des traits de soulignement ou des traits d'union. L'extension `.ps1` est ajoutée automatiquement si elle n'est pas incluse. Ce nom sera utilisé comme nom de fichier et devrait être descriptif du contenu ou du thème du script.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Spécifie le répertoire de destination pour le squelette. Lorsqu'il n'est pas spécifié, il utilise par défaut le répertoire `Scripts` du module. Le chemin prend en charge l'expansion du tilde (`~`) pour le répertoire personnel de l'utilisateur, les variables d'environnement (par exemple, `$env:USERPROFILE`), et les chemins relatifs et absolus. Le répertoire sera créé s'il n'existe pas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Spécifie une ou plusieurs balises de métadonnées pour le colorscript. Les balises fournissent une classification supplémentaire au-delà de la catégorie principale et sont utiles pour le filtrage et la recherche. Les balises communes incluent des descripteurs de thème comme 'Minimal', 'Colorful', 'Animated', des références technologiques comme 'Matrix', 'ASCII', ou des marqueurs contextuels comme 'Holiday', 'Season'. Plusieurs balises peuvent être spécifiées sous forme de tableau séparé par des virgules.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans effectuer réellement d'actions. Affiche le chemin du fichier qui serait créé et toutes les vérifications de validation qui seraient effectuées. La cmdlet ne crée aucun fichier ou répertoire lorsque ce commutateur est spécifié.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Spécifie la catégorie principale pour le colorscript lors de la génération des conseils de métadonnées. Ce paramètre n'est significatif que lorsqu'il est utilisé avec `-GenerateMetadataSnippet`. Les catégories communes incluent 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' et 'Abstract'. La valeur doit s'aligner avec les catégories existantes dans `ScriptMetadata.psd1` pour la cohérence.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Écrase le fichier de destination s'il existe déjà. Sans ce commutateur, la cmdlet se terminera avec une erreur si un fichier du même nom est trouvé à l'emplacement cible. Utilisez avec prudence pour éviter la perte de données.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>GenerateMetadataSnippet</maml:name>
        <maml:description>
          <maml:para>Inclut un extrait de conseils dans la sortie qui démontre comment enregistrer le nouveau script dans `ScriptMetadata.psd1`. L'extrait utilise les valeurs des paramètres `-Category` et `-Tag` si elles sont fournies. Ceci est particulièrement utile pour maintenir des métadonnées cohérentes sur tous les colorscripts du module.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Spécifie le nom du nouveau colorscript. Le nom doit commencer par un caractère alphanumérique et peut inclure des traits de soulignement ou des traits d'union. L'extension `.ps1` est ajoutée automatiquement si elle n'est pas incluse. Ce nom sera utilisé comme nom de fichier et devrait être descriptif du contenu ou du thème du script.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>OutputPath</maml:name>
        <maml:description>
          <maml:para>Spécifie le répertoire de destination pour le squelette. Lorsqu'il n'est pas spécifié, il utilise par défaut le répertoire `Scripts` du module. Le chemin prend en charge l'expansion du tilde (`~`) pour le répertoire personnel de l'utilisateur, les variables d'environnement (par exemple, `$env:USERPROFILE`), et les chemins relatifs et absolus. Le répertoire sera créé s'il n'existe pas.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Spécifie une ou plusieurs balises de métadonnées pour le colorscript. Les balises fournissent une classification supplémentaire au-delà de la catégorie principale et sont utiles pour le filtrage et la recherche. Les balises communes incluent des descripteurs de thème comme 'Minimal', 'Colorful', 'Animated', des références technologiques comme 'Matrix', 'ASCII', ou des marqueurs contextuels comme 'Holiday', 'Season'. Plusieurs balises peuvent être spécifiées sous forme de tableau séparé par des virgules.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans effectuer réellement d'actions. Affiche le chemin du fichier qui serait créé et toutes les vérifications de validation qui seraient effectuées. La cmdlet ne crée aucun fichier ou répertoire lorsque ce commutateur est spécifié.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Vous ne pouvez pas canaliser d'objets vers cette cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>La cmdlet retourne un objet personnalisé avec les propriétés suivantes :

- **ScriptName** : Le nom du colorscript créé (y compris l'extension .ps1)
- **Path** : Le chemin complet vers le fichier généré
- **Category** : La valeur de catégorie qui a été spécifiée (le cas échéant)
- **Tags** : Le tableau des valeurs de balise qui ont été spécifiées (le cas échéant)
- **MetadataGuidance** : Le texte de l'extrait de métadonnées (uniquement lorsque -GenerateMetadataSnippet est utilisé)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Encodage** : Le squelette est écrit avec un encodage UTF-8 sans marque d'ordre d'octet (BOM), assurant la compatibilité sur différentes plateformes et éditeurs.

**Structure du modèle** : Le modèle généré comprend :
- Un bloc d'aide basé sur des commentaires avec des espaces réservés pour la documentation
- Un bloc d'exemple d'art ANSI démontrant les séquences de couleurs et le formatage
- Une structure de script PowerShell appropriée avec des sections claires pour la personnalisation

**Intégration des métadonnées** : Bien que la cmdlet puisse générer des conseils de métadonnées, vous devez ajouter manuellement l'extrait à `ScriptMetadata.psd1` pour intégrer pleinement le script dans le système de découverte et de catégorisation du module.

**Flux de travail de développement** :
1. Utilisez `New-ColorScript` pour créer le squelette
2. Modifiez le fichier .ps1 généré pour ajouter votre art ANSI
3. Si des conseils de métadonnées ont été générés, copiez-les dans `ScriptMetadata.psd1`
4. Exécutez `New-ColorScriptCache` pour reconstruire le cache du module
5. Testez votre script avec `Show-ColorScript -Name &lt;votre-nom-de-script&gt;`

**Meilleures pratiques** :
- Choisissez des noms descriptifs avec des traits d'union qui indiquent clairement le thème du script
- Utilisez des valeurs de catégorie cohérentes qui s'alignent avec les scripts existants
- Appliquez plusieurs balises pour améliorer la découvrabilité
- Testez les scripts dans différents environnements de terminal pour assurer la compatibilité</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'my-spectrum' -GenerateMetadataSnippet -Category 'Artistic' -Tag 'Custom','Demo'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée `my-spectrum.ps1` dans le répertoire `Scripts` du module et retourne un objet PowerShell contenant le chemin du fichier et un extrait de métadonnées. L'extrait montre comment ajouter une entrée à `ScriptMetadata.psd1` avec la catégorie 'Artistic' et les balises 'Custom' et 'Demo'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'holiday-banner' -OutputPath '~/Dev/colorscripts' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Génère le squelette dans un répertoire personnalisé (`~/Dev/colorscripts`), créant le répertoire s'il n'existe pas. Si un fichier nommé `holiday-banner.ps1` existe déjà à cet emplacement, il sera écrasé en raison du commutateur `-Force`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$result = New-ColorScript -Name 'retro-wave' -Category 'Retro' -Tag '80s','Neon' -GenerateMetadataSnippet
$result.MetadataGuidance | Set-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée un nouveau colorscript et copie les conseils de métadonnées dans le presse-papiers, facilitant leur collage dans `ScriptMetadata.psd1`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'test-pattern' -OutputPath '.\temp' -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Montre ce qui se passerait lors de la création d'un script de motif de test dans le répertoire `.\temp` sans créer réellement le fichier. Utile pour valider les chemins et les noms avant l'exécution.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create multiple colorscripts for a project
$scriptNames = @("company-logo", "team-banner", "status-display")
foreach ($name in $scriptNames) {
    New-ColorScript -Name $name -Category "Corporate" -Tag "Custom" -OutputPath ".\src" | Out-Null
}
Write-Host "Created $($scriptNames.Count) colorscript templates"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée plusieurs modèles de colorscripts en lot pour un projet.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create and immediately open in editor
$scaffold = New-ColorScript -Name "my-art" -Category "Artistic" -GenerateMetadataSnippet
code $scaffold.Path  # Opens in VS Code
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée un colorscript et l'ouvre immédiatement dans l'éditeur par défaut pour l'édition.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create with full workflow automation
$newScript = New-ColorScript -Name "interactive-demo" -Category "Educational" -Tag "Interactive","Demo" -GenerateMetadataSnippet
Write-Host "Created: $($newScript.ScriptName)"
Write-Host "Path: $($newScript.Path)"
Write-Host "Metadata guidance ready in clipboard"
$newScript.MetadataGuidance | Set-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée un colorscript avec des conseils de métadonnées automatiquement copiés dans le presse-papiers.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verify script name conventions
$validName = "my-awesome-script"
$invalidNames = @("123start", "-invalid", "_underscore-only")
foreach ($name in $invalidNames) {
    try {
        New-ColorScript -Name $name -WhatIf -ErrorAction Stop
    } catch {
        Write-Warning "Invalid name '$name': $_"
    }
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Démontre la validation des conventions de nommage pour les colorscripts.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create in portable location for distribution
$portableDir = Join-Path $PSScriptRoot "colorscripts"
$scaffold = New-ColorScript -Name "portable-art" -OutputPath $portableDir -GenerateMetadataSnippet
Write-Host "Created portable colorscript at: $($scaffold.Path)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crée des colorscripts dans un emplacement portable relatif au script actuel.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create with category and tag validation
$categories = Get-ColorScriptList -AsObject | Select-Object -ExpandProperty Category -Unique
if ("Retro" -in $categories) {
    New-ColorScript -Name "retro-party" -Category "Retro" -Tag "Fun","Social"
} else {
    Write-Warning "Retro category not found"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Valide qu'une catégorie existe avant de créer un nouveau colorscript.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/New-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ScriptMetadata.psd1</maml:linkText>
        <command:uri>../ScriptMetadata.psd1</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Pre-build or refresh colorscript cache files for faster rendering.

## DESCRIPTION

`New-ColorScriptCache` executes colorscripts in a background PowerShell instance and saves the rendered output using UTF-8 encoding (without BOM). Cached content dramatically speeds up subsequent calls to `Show-ColorScript` by eliminating the need to re-execute scripts. You can also use the alias `Update-ColorScriptCache` to invoke this cmdlet.

You can target specific scripts by name (wildcards supported) or cache the entire collection. When no parameters are specified, the cmdlet defaults to caching all available scripts. You can also filter scripts by category or tag to cache only those that match specific criteria.

By default, the cmdlet displays a concise summary of the caching operation. Use `-PassThru` to return detailed result objects for each script, which you can inspect programmatically for status, standard output, and error streams.

The cmdlet intelligently skips scripts whose cache files are already up-to-date unless you specify the `-Force` parameter to rebuild all caches regardless of their current state.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`New-ColorScriptCache` executes colorscripts in a background PowerShell instance and saves the rendered output using UTF-8 encoding (without BOM). Cached content dramatically speeds up subsequent calls to `Show-ColorScript` by eliminating the need to re-execute scripts. You can also use the alias `Update-ColorScriptCache` to invoke this cmdlet.</maml:para>
      <maml:para>You can target specific scripts by name (wildcards supported) or cache the entire collection. When no parameters are specified, the cmdlet defaults to caching all available scripts. You can also filter scripts by category or tag to cache only those that match specific criteria.</maml:para>
      <maml:para>By default, the cmdlet displays a concise summary of the caching operation. Use `-PassThru` to return detailed result objects for each script, which you can inspect programmatically for status, standard output, and error streams.</maml:para>
      <maml:para>The cmdlet intelligently skips scripts whose cache files are already up-to-date unless you specify the `-Force` parameter to rebuild all caches regardless of their current state.</maml:para>
      <maml:para>## SYNTAX</maml:para>
      <maml:para>### All</maml:para>
      <maml:para>``` New-ColorScriptCache [-All] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
      <maml:para>### Named</maml:para>
      <maml:para>``` New-ColorScriptCache [-Name &lt;String[]&gt;] [-Category &lt;String[]&gt;] [-Tag &lt;String[]&gt;] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Cache every available script. When omitted and no names are supplied, all scripts are cached by default. This parameter is useful when you want to be explicit about caching all scripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Limit the selection to scripts that belong to the specified category (case-insensitive). Multiple values are treated as an OR filter, meaning scripts matching any of the specified categories will be cached.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>One or more colorscript names to cache. Supports wildcard patterns (e.g., 'aurora-*', '*-wave'). When this parameter is omitted and no filtering parameters are specified, the cmdlet caches every available script by default.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Limit the selection to scripts containing the specified metadata tags (case-insensitive). Multiple values are treated as an OR filter, caching scripts that match any of the specified tags.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Cache every available script. When omitted and no names are supplied, all scripts are cached by default. This parameter is useful when you want to be explicit about caching all scripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Limit the selection to scripts that belong to the specified category (case-insensitive). Multiple values are treated as an OR filter, meaning scripts matching any of the specified categories will be cached.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet. Useful when caching a large number of scripts or when using `-Force` to prevent accidental cache regeneration.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Rebuild cache files even when the existing cache is newer than the script source. This is useful when you want to ensure all caches are regenerated, such as after module updates or when troubleshooting rendering issues.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>One or more colorscript names to cache. Supports wildcard patterns (e.g., 'aurora-*', '*-wave'). When this parameter is omitted and no filtering parameters are specified, the cmdlet caches every available script by default.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return detailed result objects for each cache operation. By default, only a summary is displayed. The result objects include properties such as Name, Status, CacheFile, ExitCode, StdOut, and StdErr, allowing for programmatic inspection of the caching process.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Limit the selection to scripts containing the specified metadata tags (case-insensitive). Multiple values are treated as an OR filter, caching scripts that match any of the specified tags.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs without actually performing the caching operations. Useful for previewing which scripts would be cached before committing to the operation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe script names to this cmdlet. Each string is treated as a potential script name and supports wildcard matching.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe an array of script names or metadata records with a `Name` property to this cmdlet for batch processing.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns a custom object for each processed script containing the following properties:

- **Name**: The colorscript name
- **Status**: Success, Skipped, or Failed
- **CacheFile**: Full path to the generated cache file
- **ExitCode**: The exit code from the script execution (0 indicates success)
- **StdOut**: Standard output captured during script execution
- **StdErr**: Standard error output captured during script execution

Without `-PassThru`, displays a concise summary table to the console showing the number of scripts cached, skipped, and failed.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced

**Aliases:** This cmdlet can also be called using the alias `Update-ColorScriptCache`, which is useful for scripts that refresh existing caches.

Cache files are stored in the directory exposed by the module's `CacheDir` variable (typically within the module's data directory). A successful build sets the cache file's timestamp to match the script's last write time, enabling subsequent runs to skip unchanged scripts efficiently.

The cmdlet executes each script in an isolated background PowerShell process to capture its output without affecting the current session. This ensures accurate caching of the exact console output that would be displayed when running the script directly.

**Best Practices:**
- Run once after module installation to pre-cache all scripts
- Use `-Force` only when you need to rebuild all caches
- Filter by category or tag for faster targeted cache builds
- Monitor build times to identify slow-rendering scripts
- Schedule periodic rebuilds to keep cache current
- Use `-PassThru` in automation for detailed status reporting
- Consider using `-WhatIf` before large cache operations

**Performance Tip:** Run this cmdlet once after installing or updating the module to pre-cache all scripts for optimal performance.

**Troubleshooting:**
- If cache build fails, check script syntax with `Show-ColorScript -Name scriptname -NoCache`
- Monitor disk space for cache directory growth
- Use `-PassThru` to identify which scripts failed building
- Clear and rebuild if cache becomes corrupted: `Clear-ColorScriptCache -All; New-ColorScriptCache`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Warm the cache for every script that ships with the module. This is the default behavior when no parameters are specified.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Name bars, 'aurora-*'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cache a mix of exact and wildcard matches. The cmdlet will process the 'bars' script and all scripts whose names start with 'aurora-'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Name mandelbrot-zoom -Force -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Force a rebuild of the 'mandelbrot-zoom' cache even if it's up-to-date, and examine the detailed result object.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Category 'Animation' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cache all scripts in the 'Animation' category and return detailed results for each operation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Tag 'geometric', 'colorful' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Rebuild caches for all scripts tagged with either 'geometric' or 'colorful', forcing regeneration even if caches are current.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList | Where-Object Category -eq 'Classic' | New-ColorScriptCache -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Pipeline example: retrieve all classic scripts and cache them, returning detailed results.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Check cache statistics after building
$before = @(Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache" -ErrorAction SilentlyContinue).Count
New-ColorScriptCache
$after = @(Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache").Count
Write-Host "Cached scripts: $before -&gt; $after"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Measures the cache growth by counting cache files before and after the operation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build cache for frequently used scripts only
$frequentScripts = @('bars', 'arch', 'mandelbrot-zoom', 'aurora-waves', 'galaxy-spiral')
New-ColorScriptCache -Name $frequentScripts -PassThru | Format-Table Name, Status, ExitCode
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Caches only the most frequently accessed scripts for faster performance in production.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Monitor cache building with progress tracking
$scripts = Get-ColorScriptList -AsObject
$total = $scripts.Count
$current = 0
$scripts | ForEach-Object {
    $current++
    Write-Progress -Activity "Building cache" -Status $_.Name -PercentComplete (($current / $total) * 100)
    New-ColorScriptCache -Name $_.Name | Out-Null
}
Write-Progress -Activity "Building cache" -Completed
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Provides visual progress feedback while building the cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Schedule cache rebuild on module load
# Add to PowerShell profile:
Import-Module ColorScripts-Enhanced
if ((Get-Date).Day % 7 -eq 0) {  # Weekly rebuild
    New-ColorScriptCache -Force | Out-Null
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Automatically rebuilds cache weekly when the module loads.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Cache specific category for deployment
New-ColorScriptCache -Category 'Recommended' -Force -PassThru |
    Select-Object Name, Status |
    Export-Csv "./cache-deployment.csv"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Caches recommended scripts and exports the results to a deployment manifest.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verify cache was built successfully
New-ColorScriptCache -Name "mandelbrot-zoom" -Force -PassThru |
    Where-Object { $_.ExitCode -ne 0 } |
    Select-Object Name, StdErr
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifies any caching failures by filtering for non-zero exit codes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Cache all animated scripts
New-ColorScriptCache -Tag Animated -PassThru |
    Measure-Object |
    Select-Object @{N='ScriptsCached'; E={$_.Count}}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Caches all scripts tagged as animated and shows the count of cached scripts.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/en-US/New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Reset-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Restaurer la configuration ColorScripts-Enhanced à ses valeurs par défaut.</maml:para>
      </maml:description>
      <command:verb>Reset</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Reset-ColorScriptConfiguration` efface toutes les substitutions de configuration persistées et restaure le module à ses paramètres d'usine par défaut. Lors de l'exécution, cette cmdlet :</maml:para>
      <maml:para>- Supprime tous les paramètres de configuration personnalisés du fichier de configuration - Réinitialise le chemin du cache à l'emplacement par défaut spécifique à la plateforme - Restaure tous les indicateurs de démarrage (RunOnStartup, RandomOnStartup, etc.) à leurs valeurs originales - Préserve la structure du fichier de configuration tout en effaçant les personnalisations utilisateur</maml:para>
      <maml:para>Cette cmdlet prend en charge les paramètres `-WhatIf` et `-Confirm` car elle effectue une opération destructive en écrasant le fichier de configuration. L'opération de réinitialisation ne peut pas être annulée automatiquement, donc les utilisateurs devraient envisager de sauvegarder leur configuration actuelle en utilisant `Get-ColorScriptConfiguration` avant de procéder.</maml:para>
      <maml:para>Utilisez le paramètre `-PassThru` pour inspecter immédiatement les nouveaux paramètres par défaut restaurés après la fin de la réinitialisation.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de configuration mis à jour après la fin de la réinitialisation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans exécuter réellement l'opération de réinitialisation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de configuration mis à jour après la fin de la réinitialisation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans exécuter réellement l'opération de réinitialisation.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Vous invite à confirmer avant d'exécuter la cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Retourne l'objet de configuration mis à jour après la fin de la réinitialisation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Montre ce qui se passerait si la cmdlet s'exécute sans exécuter réellement l'opération de réinitialisation.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette cmdlet n'accepte pas d'entrée de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Retourné lorsque `-PassThru` est spécifié.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>Le fichier de configuration est stocké sous le répertoire résolu par `Get-ColorScriptConfiguration`. Par défaut, cet emplacement est spécifique à la plateforme :

- **Windows** : `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS** : `$HOME/.config/ColorScripts-Enhanced`

La variable d'environnement `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` peut remplacer l'emplacement par défaut si elle est définie avant l'importation du module.

**Considérations importantes :**

- L'opération de réinitialisation est immédiate et ne peut pas être annulée automatiquement
- Tous les chemins de script de couleur personnalisés, emplacements de cache ou comportements de démarrage seront perdus
- Envisagez d'utiliser `Get-ColorScriptConfiguration` pour exporter vos paramètres actuels avant de réinitialiser
- Le module doit avoir des permissions d'écriture sur le répertoire de configuration
- Les autres sessions PowerShell utilisant le module verront les changements après leur prochain rechargement de configuration

**Valeurs par défaut restaurées :**

- CachePath : Répertoire de cache par défaut spécifique à la plateforme
- RunOnStartup : `$false`
- RandomOnStartup : `$false`
- ScriptOnStartup : Chaîne vide
- CustomScriptPaths : Tableau vide</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Réinitialise la configuration sans demander de confirmation. Ceci est utile dans les scripts automatisés ou lorsque vous êtes certain de réinitialiser aux valeurs par défaut.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Réinitialise la configuration et retourne la table de hachage résultante pour inspection, permettant de vérifier les valeurs par défaut.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Sauvegarder la configuration actuelle avant de réinitialiser
$backup = Get-ColorScriptConfiguration
Reset-ColorScriptConfiguration -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Utilise `-WhatIf` pour prévisualiser l'opération de réinitialisation sans l'exécuter réellement, après avoir sauvegardé la configuration actuelle.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Verbose
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Réinitialise la configuration avec une sortie verbeuse pour voir des informations détaillées sur l'opération.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Réinitialiser la configuration et effacer le cache pour une réinitialisation complète d'usine
Reset-ColorScriptConfiguration -Confirm:$false
Clear-ColorScriptCache -All -Confirm:$false
New-ColorScriptCache
Write-Host "Module réinitialisé aux paramètres d'usine par défaut !"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Effectue une réinitialisation complète d'usine incluant la configuration, le cache et la reconstruction du cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Vérifier que la réinitialisation a réussi
$config = Reset-ColorScriptConfiguration -PassThru
if ($config.Cache.Path -match "AppData|\.config") {
    Write-Host "Configuration réinitialisée avec succès aux paramètres par défaut de la plateforme"
} else {
    Write-Host "Configuration réinitialisée mais utilisant un chemin personnalisé : $($config.Cache.Path)"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Réinitialise et vérifie que la configuration a été restaurée aux valeurs par défaut en vérifiant le chemin du cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Persiste les modifications apportées au cache et à la configuration de démarrage de ColorScripts-Enhanced.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Set-ColorScriptConfiguration` fournit un moyen persistant de personnaliser le comportement et l'emplacement de stockage du module ColorScripts-Enhanced. Cette cmdlet met à jour le fichier de configuration du module, vous permettant de contrôler divers aspects du rendu et du stockage des scripts.</maml:para>
      <maml:para>**Capacités clés :**</maml:para>
      <maml:para>- **Relocalisation du cache** : Déplacez le cache des couleurscripts vers un répertoire personnalisé, utile pour les partages réseau, les lecteurs plus rapides ou les emplacements de stockage centralisés. - **Comportement d'auto-import** : Contrôlez si un couleurscript s'affiche automatiquement lorsque le module est importé pour la première fois dans votre session PowerShell. - **Intégration de profil** : Configurez les paramètres par défaut pour `Add-ColorScriptProfile` afin de rationaliser la configuration du profil. - **Sélection du script par défaut** : Définissez un couleurscript préféré qui sera utilisé lorsqu'aucun script spécifique n'est demandé.</maml:para>
      <maml:para>Tout chemin de répertoire fourni pour `-CachePath` est automatiquement créé s'il n'existe pas déjà. La cmdlet prend en charge l'expansion des variables d'environnement, l'expansion du répertoire d'accueil tilde (`~`), et les chemins absolus et relatifs. Fournir une chaîne vide (`''`) à `-CachePath` ou `-DefaultScript` efface la valeur stockée et revient aux valeurs par défaut du module.</maml:para>
      <maml:para>Les modifications apportées avec cette cmdlet prennent effet immédiatement pour les nouvelles opérations, mais peuvent ne pas affecter les données de cache déjà chargées jusqu'à ce que le module soit réimporté ou PowerShell redémarré.</maml:para>
      <maml:para>Lorsque `-PassThru` est spécifié, la cmdlet retourne l'objet de configuration mis à jour, facilitant la vérification des modifications ou l'enchaînement d'opérations supplémentaires.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Active ou désactive le rendu automatique d'un couleurscript lorsque le module est importé. Lorsqu'il est activé (`$true`), un couleurscript s'affiche immédiatement lors de l'import du module, fournissant un retour visuel instantané. Lorsqu'il est désactivé (`$false`), les scripts ne s'affichent que lorsqu'ils sont explicitement invoqués. Si non spécifié, le paramètre existant reste inchangé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Spécifie le répertoire où les fichiers et métadonnées des couleurscripts sont stockés. Prend en charge les chemins absolus, les chemins relatifs (résolus à partir de l'emplacement actuel), les variables d'environnement (par exemple, `$env:USERPROFILE`), et l'expansion tilde (`~`) pour le répertoire d'accueil.</maml:para>
            <maml:para>Si le répertoire spécifié n'existe pas, il sera créé automatiquement avec les permissions appropriées. Fournissez une chaîne vide (`''`) pour effacer le chemin personnalisé et revenir à l'emplacement par défaut spécifique à la plateforme. Lorsqu'il n'est pas spécifié, le paramètre de chemin de cache existant est préservé.</maml:para>
            <maml:para>**Note** : Changer le chemin de cache ne migre pas automatiquement les fichiers mis en cache existants. Vous devrez peut-être copier manuellement les fichiers ou les laisser se régénérer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Définit ou efface le nom du couleurscript par défaut utilisé par les assistants de profil, les fonctionnalités d'auto-affichage, et lorsqu'aucun script n'est explicitement spécifié dans les commandes. Cela doit correspondre au nom de base d'un fichier script sans extension (par exemple, `'bars'`, pas `'bars.ps1'`).</maml:para>
            <maml:para>Fournissez une chaîne vide (`''`) pour supprimer le défaut stocké, revenant au comportement par défaut du module (généralement une sélection aléatoire). Lorsque ce paramètre est omis, le paramètre de script par défaut actuel reste inchangé.</maml:para>
            <maml:para>Le script spécifié doit exister dans le répertoire des scripts du module pour être utilisé avec succès.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de configuration mis à jour après avoir effectué les modifications. Sans ce commutateur, la cmdlet fonctionne silencieusement (aucune sortie). L'objet retourné a la même structure que `Get-ColorScriptConfiguration` et peut être inspecté, stocké ou redirigé vers d'autres cmdlets pour un traitement supplémentaire.</maml:para>
            <maml:para>Utile pour la vérification, la journalisation ou l'enchaînement de commandes de configuration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Contrôle si les extraits de profil générés par `Add-ColorScriptProfile` incluent une invocation automatique de `Show-ColorScript`. Lorsque `$true`, le code de profil affichera un couleurscript à chaque démarrage du shell. Lorsque `$false`, le profil chargera le module mais n'affichera pas automatiquement les scripts.</maml:para>
            <maml:para>Ce paramètre n'affecte que le code de profil nouvellement généré ; les modifications de profil existantes ne sont pas automatiquement mises à jour. Omettre ce paramètre laisse le paramètre actuel inchangé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Active ou désactive le rendu automatique d'un couleurscript lorsque le module est importé. Lorsqu'il est activé (`$true`), un couleurscript s'affiche immédiatement lors de l'import du module, fournissant un retour visuel instantané. Lorsqu'il est désactivé (`$false`), les scripts ne s'affichent que lorsqu'ils sont explicitement invoqués. Si non spécifié, le paramètre existant reste inchangé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Spécifie le répertoire où les fichiers et métadonnées des couleurscripts sont stockés. Prend en charge les chemins absolus, les chemins relatifs (résolus à partir de l'emplacement actuel), les variables d'environnement (par exemple, `$env:USERPROFILE`), et l'expansion tilde (`~`) pour le répertoire d'accueil.</maml:para>
            <maml:para>Si le répertoire spécifié n'existe pas, il sera créé automatiquement avec les permissions appropriées. Fournissez une chaîne vide (`''`) pour effacer le chemin personnalisé et revenir à l'emplacement par défaut spécifique à la plateforme. Lorsqu'il n'est pas spécifié, le paramètre de chemin de cache existant est préservé.</maml:para>
            <maml:para>**Note** : Changer le chemin de cache ne migre pas automatiquement les fichiers mis en cache existants. Vous devrez peut-être copier manuellement les fichiers ou les laisser se régénérer.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Définit ou efface le nom du couleurscript par défaut utilisé par les assistants de profil, les fonctionnalités d'auto-affichage, et lorsqu'aucun script n'est explicitement spécifié dans les commandes. Cela doit correspondre au nom de base d'un fichier script sans extension (par exemple, `'bars'`, pas `'bars.ps1'`).</maml:para>
            <maml:para>Fournissez une chaîne vide (`''`) pour supprimer le défaut stocké, revenant au comportement par défaut du module (généralement une sélection aléatoire). Lorsque ce paramètre est omis, le paramètre de script par défaut actuel reste inchangé.</maml:para>
            <maml:para>Le script spécifié doit exister dans le répertoire des scripts du module pour être utilisé avec succès.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de configuration mis à jour après avoir effectué les modifications. Sans ce commutateur, la cmdlet fonctionne silencieusement (aucune sortie). L'objet retourné a la même structure que `Get-ColorScriptConfiguration` et peut être inspecté, stocké ou redirigé vers d'autres cmdlets pour un traitement supplémentaire.</maml:para>
            <maml:para>Utile pour la vérification, la journalisation ou l'enchaînement de commandes de configuration.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Contrôle si les extraits de profil générés par `Add-ColorScriptProfile` incluent une invocation automatique de `Show-ColorScript`. Lorsque `$true`, le code de profil affichera un couleurscript à chaque démarrage du shell. Lorsque `$false`, le profil chargera le module mais n'affichera pas automatiquement les scripts.</maml:para>
            <maml:para>Ce paramètre n'affecte que le code de profil nouvellement généré ; les modifications de profil existantes ne sont pas automatiquement mises à jour. Omettre ce paramètre laisse le paramètre actuel inchangé.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>AutoShowOnImport</maml:name>
        <maml:description>
          <maml:para>Active ou désactive le rendu automatique d'un couleurscript lorsque le module est importé. Lorsqu'il est activé (`$true`), un couleurscript s'affiche immédiatement lors de l'import du module, fournissant un retour visuel instantané. Lorsqu'il est désactivé (`$false`), les scripts ne s'affichent que lorsqu'ils sont explicitement invoqués. Si non spécifié, le paramètre existant reste inchangé.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>CachePath</maml:name>
        <maml:description>
          <maml:para>Spécifie le répertoire où les fichiers et métadonnées des couleurscripts sont stockés. Prend en charge les chemins absolus, les chemins relatifs (résolus à partir de l'emplacement actuel), les variables d'environnement (par exemple, `$env:USERPROFILE`), et l'expansion tilde (`~`) pour le répertoire d'accueil.</maml:para>
          <maml:para>Si le répertoire spécifié n'existe pas, il sera créé automatiquement avec les permissions appropriées. Fournissez une chaîne vide (`''`) pour effacer le chemin personnalisé et revenir à l'emplacement par défaut spécifique à la plateforme. Lorsqu'il n'est pas spécifié, le paramètre de chemin de cache existant est préservé.</maml:para>
          <maml:para>**Note** : Changer le chemin de cache ne migre pas automatiquement les fichiers mis en cache existants. Vous devrez peut-être copier manuellement les fichiers ou les laisser se régénérer.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>DefaultScript</maml:name>
        <maml:description>
          <maml:para>Définit ou efface le nom du couleurscript par défaut utilisé par les assistants de profil, les fonctionnalités d'auto-affichage, et lorsqu'aucun script n'est explicitement spécifié dans les commandes. Cela doit correspondre au nom de base d'un fichier script sans extension (par exemple, `'bars'`, pas `'bars.ps1'`).</maml:para>
          <maml:para>Fournissez une chaîne vide (`''`) pour supprimer le défaut stocké, revenant au comportement par défaut du module (généralement une sélection aléatoire). Lorsque ce paramètre est omis, le paramètre de script par défaut actuel reste inchangé.</maml:para>
          <maml:para>Le script spécifié doit exister dans le répertoire des scripts du module pour être utilisé avec succès.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Retourne l'objet de configuration mis à jour après avoir effectué les modifications. Sans ce commutateur, la cmdlet fonctionne silencieusement (aucune sortie). L'objet retourné a la même structure que `Get-ColorScriptConfiguration` et peut être inspecté, stocké ou redirigé vers d'autres cmdlets pour un traitement supplémentaire.</maml:para>
          <maml:para>Utile pour la vérification, la journalisation ou l'enchaînement de commandes de configuration.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>ProfileAutoShow</maml:name>
        <maml:description>
          <maml:para>Contrôle si les extraits de profil générés par `Add-ColorScriptProfile` incluent une invocation automatique de `Show-ColorScript`. Lorsque `$true`, le code de profil affichera un couleurscript à chaque démarrage du shell. Lorsque `$false`, le profil chargera le module mais n'affichera pas automatiquement les scripts.</maml:para>
          <maml:para>Ce paramètre n'affecte que le code de profil nouvellement généré ; les modifications de profil existantes ne sont pas automatiquement mises à jour. Omettre ce paramètre laisse le paramètre actuel inchangé.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cette cmdlet n'accepte pas d'entrée pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Par défaut, cette cmdlet ne produit aucune sortie.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Lorsque `-PassThru` est spécifié, retourne une hashtable contenant la configuration complète mise à jour. La structure correspond à la sortie de `Get-ColorScriptConfiguration`, avec des clés telles que `CachePath`, `AutoShowOnImport`, `ProfileAutoShow`, et `DefaultScript`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Emplacement du fichier de configuration :**

Les modifications de configuration sont persistées dans un fichier JSON ou XML stocké dans un répertoire de données d'application spécifique à la plateforme. Utilisez `Get-ColorScriptConfiguration` pour afficher le chemin racine de configuration actuel. La variable d'environnement `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` peut remplacer l'emplacement par défaut du répertoire de configuration si elle est définie avant l'import du module.

**Valeurs par défaut de la plateforme :**

- **Windows** : `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS** : `~/.config/ColorScripts-Enhanced` ou `$XDG_CONFIG_HOME/ColorScripts-Enhanced`

**Meilleures pratiques :**

- Testez les modifications de chemin de cache dans un environnement non-production d'abord, surtout lors de l'utilisation d'emplacements réseau.
- Utilisez `-PassThru` lors du scripting pour valider les mises à jour de configuration par programme.
- Envisagez de définir `AutoShowOnImport:$false` dans les scripts automatisés ou les pipelines CI/CD pour éviter une sortie visuelle inattendue.
- Documentez les configurations personnalisées dans les environnements d'équipe pour assurer un comportement cohérent entre les utilisateurs.

**Permissions :**

Assurez-vous d'avoir des permissions d'écriture sur le répertoire de configuration. Sur les systèmes partagés, les modifications de configuration n'affectent que le profil de l'utilisateur actuel, sauf si elles sont remplacées par des variables d'environnement pointant vers des emplacements partagés.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath 'D:/Temp/ColorScriptsCache' -AutoShowOnImport:$true -ProfileAutoShow:$false -DefaultScript 'bars'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Déplace le cache vers `D:/Temp/ColorScriptsCache`, active l'affichage automatique lors de l'import du module, désactive l'auto-affichage du profil, et définit `bars` comme script par défaut.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -DefaultScript '' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Efface le script par défaut et retourne l'objet de configuration résultant, vous permettant de vérifier que le paramètre a été supprimé.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "$env:TEMP\ColorScripts" -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Relocalise le cache vers le répertoire TEMP de Windows et affiche la configuration mise à jour complète en format liste. Utile pour les scénarios de test temporaires.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -AutoShowOnImport:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Désactive le rendu automatique des couleurscripts lors du chargement du module. Utile si vous préférez un contrôle manuel sur le moment où les scripts sont affichés.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath '~/.local/share/colorscripts' -DefaultScript 'crunch'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Définit un chemin de cache de style Linux/macOS en utilisant l'expansion tilde et configure 'crunch' comme script par défaut pour toutes les opérations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Show-ColorScript</command:name>
      <maml:description>
        <maml:para>Affiche un script de couleur avec mise en cache automatique pour des performances améliorées.</maml:para>
      </maml:description>
      <command:verb>Show</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Affiche de beaux scripts de couleur ANSI dans votre terminal avec optimisation intelligente des performances. L'applet de commande fournit quatre modes d'opération principaux :</maml:para>
      <maml:para>**Mode Aléatoire (Par Défaut) :** Affiche un script de couleur sélectionné aléatoirement dans la collection disponible. C'est le comportement par défaut lorsqu'aucun paramètre n'est spécifié.</maml:para>
      <maml:para>**Mode Nommé :** Affiche un script de couleur spécifique par nom. Prend en charge les modèles de caractères génériques pour une correspondance flexible. Lorsque plusieurs scripts correspondent à un modèle, le premier match dans l'ordre alphabétique est sélectionné.</maml:para>
      <maml:para>**Mode Liste :** Affiche une liste formatée de tous les scripts de couleur disponibles avec leurs métadonnées, incluant le nom, la catégorie, les balises et les descriptions.</maml:para>
      <maml:para>**Mode Tout :** Parcourt tous les scripts de couleur disponibles dans l'ordre alphabétique. Particulièrement utile pour présenter l'ensemble de la collection ou découvrir de nouveaux scripts.</maml:para>
      <maml:para>**Fonctionnalités de Performance :** Le système de mise en cache fournit des améliorations de performances de 6-19x. Lors de la première exécution, un script de couleur s'exécute normalement et sa sortie est mise en cache. Les affichages suivants utilisent la sortie mise en cache pour un rendu quasi-instantané. Le cache est automatiquement invalidé lorsque les scripts source sont modifiés, assurant l'exactitude de la sortie.</maml:para>
      <maml:para>**Capacités de Filtrage :** Filtrez les scripts par catégorie ou balises avant que la sélection ne se produise. Cela s'applique à tous les modes, vous permettant de travailler avec des sous-ensembles de la collection (par exemple, seulement les scripts thématiques sur la nature ou balisés comme "rétro").</maml:para>
      <maml:para>**Options de Sortie :** Par défaut, les scripts de couleur sont écrits directement dans la console pour un affichage visuel immédiat. Utilisez `-ReturnText` pour émettre la sortie rendue vers le pipeline pour capture, redirection ou traitement ultérieur. Utilisez `-PassThru` pour recevoir l'objet de métadonnées du script pour une utilisation programmatique.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par une ou plusieurs catégories avant que toute sélection ou affichage ne se produise. Les catégories sont généralement des thèmes larges comme "Nature", "Abstract", "Art", "Retro", etc. Plusieurs catégories peuvent être spécifiées comme un tableau. Ce paramètre fonctionne en conjonction avec tous les modes (Random, Named, List, All) pour réduire l'ensemble de travail.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Contourne le système de mise en cache et exécute le script de couleur directement. Cela force une exécution fraîche et peut être utile lors du test des modifications de script, du débogage, ou lorsque la corruption du cache est suspectée. Sans ce commutateur, la sortie mise en cache est utilisée lorsqu'elle est disponible pour des performances optimales.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de métadonnées du script de couleur sélectionné vers le pipeline en plus d'afficher le script de couleur. L'objet de métadonnées contient des propriétés comme Name, Path, Category, Tags et Description. Cela permet l'accès programmatique aux informations du script pour le filtrage, la journalisation ou le traitement ultérieur tout en rendant la sortie visuelle.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Random</maml:name>
          <maml:description>
            <maml:para>Demande explicitement une sélection de script de couleur aléatoire. C'est le comportement par défaut lorsqu'aucun nom n'est spécifié, donc ce commutateur est principalement utile pour la clarté dans les scripts ou lorsque vous voulez être explicite sur le mode de sélection. Peut être combiné avec `-Category` ou `-Tag` pour randomiser dans un sous-ensemble filtré.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Émet le script de couleur rendu comme une chaîne vers le pipeline PowerShell au lieu d'écrire directement dans l'hôte console. Cela permet à la sortie d'être capturée dans une variable, redirigée vers un fichier ou canalisée vers d'autres commandes. La sortie conserve toutes les séquences d'échappement ANSI, donc elle s'affichera avec les couleurs appropriées lorsqu'elle sera écrite plus tard dans un terminal compatible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par balises de métadonnées (insensible à la casse). Les balises sont des descripteurs plus spécifiques que les catégories, tels que "geometric", "retro", "animated", "minimal", etc. Plusieurs balises peuvent être spécifiées comme un tableau. Les scripts correspondant à l'une des balises spécifiées seront inclus dans l'ensemble de travail avant que la sélection ne se produise.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par une ou plusieurs catégories avant que toute sélection ou affichage ne se produise. Les catégories sont généralement des thèmes larges comme "Nature", "Abstract", "Art", "Retro", etc. Plusieurs catégories peuvent être spécifiées comme un tableau. Ce paramètre fonctionne en conjonction avec tous les modes (Random, Named, List, All) pour réduire l'ensemble de travail.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Le nom du script de couleur à afficher (sans l'extension .ps1). Prend en charge les modèles de caractères génériques (* et ?) pour une correspondance flexible. Lorsque plusieurs scripts correspondent à un modèle de caractères génériques, le premier match dans l'ordre alphabétique est sélectionné et affiché. Utilisez `-PassThru` pour vérifier quel script a été choisi lors de l'utilisation de caractères génériques.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Contourne le système de mise en cache et exécute le script de couleur directement. Cela force une exécution fraîche et peut être utile lors du test des modifications de script, du débogage, ou lorsque la corruption du cache est suspectée. Sans ce commutateur, la sortie mise en cache est utilisée lorsqu'elle est disponible pour des performances optimales.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Retourne l'objet de métadonnées du script de couleur sélectionné vers le pipeline en plus d'afficher le script de couleur. L'objet de métadonnées contient des propriétés comme Name, Path, Category, Tags et Description. Cela permet l'accès programmatique aux informations du script pour le filtrage, la journalisation ou le traitement ultérieur tout en rendant la sortie visuelle.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Émet le script de couleur rendu comme une chaîne vers le pipeline PowerShell au lieu d'écrire directement dans l'hôte console. Cela permet à la sortie d'être capturée dans une variable, redirigée vers un fichier ou canalisée vers d'autres commandes. La sortie conserve toutes les séquences d'échappement ANSI, donc elle s'affichera avec les couleurs appropriées lorsqu'elle sera écrite plus tard dans un terminal compatible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par balises de métadonnées (insensible à la casse). Les balises sont des descripteurs plus spécifiques que les catégories, tels que "geometric", "retro", "animated", "minimal", etc. Plusieurs balises peuvent être spécifiées comme un tableau. Les scripts correspondant à l'une des balises spécifiées seront inclus dans l'ensemble de travail avant que la sélection ne se produise.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par une ou plusieurs catégories avant que toute sélection ou affichage ne se produise. Les catégories sont généralement des thèmes larges comme "Nature", "Abstract", "Art", "Retro", etc. Plusieurs catégories peuvent être spécifiées comme un tableau. Ce paramètre fonctionne en conjonction avec tous les modes (Random, Named, List, All) pour réduire l'ensemble de travail.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>List</maml:name>
          <maml:description>
            <maml:para>Affiche une liste formatée de tous les scripts de couleur disponibles avec leurs métadonnées associées. La sortie inclut le nom du script, la catégorie, les balises et la description. Ceci est utile pour explorer les options disponibles et comprendre l'organisation de la collection. Peut être combiné avec `-Category` ou `-Tag` pour lister seulement les sous-ensembles filtrés.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Contourne le système de mise en cache et exécute le script de couleur directement. Cela force une exécution fraîche et peut être utile lors du test des modifications de script, du débogage, ou lorsque la corruption du cache est suspectée. Sans ce commutateur, la sortie mise en cache est utilisée lorsqu'elle est disponible pour des performances optimales.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Émet le script de couleur rendu comme une chaîne vers le pipeline PowerShell au lieu d'écrire directement dans l'hôte console. Cela permet à la sortie d'être capturée dans une variable, redirigée vers un fichier ou canalisée vers d'autres commandes. La sortie conserve toutes les séquences d'échappement ANSI, donc elle s'affichera avec les couleurs appropriées lorsqu'elle sera écrite plus tard dans un terminal compatible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par balises de métadonnées (insensible à la casse). Les balises sont des descripteurs plus spécifiques que les catégories, tels que "geometric", "retro", "animated", "minimal", etc. Plusieurs balises peuvent être spécifiées comme un tableau. Les scripts correspondant à l'une des balises spécifiées seront inclus dans l'ensemble de travail avant que la sélection ne se produise.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Parcourt tous les scripts de couleur disponibles dans l'ordre alphabétique. Lorsqu'il est spécifié seul, les scripts sont affichés en continu avec un court délai automatique. Combinez avec `-WaitForInput` pour contrôler manuellement la progression dans la collection. Ce mode est idéal pour présenter la bibliothèque complète ou découvrir de nouveaux favoris.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par une ou plusieurs catégories avant que toute sélection ou affichage ne se produise. Les catégories sont généralement des thèmes larges comme "Nature", "Abstract", "Art", "Retro", etc. Plusieurs catégories peuvent être spécifiées comme un tableau. Ce paramètre fonctionne en conjonction avec tous les modes (Random, Named, List, All) pour réduire l'ensemble de travail.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Contourne le système de mise en cache et exécute le script de couleur directement. Cela force une exécution fraîche et peut être utile lors du test des modifications de script, du débogage, ou lorsque la corruption du cache est suspectée. Sans ce commutateur, la sortie mise en cache est utilisée lorsqu'elle est disponible pour des performances optimales.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Émet le script de couleur rendu comme une chaîne vers le pipeline PowerShell au lieu d'écrire directement dans l'hôte console. Cela permet à la sortie d'être capturée dans une variable, redirigée vers un fichier ou canalisée vers d'autres commandes. La sortie conserve toutes les séquences d'échappement ANSI, donc elle s'affichera avec les couleurs appropriées lorsqu'elle sera écrite plus tard dans un terminal compatible.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtre la collection de scripts disponibles par balises de métadonnées (insensible à la casse). Les balises sont des descripteurs plus spécifiques que les catégories, tels que "geometric", "retro", "animated", "minimal", etc. Plusieurs balises peuvent être spécifiées comme un tableau. Les scripts correspondant à l'une des balises spécifiées seront inclus dans l'ensemble de travail avant que la sélection ne se produise.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WaitForInput</maml:name>
          <maml:description>
            <maml:para>Lorsqu'il est utilisé avec `-All`, fait une pause après l'affichage de chaque script de couleur et attend une entrée utilisateur avant de procéder. Appuyez sur la barre d'espace pour avancer vers le script suivant dans la séquence. Appuyez sur 'q' pour quitter la séquence tôt et retourner à l'invite. Cela fournit une expérience de navigation interactive à travers l'ensemble de la collection.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Parcourt tous les scripts de couleur disponibles dans l'ordre alphabétique. Lorsqu'il est spécifié seul, les scripts sont affichés en continu avec un court délai automatique. Combinez avec `-WaitForInput` pour contrôler manuellement la progression dans la collection. Ce mode est idéal pour présenter la bibliothèque complète ou découvrir de nouveaux favoris.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filtre la collection de scripts disponibles par une ou plusieurs catégories avant que toute sélection ou affichage ne se produise. Les catégories sont généralement des thèmes larges comme "Nature", "Abstract", "Art", "Retro", etc. Plusieurs catégories peuvent être spécifiées comme un tableau. Ce paramètre fonctionne en conjonction avec tous les modes (Random, Named, List, All) pour réduire l'ensemble de travail.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>List</maml:name>
        <maml:description>
          <maml:para>Affiche une liste formatée de tous les scripts de couleur disponibles avec leurs métadonnées associées. La sortie inclut le nom du script, la catégorie, les balises et la description. Ceci est utile pour explorer les options disponibles et comprendre l'organisation de la collection. Peut être combiné avec `-Category` ou `-Tag` pour lister seulement les sous-ensembles filtrés.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Le nom du script de couleur à afficher (sans l'extension .ps1). Prend en charge les modèles de caractères génériques (* et ?) pour une correspondance flexible. Lorsque plusieurs scripts correspondent à un modèle de caractères génériques, le premier match dans l'ordre alphabétique est sélectionné et affiché. Utilisez `-PassThru` pour vérifier quel script a été choisi lors de l'utilisation de caractères génériques.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoCache</maml:name>
        <maml:description>
          <maml:para>Contourne le système de mise en cache et exécute le script de couleur directement. Cela force une exécution fraîche et peut être utile lors du test des modifications de script, du débogage, ou lorsque la corruption du cache est suspectée. Sans ce commutateur, la sortie mise en cache est utilisée lorsqu'elle est disponible pour des performances optimales.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Retourne l'objet de métadonnées du script de couleur sélectionné vers le pipeline en plus d'afficher le script de couleur. L'objet de métadonnées contient des propriétés comme Name, Path, Category, Tags et Description. Cela permet l'accès programmatique aux informations du script pour le filtrage, la journalisation ou le traitement ultérieur tout en rendant la sortie visuelle.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Random</maml:name>
        <maml:description>
          <maml:para>Demande explicitement une sélection de script de couleur aléatoire. C'est le comportement par défaut lorsqu'aucun nom n'est spécifié, donc ce commutateur est principalement utile pour la clarté dans les scripts ou lorsque vous voulez être explicite sur le mode de sélection. Peut être combiné avec `-Category` ou `-Tag` pour randomiser dans un sous-ensemble filtré.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReturnText</maml:name>
        <maml:description>
          <maml:para>Émet le script de couleur rendu comme une chaîne vers le pipeline PowerShell au lieu d'écrire directement dans l'hôte console. Cela permet à la sortie d'être capturée dans une variable, redirigée vers un fichier ou canalisée vers d'autres commandes. La sortie conserve toutes les séquences d'échappement ANSI, donc elle s'affichera avec les couleurs appropriées lorsqu'elle sera écrite plus tard dans un terminal compatible.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filtre la collection de scripts disponibles par balises de métadonnées (insensible à la casse). Les balises sont des descripteurs plus spécifiques que les catégories, tels que "geometric", "retro", "animated", "minimal", etc. Plusieurs balises peuvent être spécifiées comme un tableau. Les scripts correspondant à l'une des balises spécifiées seront inclus dans l'ensemble de travail avant que la sélection ne se produise.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WaitForInput</maml:name>
        <maml:description>
          <maml:para>Lorsqu'il est utilisé avec `-All`, fait une pause après l'affichage de chaque script de couleur et attend une entrée utilisateur avant de procéder. Appuyez sur la barre d'espace pour avancer vers le script suivant dans la séquence. Appuyez sur 'q' pour quitter la séquence tôt et retourner à l'invite. Cela fournit une expérience de navigation interactive à travers l'ensemble de la collection.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Vous pouvez canaliser les noms de scripts de couleur vers Show-ColorScript. Cela permet des workflows basés sur le pipeline où les noms de scripts sont générés ou filtrés par d'autres commandes.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Lorsque `-PassThru` est spécifié, retourne l'objet de métadonnées du script de couleur sélectionné contenant des propriétés comme Name, Path, Category, Tags et Description.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Lorsque `-ReturnText` est spécifié, émet le script de couleur rendu comme une chaîne vers le pipeline. Cette chaîne contient toutes les séquences d'échappement ANSI pour un rendu coloré approprié lorsqu'elle est affichée dans un terminal compatible.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>En opération par défaut (sans `-PassThru` ou `-ReturnText`), la sortie est écrite directement dans l'hôte console et rien n'est retourné vers le pipeline.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 ou ultérieur

**Performance:**
Le système de mise en cache intelligent fournit des améliorations de performances de 6-19x par rapport à l'exécution directe. Les fichiers de cache sont stockés dans un répertoire géré par le module et sont automatiquement invalidés lorsque les scripts source sont modifiés, assurant l'exactitude.

**Gestion du Cache:**
- Emplacement du cache : Utilisez `(Get-Module ColorScripts-Enhanced).ModuleBase` et cherchez le répertoire de cache
- Effacer le cache : Utilisez `Clear-ColorScriptCache` pour reconstruire à partir de zéro
- Reconstruire le cache : Utilisez `New-ColorScriptCache` pour pré-remplir le cache pour tous les scripts
- Inspecter le cache : Les fichiers de cache sont du texte brut et peuvent être visualisés directement

**Conseils:**
- Ajoutez `Show-ColorScript -Random` à votre profil PowerShell pour un accueil coloré à chaque démarrage de session
- Utilisez l'alias du module `scs` pour un accès rapide : `scs -Random`
- Combinez les filtres de catégorie et de balise pour une sélection précise
- Utilisez `-List` pour découvrir de nouveaux scripts et apprendre leurs thèmes
- La combinaison `-All -WaitForInput` est parfaite pour présenter la collection à d'autres

**Compatibilité:**
Les scripts de couleur utilisent des séquences d'échappement ANSI et s'affichent mieux dans les terminaux avec un support couleur complet, tels que Windows Terminal, ConEmu ou terminaux Unix modernes.

## ADVANCED USAGE

### Filtering Strategies

**Par Combinaison de Catégorie et Balise**
```powershell
# Show only geometric colorscripts tagged as minimal
Show-ColorScript -Category Geometric -Tag minimal -Random

# Show only recommended colorscripts from nature category
Show-ColorScript -Category Nature -Tag Recommended -Random

# Display multiple categories with specific tag
Show-ColorScript -Category Geometric,Abstract -Tag colorful -Random
```

**Filtrage Dynamique Basé sur l'Heure**
```powershell
# Morning: bright colors
if ((Get-Date).Hour -lt 12) {
    Show-ColorScript -Tag bright,colorful -Random
}
# Evening: darker palettes
else {
    Show-ColorScript -Tag dark,minimal -Random
}
```

### Output Capture Patterns

**Sauvegarder pour Visualisation Ultérieure**
```powershell
# Save to variable
$art = Show-ColorScript -Name spectrum -ReturnText
$art | Out-File "./my-art.ansi" -Encoding UTF8

# Later display
Get-Content "./my-art.ansi" -Raw | Write-Host
```

**Créer des Collections Thématiques**
```powershell
# Collect all geometric scripts
$geometric = Get-ColorScriptList -Category Geometric -AsObject

# Save each one
$geometric | ForEach-Object {
    Show-ColorScript -Name $_.Name -ReturnText |
        Out-File "./collection/$($_.Name).ansi" -Encoding UTF8
}
```

### Performance Analysis

**Benchmark Complet**
```powershell
# Function to benchmark colorscript performance
function Measure-ColorScriptPerformance {
    param([string]$Name)

    # Warm up cache
    Show-ColorScript -Name $Name | Out-Null

    # Cached performance
    $cached = Measure-Command { Show-ColorScript -Name $Name }

    # Uncached performance
    Clear-ColorScriptCache -Name $Name -Confirm:$false
    $uncached = Measure-Command { Show-ColorScript -Name $Name -NoCache }

    [PSCustomObject]@{
        Script = $Name
        Cached = $cached.TotalMilliseconds
        Uncached = $uncached.TotalMilliseconds
        Improvement = [math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 2)
    }
}

# Test multiple scripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object { Measure-ColorScriptPerformance -Name $_.Name }
```

### Terminal Customization

**Terminal-Specific Display**
```powershell
# Windows Terminal with ANSI support
if ($env:WT_SESSION) {
    Show-ColorScript -Category Abstract -Random  # Maximum colors
}

# VS Code terminal
if ($env:TERM_PROGRAM -eq "vscode") {
    Show-ColorScript -Tag simple  # Avoid complex rendering
}

# SSH session (potentially limited)
if ($env:SSH_CONNECTION) {
    Show-ColorScript -NoCache -Category Simple  # Minimal overhead
}

# ConEmu terminal
if ($env:ConEmuANSI -eq "ON") {
    Show-ColorScript -Random  # Full ANSI support
}
```

### Automation Integration

**Scheduled Colorscript Rotation**
```powershell
# Create scheduled task wrapper
function Start-ColorScriptSession {
    param(
        [int]$MaxScripts = 5,
        [string[]]$Categories = @("Geometric", "Nature"),
        [int]$DelaySeconds = 2
    )

    Get-ColorScriptList -Category $Categories -AsObject |
        Select-Object -First $MaxScripts |
        ForEach-Object {
            Write-Host "`n=== $($_.Name) ($($_.Category)) ===" -ForegroundColor Cyan
            Show-ColorScript -Name $_.Name
            Start-Sleep -Seconds $DelaySeconds
        }
}
```

### Error Handling and Resilience

**Graceful Fallback**
```powershell
# Try specific script, fallback to random
try {
    Show-ColorScript -Name "specific-script" -ErrorAction Stop
} catch {
    Write-Warning "Specific script not found, showing random"
    Show-ColorScript -Random
}
```

**Validation Before Display**
```powershell
# Verify script exists before displaying
$scripts = Get-ColorScriptList -AsObject
$scriptName = "aurora-waves"

if ($scriptName -in $scripts.Name) {
    Show-ColorScript -Name $scriptName
} else {
    Write-Error "$scriptName not found"
    Get-ColorScriptList | Out-Host
}
```

### Metadata Inspection

**Inspect Before Displaying**
```powershell
# Get metadata while displaying
$metadata = Show-ColorScript -Name aurora-waves -PassThru

Write-Host "`nScript Details:`n"
$metadata | Select-Object Name, Category, Tags, Description | Format-List

# Use metadata for decisions
if ($metadata.Tags -contains "Animated") {
    Write-Host "This is an animated script"
}
```

## NOTES

**Auteur :** Nick
**Module :** ColorScripts-Enhanced
**Requiert :** PowerShell 5.1 ou ultérieur

**Performance :**
Le système de mise en cache intelligent fournit des améliorations de performances de 6-19x par rapport à l'exécution directe. Les fichiers de cache sont stockés dans un répertoire géré par le module et sont automatiquement invalidés lorsque les scripts source sont modifiés, assurant l'exactitude.

**Gestion du Cache :**
- Emplacement du cache : Utilisez `(Get-Module ColorScripts-Enhanced).ModuleBase` et cherchez le répertoire de cache
- Effacer le cache : Utilisez `Clear-ColorScriptCache` pour reconstruire à partir de zéro
- Reconstruire le cache : Utilisez `New-ColorScriptCache` pour pré-remplir le cache pour tous les scripts
- Inspecter le cache : Les fichiers de cache sont du texte brut et peuvent être visualisés directement

**Conseils Avancés :**
- Utilisez `-PassThru` pour obtenir les métadonnées tout en affichant pour le post-traitement
- Combinez `-ReturnText` avec les commandes de pipeline pour une manipulation avancée du texte
- Utilisez `-NoCache` pendant le développement de scripts de couleur personnalisés pour un retour immédiat
- Filtrez par plusieurs catégories/balises pour une sélection plus précise
- Stockez les scripts fréquemment utilisés dans des variables pour un accès rapide
- Utilisez `-List` avec `-Category` et `-Tag` pour explorer le contenu disponible
- Surveillez les accès au cache avec des mesures de performance
- Considérez les capacités du terminal lors de la sélection des scripts
- Utilisez des variables d'environnement pour personnaliser le comportement par environnement
- Implémentez la gestion d'erreur pour les scénarios d'affichage automatisés

**Matrice de Compatibilité Terminal :**

| Terminal | Support ANSI | UTF-8 | Performance | Notes |
|----------|--------------|-------|-------------|-------|
| Windows Terminal | ✓ Excellent | ✓ Complet | Excellent | Recommandé |
| ConEmu | ✓ Bon | ✓ Complet | Bon | Héritage mais fiable |
| VS Code | ✓ Bon | ✓ Complet | Très Bon | Léger délai de rendu |
| PowerShell ISE | ✗ Limité | ✗ Limité | N/A | Non recommandé |
| Terminal SSH | ✓ Varie | ✓ Dépend | Varie | Latence réseau peut affecter |
| Console Windows 10 | ✗ Aucun | ✓ Oui | N/A | Non recommandé |</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche un script de couleur aléatoire avec mise en cache activée. C'est le moyen le plus rapide d'ajouter une touche visuelle à votre session terminal.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "mandelbrot-zoom"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche le script de couleur spécifié par nom exact. L'extension .ps1 n'est pas requise.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "aurora-*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche le premier script de couleur (alphabétiquement) qui correspond au modèle de caractères génériques "aurora-*". Utile lorsque vous vous souvenez d'une partie du nom d'un script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
scs hearts
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Utilise l'alias du module 'scs' pour un accès rapide au script de couleur hearts. Les alias fournissent des raccourcis pratiques pour une utilisation fréquente.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Liste tous les scripts de couleur disponibles avec leurs métadonnées dans un tableau formaté. Utile pour découvrir les scripts disponibles et leurs attributs.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name arch -NoCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche le script de couleur arch sans utiliser le cache, forçant une exécution fraîche. Utile pendant le développement ou lors du dépannage des problèmes de cache.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Category Nature -PassThru | Select-Object Name, Category
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche un script thématique sur la nature aléatoire et capture son objet de métadonnées pour une inspection ou un traitement ultérieur.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "bars" -ReturnText | Set-Content bars.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Rend le script de couleur et sauvegarde la sortie dans un fichier texte. Les codes ANSI rendus sont préservés, permettant au fichier d'être affiché plus tard avec une coloration appropriée.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche tous les scripts de couleur dans l'ordre alphabétique avec un court délai automatique entre chacun. Parfait pour une démonstration visuelle de l'ensemble de la collection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche tous les scripts de couleur un par un, en faisant une pause après chacun. Appuyez sur la barre d'espace pour avancer vers le script suivant, ou appuyez sur 'q' pour quitter la séquence tôt.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -Category Nature -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Parcourt tous les scripts de couleur thématiques sur la nature avec progression manuelle. Combine le filtrage avec la navigation interactive pour une expérience curatée.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Tag retro,geometric -Random
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche un script de couleur aléatoire qui a à la fois les balises "retro" et "geometric". Le filtrage par balises permet une sélection précise de sous-ensemble.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List -Category Art,Abstract
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Liste seulement les scripts de couleur catégorisés comme "Art" ou "Abstract", vous aidant à découvrir les scripts dans des thèmes spécifiques.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 14 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Measure performance improvement from caching
$uncached = Measure-Command { Show-ColorScript -Name spectrum -NoCache }
$cached = Measure-Command { Show-ColorScript -Name spectrum }
Write-Host "Uncached: $($uncached.TotalMilliseconds)ms | Cached: $($cached.TotalMilliseconds)ms | Speedup: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Démontre l'amélioration de performance que la mise en cache fournit en mesurant le temps d'exécution.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 15 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Set up daily rotation of different colorscripts
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript -Random -PassThru | Select-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche un script de couleur cohérent mais différent chaque jour basé sur la date.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 16 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export rendered colorscript to file for sharing
Show-ColorScript -Name "aurora-waves" -ReturnText |
    Out-File -FilePath "./aurora.ansi" -Encoding UTF8</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Later, display the saved file
Get-Content "./aurora.ansi" -Raw | Write-Host
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Sauvegarde un script de couleur rendu dans un fichier qui peut être affiché plus tard ou partagé avec d'autres.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 17 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create a slideshow of geometric colorscripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object {
        Show-ColorScript -Name $_.Name
        Start-Sleep -Seconds 3
    }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Affiche automatiquement une séquence de scripts de couleur géométriques avec des délais de 3 secondes entre chacun.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 18 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Error handling example
try {
    Show-ColorScript -Name "nonexistent-script" -ErrorAction Stop
} catch {
    Write-Warning "Script not found: $_"
    Show-ColorScript  # Fallback to random
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Démontre la gestion d'erreur lorsqu'on demande un script qui n'existe pas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 19 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build automation integration
if ($env:CI) {
    Show-ColorScript -Name "nerd-font-test" -NoCache
} else {
    Show-ColorScript  # Random display for interactive use
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Montre comment afficher conditionnellement différents scripts de couleur dans les environnements CI/CD vs. sessions interactives.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 20 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Scheduled task for terminal greeting
$scriptPath = "$(Get-Module ColorScripts-Enhanced).ModuleBase\Scripts\mandelbrot-zoom.ps1"
if (Test-Path $scriptPath) {
    &amp; $scriptPath
} else {
    Show-ColorScript -Name mandelbrot-zoom
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Démontre l'exécution d'un script de couleur spécifique dans le cadre d'une tâche planifiée ou d'automatisation de démarrage.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/fr/Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>