<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-ColorScriptProfile</command:name>
      <maml:description>
        <maml:para>Agrega la importación del módulo ColorScripts-Enhanced (y opcionalmente Show-ColorScript) a un archivo de perfil de PowerShell.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>ColorScriptProfile</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Agrega un fragmento de inicio al archivo de perfil de PowerShell especificado. El fragmento siempre importa el módulo ColorScripts-Enhanced y, a menos que se suprima con `-SkipStartupScript`, agrega una llamada a `Show-ColorScript` para que se muestre un colorscript aleatorio al iniciar PowerShell.</maml:para>
      <maml:para>El archivo de perfil se crea automáticamente si no existe. Las importaciones duplicadas se evitan a menos que se especifique `-Force`.</maml:para>
      <maml:para>El parámetro `-Path` acepta rutas relativas, variables de entorno y expansión de `~`, lo que facilita apuntar a perfiles fuera de las ubicaciones predeterminadas. Si no se proporciona `-Path`, el parámetro `-Scope` determina qué perfil estándar de PowerShell modificar.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-ColorScriptProfile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Le solicita confirmación antes de ejecutar el cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Agrega el fragmento incluso si el perfil ya contiene una línea `Import-Module ColorScripts-Enhanced`. Use esto para forzar entradas duplicadas o volver a agregar el fragmento después de la eliminación manual.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>h</maml:name>
          <maml:description>
            <maml:para>Muestra información de ayuda para este cmdlet. Equivalente a usar `Get-Help Add-ColorScriptProfile`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Ruta explícita del perfil a actualizar. Anula `-Scope` cuando se proporciona. Admite variables de entorno (ej. `$env:USERPROFILE`), rutas relativas y expansión de `~` para el directorio home.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Alcance del perfil a actualizar cuando no se proporciona `-Path`. Acepta las propiedades estándar de perfil de PowerShell: `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts` o `AllUsersCurrentHost`. El valor predeterminado es `CurrentUserAllHosts`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>SkipStartupScript</maml:name>
          <maml:description>
            <maml:para>Omitir agregar `Show-ColorScript` al perfil. Solo se agrega la línea `Import-Module ColorScripts-Enhanced`. Use esto si desea controlar manualmente cuándo se muestran los colorscripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si se ejecuta el cmdlet. El cmdlet no se ejecuta.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Le solicita confirmación antes de ejecutar el cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Agrega el fragmento incluso si el perfil ya contiene una línea `Import-Module ColorScripts-Enhanced`. Use esto para forzar entradas duplicadas o volver a agregar el fragmento después de la eliminación manual.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>h</maml:name>
        <maml:description>
          <maml:para>Muestra información de ayuda para este cmdlet. Equivalente a usar `Get-Help Add-ColorScriptProfile`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Ruta explícita del perfil a actualizar. Anula `-Scope` cuando se proporciona. Admite variables de entorno (ej. `$env:USERPROFILE`), rutas relativas y expansión de `~` para el directorio home.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Alcance del perfil a actualizar cuando no se proporciona `-Path`. Acepta las propiedades estándar de perfil de PowerShell: `CurrentUserAllHosts`, `CurrentUserCurrentHost`, `AllUsersAllHosts` o `AllUsersCurrentHost`. El valor predeterminado es `CurrentUserAllHosts`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>SkipStartupScript</maml:name>
        <maml:description>
          <maml:para>Omitir agregar `Show-ColorScript` al perfil. Solo se agrega la línea `Import-Module ColorScripts-Enhanced`. Use esto si desea controlar manualmente cuándo se muestran los colorscripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Muestra qué sucedería si se ejecuta el cmdlet. El cmdlet no se ejecuta.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Devuelve un objeto personalizado con las siguientes propiedades:
- **ProfilePath** (string): La ruta completa al archivo de perfil modificado
- **Changed** (bool): Si el perfil fue realmente modificado
- **Message** (string): Un mensaje de estado que describe el resultado de la operación</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 o posterior

El archivo de perfil se crea automáticamente si no existe, incluyendo los directorios padre necesarios. Las importaciones duplicadas se detectan y suprimen a menos que se use `-Force`.

Si necesita permisos elevados para modificar un perfil de AllUsers, asegúrese de ejecutar PowerShell como Administrador.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>Agregar al perfil del usuario actual para todos los hosts (comportamiento predeterminado).</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Esto agrega tanto la importación del módulo como la llamada a `Show-ColorScript` a `$PROFILE.CurrentUserAllHosts`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>Agregar al perfil del usuario actual para el host actual únicamente, sin el script de inicio.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Scope CurrentUserCurrentHost -SkipStartupScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Esto agrega solo la línea `Import-Module ColorScripts-Enhanced` al perfil del host actual.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>Agregar a una ruta de perfil personalizada con expansión de variables de entorno.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Path "$env:USERPROFILE\Documents\CustomProfile.ps1"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Esto apunta a un archivo de perfil específico fuera de las ubicaciones estándar de perfiles de PowerShell.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>Forzar la re-adición del fragmento incluso si ya existe.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Esto agrega el fragmento nuevamente, incluso si el perfil ya contiene una declaración de importación para ColorScripts-Enhanced.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>Configuración en una nueva máquina - crear perfil si es necesario y agregar ColorScripts a todos los hosts.</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
$profileExists = Test-Path $PROFILE.CurrentUserAllHosts
if (-not $profileExists) {
    New-Item -Path $PROFILE.CurrentUserAllHosts -ItemType File -Force | Out-Null
}
Add-ColorScriptProfile -Scope CurrentUserAllHosts -Confirm:$false
Write-Host "¡Perfil configurado! Reinicia tu terminal para ver los colorscripts al inicio."
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>Agregar con un colorscript específico para mostrar (agregar manualmente después de este comando):</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -SkipStartupScript
# Luego editar manualmente $PROFILE para agregar:
# Show-ColorScript -Name mandelbrot-zoom
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>Verificar que el perfil se agregó correctamente:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile
Get-Content $PROFILE.CurrentUserAllHosts | Select-String "ColorScripts-Enhanced"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>Agregar a un alcance de perfil específico apuntando solo al host actual:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Solo para Windows Terminal o ConEmu
Add-ColorScriptProfile -Scope CurrentUserCurrentHost</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Para todos los hosts de PowerShell (ISE, VSCode, Consola)
Add-ColorScriptProfile -Scope CurrentUserAllHosts
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>Usando rutas relativas y expansión de tilde:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
# Usando expansión de tilde para el directorio home
Add-ColorScriptProfile -Path "~/Documents/PowerShell/profile.ps1"</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Usando ruta relativa del directorio actual
Add-ColorScriptProfile -Path ".\my-profile.ps1"
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>Mostrar un colorscript diferente diariamente agregando lógica personalizada:</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>```powershell
Add-ColorScriptProfile -SkipStartupScript
# Luego agregar esto a $PROFILE manualmente:
# $seed = (Get-Date).DayOfYear
# Get-Random -SetSeed $seed
# Show-ColorScript
```</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>./Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>./New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>./Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>GitHub Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Eliminar archivos de salida de colorescript en caché.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>El cmdlet `Clear-ColorScriptCache` elimina archivos de salida en caché generados por el módulo ColorScripts-Enhanced. Los archivos de caché almacenan la salida de script pre-renderizada para mejorar el rendimiento durante invocaciones posteriores.</maml:para>
      <maml:para>Puede eliminar archivos de caché de forma selectiva utilizando el parámetro `-Name` con patrones de comodín, o eliminar todos los archivos de caché a la vez con el parámetro `-All`. El cmdlet también admite el filtrado por `-Category` y `-Tag` para apuntar a subconjuntos específicos de scripts en caché.</maml:para>
      <maml:para>Los nombres de script no coincidentes reportan un estado `Missing` en los resultados. Use `-DryRun` para previsualizar acciones de eliminación sin modificar el sistema de archivos, y `-Path` para apuntar a un directorio de caché alternativo (útil para configuraciones de caché personalizadas o entornos CI/CD).</maml:para>
      <maml:para>Los archivos de caché se regeneran automáticamente la próxima vez que `Show-ColorScript` ejecute el script correspondiente.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Eliminar todos los archivos de caché en el directorio de destino. Este parámetro es mutuamente exclusivo con `-Name`, `-Category` y `-Tag`. Cuando se especifica, todos los parámetros de filtrado se ignoran y se borra todo el caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por categoría antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts que coincidan con las categorías especificadas. Acepta una matriz de nombres de categoría y se puede combinar con `-Tag` para un filtrado más preciso.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Solicita confirmación antes de ejecutar el cmdlet. De forma predeterminada, esto está habilitado para evitar la eliminación accidental de archivos de caché. Use `-Confirm:$false` para omitir la solicitud de confirmación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Previsualizar acciones de eliminación sin eliminar ningún archivo. El cmdlet mostrará qué archivos de caché se eliminarían pero no modificará el sistema de archivos. Esto es útil para verificar sus criterios de selección antes de confirmar la eliminación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Nombres o patrones de comodín que identifican archivos de caché para eliminar. Acepta entrada de canalización y enlace de propiedad de objetos con una propiedad `Name`. Los caracteres comodín (`*`, `?`) son compatibles para la coincidencia de patrones. Mutuamente exclusivo con `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Directorio de caché alternativo para operar. Por defecto, la ruta de caché estándar del módulo si no se especifica. Use este parámetro cuando trabaje con ubicaciones de caché personalizadas configuradas mediante la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, o al gestionar archivos de caché en directorios alternativos para pruebas o propósitos CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por etiqueta de metadatos antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts con etiquetas coincidentes. Acepta una matriz de nombres de etiqueta y se puede combinar con `-Category` para un control más granular sobre qué archivos de caché se apuntan.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si se ejecuta el cmdlet sin ejecutar realmente la operación. El cmdlet muestra las acciones que realizaría pero no modifica el sistema de archivos. Este es un parámetro común estándar de PowerShell que funciona de manera similar a `-DryRun` pero sigue las convenciones integradas de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Eliminar todos los archivos de caché en el directorio de destino. Este parámetro es mutuamente exclusivo con `-Name`, `-Category` y `-Tag`. Cuando se especifica, todos los parámetros de filtrado se ignoran y se borra todo el caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por categoría antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts que coincidan con las categorías especificadas. Acepta una matriz de nombres de categoría y se puede combinar con `-Tag` para un filtrado más preciso.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Solicita confirmación antes de ejecutar el cmdlet. De forma predeterminada, esto está habilitado para evitar la eliminación accidental de archivos de caché. Use `-Confirm:$false` para omitir la solicitud de confirmación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Previsualizar acciones de eliminación sin eliminar ningún archivo. El cmdlet mostrará qué archivos de caché se eliminarían pero no modificará el sistema de archivos. Esto es útil para verificar sus criterios de selección antes de confirmar la eliminación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Nombres o patrones de comodín que identifican archivos de caché para eliminar. Acepta entrada de canalización y enlace de propiedad de objetos con una propiedad `Name`. Los caracteres comodín (`*`, `?`) son compatibles para la coincidencia de patrones. Mutuamente exclusivo con `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Directorio de caché alternativo para operar. Por defecto, la ruta de caché estándar del módulo si no se especifica. Use este parámetro cuando trabaje con ubicaciones de caché personalizadas configuradas mediante la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, o al gestionar archivos de caché en directorios alternativos para pruebas o propósitos CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por etiqueta de metadatos antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts con etiquetas coincidentes. Acepta una matriz de nombres de etiqueta y se puede combinar con `-Category` para un control más granular sobre qué archivos de caché se apuntan.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si se ejecuta el cmdlet sin ejecutar realmente la operación. El cmdlet muestra las acciones que realizaría pero no modifica el sistema de archivos. Este es un parámetro común estándar de PowerShell que funciona de manera similar a `-DryRun` pero sigue las convenciones integradas de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Eliminar todos los archivos de caché en el directorio de destino. Este parámetro es mutuamente exclusivo con `-Name`, `-Category` y `-Tag`. Cuando se especifica, todos los parámetros de filtrado se ignoran y se borra todo el caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por categoría antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts que coincidan con las categorías especificadas. Acepta una matriz de nombres de categoría y se puede combinar con `-Tag` para un filtrado más preciso.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Solicita confirmación antes de ejecutar el cmdlet. De forma predeterminada, esto está habilitado para evitar la eliminación accidental de archivos de caché. Use `-Confirm:$false` para omitir la solicitud de confirmación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>DryRun</maml:name>
          <maml:description>
            <maml:para>Previsualizar acciones de eliminación sin eliminar ningún archivo. El cmdlet mostrará qué archivos de caché se eliminarían pero no modificará el sistema de archivos. Esto es útil para verificar sus criterios de selección antes de confirmar la eliminación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Nombres o patrones de comodín que identifican archivos de caché para eliminar. Acepta entrada de canalización y enlace de propiedad de objetos con una propiedad `Name`. Los caracteres comodín (`*`, `?`) son compatibles para la coincidencia de patrones. Mutuamente exclusivo con `-All`.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Directorio de caché alternativo para operar. Por defecto, la ruta de caché estándar del módulo si no se especifica. Use este parámetro cuando trabaje con ubicaciones de caché personalizadas configuradas mediante la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, o al gestionar archivos de caché en directorios alternativos para pruebas o propósitos CI/CD.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtrar los scripts de destino por etiqueta de metadatos antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts con etiquetas coincidentes. Acepta una matriz de nombres de etiqueta y se puede combinar con `-Category` para un control más granular sobre qué archivos de caché se apuntan.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si se ejecuta el cmdlet sin ejecutar realmente la operación. El cmdlet muestra las acciones que realizaría pero no modifica el sistema de archivos. Este es un parámetro común estándar de PowerShell que funciona de manera similar a `-DryRun` pero sigue las convenciones integradas de PowerShell.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Eliminar todos los archivos de caché en el directorio de destino. Este parámetro es mutuamente exclusivo con `-Name`, `-Category` y `-Tag`. Cuando se especifica, todos los parámetros de filtrado se ignoran y se borra todo el caché.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filtrar los scripts de destino por categoría antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts que coincidan con las categorías especificadas. Acepta una matriz de nombres de categoría y se puede combinar con `-Tag` para un filtrado más preciso.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Solicita confirmación antes de ejecutar el cmdlet. De forma predeterminada, esto está habilitado para evitar la eliminación accidental de archivos de caché. Use `-Confirm:$false` para omitir la solicitud de confirmación.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>DryRun</maml:name>
        <maml:description>
          <maml:para>Previsualizar acciones de eliminación sin eliminar ningún archivo. El cmdlet mostrará qué archivos de caché se eliminarían pero no modificará el sistema de archivos. Esto es útil para verificar sus criterios de selección antes de confirmar la eliminación.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Nombres o patrones de comodín que identifican archivos de caché para eliminar. Acepta entrada de canalización y enlace de propiedad de objetos con una propiedad `Name`. Los caracteres comodín (`*`, `?`) son compatibles para la coincidencia de patrones. Mutuamente exclusivo con `-All`.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Directorio de caché alternativo para operar. Por defecto, la ruta de caché estándar del módulo si no se especifica. Use este parámetro cuando trabaje con ubicaciones de caché personalizadas configuradas mediante la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`, o al gestionar archivos de caché en directorios alternativos para pruebas o propósitos CI/CD.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filtrar los scripts de destino por etiqueta de metadatos antes de evaluar las entradas de caché. Solo se considerarán para eliminación los archivos de caché de scripts con etiquetas coincidentes. Acepta una matriz de nombres de etiqueta y se puede combinar con `-Category` para un control más granular sobre qué archivos de caché se apuntan.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Muestra qué sucedería si se ejecuta el cmdlet sin ejecutar realmente la operación. El cmdlet muestra las acciones que realizaría pero no modifica el sistema de archivos. Este es un parámetro común estándar de PowerShell que funciona de manera similar a `-DryRun` pero sigue las convenciones integradas de PowerShell.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Puede canalizar nombres de script a este cmdlet. Cada nombre se evaluará para la eliminación de archivos de caché según los parámetros especificados.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Puede canalizar una matriz de nombres de script a este cmdlet. Esto es particularmente útil cuando se combina con `Get-ColorScriptList` para filtrar scripts por varios criterios antes de borrar sus cachés.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.Management.Automation.PSObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Puede canalizar objetos con una propiedad `Name` a este cmdlet. El cmdlet extraerá el valor de la propiedad `Name` y lo usará para identificar archivos de caché para eliminación.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Devuelve registros de estado para cada archivo de caché procesado. Cada objeto de salida contiene las siguientes propiedades:

- **Status**: El resultado de la operación (`Removed`, `Missing`, `DryRun` o `Error`)
- **CacheFile**: La ruta completa al archivo de caché que se procesó
- **Message**: Texto descriptivo que explica el resultado de la operación
- **ScriptName**: El nombre del script asociado con el archivo de caché</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author**: Nick
**Module**: ColorScripts-Enhanced

Los archivos de caché se almacenan con una extensión `.cache` en el directorio de caché del módulo. Cada archivo de caché corresponde a un solo colorescript y contiene la salida ANSI pre-renderizada.

Los archivos de caché se regeneran automáticamente la próxima vez que `Show-ColorScript` ejecute el script correspondiente. Esta regeneración ocurre de manera transparente y no requiere intervención manual.

La ruta de caché predeterminada se expone a través de la variable `$CacheDir` del módulo y se puede anular usando la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH`.

Cuando se usa `-DryRun` o `-WhatIf`, el cmdlet aún validará que el directorio de caché exista y reportará cualquier problema, pero no realizará eliminaciones.

El filtrado por `-Category` o `-Tag` requiere que los scripts tengan metadatos asociados. Los scripts sin metadatos no coincidirán con estos filtros.

### Best Practices

- Siempre use `-DryRun` o `-WhatIf` antes de operaciones destructivas
- Use `-Confirm:$false` solo cuando esté seguro de la operación
- Archive el caché antes de operaciones de limpieza importantes para recuperación
- Monitoree el espacio en disco regularmente para el crecimiento del caché
- Use limpieza selectiva en lugar de borrado completo cuando sea posible
- Mantenga un registro de scripts críticos que no deberían borrarse
- Programe limpiezas automatizadas durante ventanas de mantenimiento
- Pruebe operaciones de limpieza en no producción primero

### Troubleshooting

- **"No cache files found"**: Use `-AsObject` para verificar qué scripts tienen cachés
- **"Permission denied"**: Verifique el acceso de escritura al directorio de caché
- **"Cache not regenerating"**: Los scripts pueden tener problemas de renderizado; pruebe con `-NoCache`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -All -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Elimina todos los archivos de caché en el directorio de caché predeterminado sin solicitar confirmación. Esto es útil para refrescar completamente el caché después de actualizaciones del módulo o al solucionar problemas de visualización.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'aurora-*' -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Previsualiza qué archivos de caché con tema aurora se eliminarían sin eliminarlos realmente. La salida muestra los archivos de caché que coinciden con el patrón, permitiendo verificar la selección antes de confirmar la eliminación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name bars -Path $env:TEMP -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Borra el archivo de caché para el script 'bars' desde un directorio de caché personalizado ubicado en la carpeta TEMP. Esto es útil cuando se trabaja con la variable de entorno `COLOR_SCRIPTS_ENHANCED_CACHE_PATH` o probando ubicaciones de caché alternativas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Category Animation -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra qué sucedería si se eliminaran todos los archivos de caché para scripts en la categoría Animation. El parámetro `-WhatIf` evita la eliminación real y muestra las acciones previstas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Tag retro | Clear-ColorScriptCache -DryRun
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Utiliza entrada de canalización para previsualizar la eliminación de archivos de caché para todos los scripts etiquetados como 'retro'. Combina el filtrado por etiqueta con una previsualización de ejecución en seco antes de confirmar la eliminación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name 'test-*', 'demo-*' -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Elimina archivos de caché para todos los scripts cuyos nombres comiencen con 'test-' o 'demo-' sin confirmación. Se pueden especificar múltiples patrones de comodín como una matriz.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Limpiar caché y reconstruir para optimización
Clear-ColorScriptCache -All -Confirm:$false
New-ColorScriptCache -PassThru | Measure-Object
Write-Host "Caché reconstruido exitosamente"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Realiza un refresco completo del caché eliminando todo y reconstruyendo, luego muestra estadísticas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Borrar entradas de caché antiguas de más de 30 días
$cacheDir = "$env:APPDATA\ColorScripts-Enhanced\cache"
$thirtyDaysAgo = (Get-Date).AddDays(-30)
Get-ChildItem $cacheDir -Filter "*.cache" |
    Where-Object { $_.LastWriteTime -lt $thirtyDaysAgo } |
    ForEach-Object {
        Clear-ColorScriptCache -Name $_.BaseName -Confirm:$false
    }
Write-Host "Archivos de caché antiguos limpiados"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Elimina archivos de caché que no se han actualizado en más de 30 días.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Informe de gestión de caché
$cacheDir = "$env:APPDATA\ColorScripts-Enhanced\cache"
$beforeCount = @(Get-ChildItem $cacheDir -Filter "*.cache" -ErrorAction SilentlyContinue).Count
Clear-ColorScriptCache -Category Geometric -Confirm:$false
$afterCount = @(Get-ChildItem $cacheDir -Filter "*.cache" -ErrorAction SilentlyContinue).Count
Write-Host "Borrados $($beforeCount - $afterCount) archivos de caché geométricos"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra estadísticas sobre operaciones de borrado de caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Solución de problemas - borrar y reconstruir script específico
$scriptName = "mandelbrot-zoom"
Clear-ColorScriptCache -Name $scriptName -Confirm:$false
New-ColorScriptCache -Name $scriptName -Force
Show-ColorScript -Name $scriptName
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Borra y reconstruye el caché para un script único, luego lo muestra para verificación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Filtrar por múltiples categorías
Clear-ColorScriptCache -Category Geometric,Abstract -DryRun |
    Select-Object CacheFile |
    Measure-Object
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra cuántos archivos de caché se eliminarían si se filtra por múltiples categorías.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Export-ColorScriptMetadata</command:name>
      <maml:description>
        <maml:para>Exporta metadatos completos para todos los colorescripts a formato JSON o emite objetos estructurados al pipeline.</maml:para>
      </maml:description>
      <command:verb>Export</command:verb>
      <command:noun>ColorScriptMetadata</command:noun>
    </command:details>
    <maml:description>
      <maml:para>El cmdlet `Export-ColorScriptMetadata` compila un inventario completo de todos los colorescripts en el catálogo del módulo y genera un conjunto de datos estructurado que describe cada entrada. Estos metadatos incluyen información esencial como nombres de scripts, categorías, etiquetas y enriquecimientos opcionales.</maml:para>
      <maml:para>Por defecto, el cmdlet devuelve objetos de PowerShell al pipeline. Cuando se proporciona el parámetro `-Path`, escribe los metadatos como JSON formateado en el archivo especificado, creando automáticamente los directorios padre si no existen.</maml:para>
      <maml:para>El cmdlet ofrece dos indicadores opcionales de enriquecimiento: - **IncludeFileInfo**: Agrega metadatos del sistema de archivos incluyendo rutas completas, tamaños de archivo (en bytes) y marcas de tiempo de última modificación - **IncludeCacheInfo**: Agrega información relacionada con la caché incluyendo rutas de archivos de caché, estado de existencia y marcas de tiempo de caché</maml:para>
      <maml:para>Este cmdlet es particularmente útil para: - Crear documentación o dashboards que muestren todos los colorescripts disponibles - Analizar la cobertura de caché e identificar scripts que necesiten reconstrucción de caché - Alimentar metadatos a herramientas externas o automatizaciones de pipelines - Auditar el inventario de colorescripts y el estado del sistema de archivos - Generar informes sobre el uso y organización de colorescripts</maml:para>
      <maml:para>La salida se ordena de manera consistente, lo que la hace adecuada para control de versiones y operaciones de diff cuando se exporta a JSON.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Aumenta cada registro con metadatos de caché, incluyendo la ruta del archivo de caché, si existe un archivo de caché y su marca de tiempo de última modificación. Esto es útil para identificar scripts que pueden necesitar regeneración de caché o analizar la cobertura de caché en la biblioteca de colorescripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Incluye detalles del sistema de archivos (ruta completa, tamaño en bytes y hora de última escritura) en cada registro. Cuando los metadatos del archivo no se pueden leer (debido a permisos o archivos faltantes), los errores se registran a través de salida detallada y las propiedades afectadas se establecen en valores nulos. Este interruptor es valioso para auditar tamaños de archivos y fechas de modificación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve los objetos de metadatos al pipeline incluso cuando se especifica el parámetro `-Path`. Esto permite guardar los metadatos en un archivo y realizar procesamiento o filtrado adicional en los objetos en un solo comando. Sin este interruptor, especificar `-Path` suprime la salida del pipeline.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Especifica la ruta del archivo de destino para la exportación JSON. Soporta rutas relativas, absolutas, variables de entorno (ej. `$env:TEMP\metadata.json`) y expansión de tilde (ej. `~/Documents/metadata.json`). Los directorios padre se crean automáticamente si no existen. Cuando se omite este parámetro, el cmdlet genera objetos directamente al pipeline en lugar de escribir en un archivo. La salida JSON se formatea con sangría para legibilidad.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeCacheInfo</maml:name>
          <maml:description>
            <maml:para>Aumenta cada registro con metadatos de caché, incluyendo la ruta del archivo de caché, si existe un archivo de caché y su marca de tiempo de última modificación. Esto es útil para identificar scripts que pueden necesitar regeneración de caché o analizar la cobertura de caché en la biblioteca de colorescripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>IncludeFileInfo</maml:name>
          <maml:description>
            <maml:para>Incluye detalles del sistema de archivos (ruta completa, tamaño en bytes y hora de última escritura) en cada registro. Cuando los metadatos del archivo no se pueden leer (debido a permisos o archivos faltantes), los errores se registran a través de salida detallada y las propiedades afectadas se establecen en valores nulos. Este interruptor es valioso para auditar tamaños de archivos y fechas de modificación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve los objetos de metadatos al pipeline incluso cuando se especifica el parámetro `-Path`. Esto permite guardar los metadatos en un archivo y realizar procesamiento o filtrado adicional en los objetos en un solo comando. Sin este interruptor, especificar `-Path` suprime la salida del pipeline.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Especifica la ruta del archivo de destino para la exportación JSON. Soporta rutas relativas, absolutas, variables de entorno (ej. `$env:TEMP\metadata.json`) y expansión de tilde (ej. `~/Documents/metadata.json`). Los directorios padre se crean automáticamente si no existen. Cuando se omite este parámetro, el cmdlet genera objetos directamente al pipeline en lugar de escribir en un archivo. La salida JSON se formatea con sangría para legibilidad.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeCacheInfo</maml:name>
        <maml:description>
          <maml:para>Aumenta cada registro con metadatos de caché, incluyendo la ruta del archivo de caché, si existe un archivo de caché y su marca de tiempo de última modificación. Esto es útil para identificar scripts que pueden necesitar regeneración de caché o analizar la cobertura de caché en la biblioteca de colorescripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>IncludeFileInfo</maml:name>
        <maml:description>
          <maml:para>Incluye detalles del sistema de archivos (ruta completa, tamaño en bytes y hora de última escritura) en cada registro. Cuando los metadatos del archivo no se pueden leer (debido a permisos o archivos faltantes), los errores se registran a través de salida detallada y las propiedades afectadas se establecen en valores nulos. Este interruptor es valioso para auditar tamaños de archivos y fechas de modificación.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Devuelve los objetos de metadatos al pipeline incluso cuando se especifica el parámetro `-Path`. Esto permite guardar los metadatos en un archivo y realizar procesamiento o filtrado adicional en los objetos en un solo comando. Sin este interruptor, especificar `-Path` suprime la salida del pipeline.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Especifica la ruta del archivo de destino para la exportación JSON. Soporta rutas relativas, absolutas, variables de entorno (ej. `$env:TEMP\metadata.json`) y expansión de tilde (ej. `~/Documents/metadata.json`). Los directorios padre se crean automáticamente si no existen. Cuando se omite este parámetro, el cmdlet genera objetos directamente al pipeline en lugar de escribir en un archivo. La salida JSON se formatea con sangría para legibilidad.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cuando `-Path` no se especifica, o cuando se usa `-PassThru`, el cmdlet devuelve objetos personalizados. Cada objeto representa un solo colorscript con las siguientes propiedades base:

- **Name**: El nombre del archivo del colorscript sin extensión
- **Category**: La categoría organizacional (ej. "nature", "abstract", "geometric")
- **Tags**: Una matriz de etiquetas descriptivas para filtrado y búsqueda

Cuando se especifica `-IncludeFileInfo`, se incluyen estas propiedades adicionales:

- **FilePath**: La ruta completa del sistema de archivos al archivo de script
- **FileSize**: Tamaño en bytes (nulo si el archivo es inaccesible)
- **LastWriteTime**: Marca de tiempo de última modificación (nulo si no está disponible)

Cuando se especifica `-IncludeCacheInfo`, se incluyen estas propiedades adicionales:

- **CachePath**: La ruta completa al archivo de caché correspondiente
- **CacheExists**: Booleano que indica si existe un archivo de caché
- **CacheLastWriteTime**: Marca de tiempo de modificación del archivo de caché (nulo si la caché no existe)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Performance Considerations:**
- Agregar `-IncludeFileInfo` o `-IncludeCacheInfo` requiere operaciones de I/O del sistema de archivos y puede impactar el rendimiento al procesar bibliotecas grandes de colorescripts.
- Para exportaciones grandes, considere usar `-PassThru` con filtrado de pipeline en lugar de cargar todo en memoria
- Las operaciones de exportación escalan linealmente con el conteo de scripts

**Cache Directory Management:**
- La recopilación de metadatos de caché asegura que el directorio de caché exista antes de intentar leer archivos de caché.
- Cuando los archivos de caché faltan o no están disponibles, la propiedad `CacheExists` se establece en `false` y `CacheLastWriteTime` se establece en null.

**Error Handling:**
- Los errores de lectura de metadatos de archivo se reportan a través de salida detallada (`-Verbose`) en lugar de terminar el cmdlet.
- Los errores de archivos individuales resultan en valores nulos para las propiedades afectadas mientras permiten que el cmdlet continúe procesando los colorescripts restantes.

**JSON Output Format:**
- Los archivos JSON se escriben con sangría (profundidad 2) para legibilidad humana.
- La codificación de salida es UTF-8 para máxima compatibilidad.
- Los archivos existentes en la ruta de destino se sobrescriben sin preguntar.

**Best Practices:**
- Programe exportaciones regulares de metadatos para auditoría
- Versione sus exportaciones de metadatos con marcas de tiempo
- Use `-PassThru` para exportación de archivos y procesamiento de pipeline
- Almacene copias de seguridad en sistemas de control de versiones o respaldo
- Monitoree el crecimiento del tamaño de archivo de exportación con el tiempo

**Use Cases:**
- Integración con pipelines de CI/CD para generación de documentación
- Construcción de dashboards web o endpoints de API que sirvan metadatos de colorescripts
- Creación de informes de inventario para colecciones grandes de colorescripts
- Identificación de scripts que requieren regeneración de caché
- Seguimiento de cambios y mantenimiento de registros de auditoría</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Exporta metadatos básicos para todos los colorescripts al pipeline sin información de archivo o caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Devuelve objetos que incluyen detalles del sistema de archivos (ruta completa, tamaño y hora de última escritura) para cada colorscript.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera un archivo JSON que contiene metadatos básicos y lo escribe en el directorio `dist`, creando la carpeta si no existe.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -IncludeFileInfo -IncludeCacheInfo
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera un archivo JSON completo con metadatos enriquecidos incluyendo tanto información del sistema de archivos como de caché, escribiéndolo en el directorio `dist`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path './dist/colorscripts.json' -PassThru | Where-Object { -not $_.CacheExists }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Escribe el archivo de metadatos y también devuelve los objetos al pipeline, permitiendo consultas que identifiquen scripts sin archivos de caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -IncludeFileInfo | Group-Object Category | Select-Object Name, Count
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Agrupa los colorescripts por categoría y muestra recuentos, útil para analizar la distribución de scripts en categorías.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$metadata = Export-ColorScriptMetadata -IncludeFileInfo
$totalSize = ($metadata | Measure-Object -Property FileSize -Sum).Sum
Write-Host "Total size of all colorscripts: $($totalSize / 1KB) KB"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Calcula el espacio total en disco utilizado por todos los archivos de colorscript.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Generate statistics and save report
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$stats = @{
    TotalScripts = $metadata.Count
    Categories = ($metadata | Select-Object -ExpandProperty Category -Unique).Count
    CachedScripts = ($metadata | Where-Object CacheExists).Count
    TotalFileSize = ($metadata | Measure-Object FileSize -Sum).Sum
    TotalCacheSize = ($metadata | Where-Object CacheExists |
        Measure-Object CacheFileSize -Sum).Sum
}
$stats | ConvertTo-Json | Out-File "./colorscripts-stats.json"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera un informe de estadísticas completo incluyendo cobertura de caché y tamaños.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export and compare with previous backup
$current = Export-ColorScriptMetadata -Path "./current-metadata.json" -IncludeFileInfo -PassThru
$previous = Get-Content "./previous-metadata.json" | ConvertFrom-Json
$new = $current | Where-Object { $_.Name -notin $previous.Name }
$removed = $previous | Where-Object { $_.Name -notin $current.Name }
Write-Host "New scripts: $($new.Count) | Removed scripts: $($removed.Count)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Compara los metadatos actuales con una versión anterior para identificar cambios.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build API response for web dashboard
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$apiResponse = @{
    version = (Get-Module ColorScripts-Enhanced | Select-Object Version).Version.ToString()
    timestamp = (Get-Date -Format 'o')
    count = $metadata.Count
    scripts = $metadata
} | ConvertTo-Json -Depth 5
$apiResponse | Out-File "./api/colorscripts.json" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera JSON listo para API con información de versionado y marca de tiempo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find scripts with missing cache for batch rebuild
$metadata = Export-ColorScriptMetadata -IncludeCacheInfo -AsObject
$uncached = $metadata | Where-Object { -not $_.CacheExists } | Select-Object -ExpandProperty Name
if ($uncached.Count -gt 0) {
    Write-Host "Rebuilding cache for $($uncached.Count) scripts..."
    New-ColorScriptCache -Name $uncached
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifica y reconstruye la caché para scripts que no tienen archivos de caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create HTML gallery from metadata
$metadata = Export-ColorScriptMetadata -IncludeFileInfo
$html = @"
&lt;html&gt;
&lt;head&gt;&lt;title&gt;ColorScripts-Enhanced Gallery&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;ColorScripts-Enhanced&lt;/h1&gt;
&lt;ul&gt;
"@
foreach ($script in $metadata) {
    $html += "&lt;li&gt;&lt;strong&gt;$($script.Name)&lt;/strong&gt; [$($script.Category)]&lt;/li&gt;`n"
}
$html += "&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;"
$html | Out-File "./gallery.html" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea una página de galería HTML que lista todos los colorescripts disponibles.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Monitor script sizes over time
Export-ColorScriptMetadata -Path "./logs/metadata-$(Get-Date -Format 'yyyyMMdd').json" -IncludeFileInfo
Get-ChildItem "./logs/metadata-*.json" | Select-Object -Last 5 |
    ForEach-Object { Get-Content $_ | ConvertFrom-Json } |
    Group-Object { $_.Name } |
    ForEach-Object { Write-Host "$($_.Name): $(($_.Group | Measure-Object FileSize -Average).Average) bytes avg" }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Realiza un seguimiento de los cambios de tamaño de archivo para scripts individuales en múltiples exportaciones.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Recupera la configuración actual del módulo ColorScripts-Enhanced.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Get-ColorScriptConfiguration` recupera la configuración efectiva del módulo, que controla varios aspectos del comportamiento de ColorScripts-Enhanced. Esto incluye:</maml:para>
      <maml:para>- **Cache Settings**: Ubicación donde se almacenan metadatos de scripts e índices para optimización del rendimiento - **Startup Behavior**: Indicadores que controlan si los scripts se ejecutan automáticamente al iniciar sesiones de PowerShell - **Path Configuration**: Directorios de scripts personalizados y rutas de búsqueda - **Display Preferences**: Opciones de formato y salida predeterminadas</maml:para>
      <maml:para>La configuración se ensambla desde múltiples fuentes en orden de precedencia: 1. Valores predeterminados integrados del módulo (prioridad más baja) 2. Anulaciones de usuario persistidas desde el archivo de configuración 3. Modificaciones específicas de sesión (prioridad más alta)</maml:para>
      <maml:para>El archivo de configuración se encuentra típicamente en `%APPDATA%\ColorScripts-Enhanced\config.json` en Windows o `~/.config/ColorScripts-Enhanced/config.json` en sistemas similares a Unix.</maml:para>
      <maml:para>La tabla hash devuelta es una instantánea del estado actual de la configuración y puede inspeccionarse, clonarse o serializarse de forma segura sin afectar la configuración activa.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptConfiguration</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Devuelve una tabla hash anidada que contiene la siguiente estructura:

- **Cache** (Hashtable): Configuraciones relacionadas con el caché
  - **Location** (String): Ruta al directorio de caché
  - **Enabled** (Boolean): Si el caché está activo
- **Startup** (Hashtable): Configuraciones de comportamiento de inicio
  - **Enabled** (Boolean): Si los scripts se ejecutan al inicio de sesión
  - **ScriptName** (String): Nombre del script de inicio predeterminado
- **Paths** (Array): Rutas de búsqueda de scripts adicionales
- **Display** (Hashtable): Preferencias de formato de salida</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Module Initialization**: La configuración se inicializa automáticamente cuando se carga el módulo ColorScripts-Enhanced. Este cmdlet recupera el estado actual de la configuración en memoria.

**No Modifications**: Llamar a este cmdlet es de solo lectura y no modifica ninguna configuración persistida o activa.

**Thread Safety**: La tabla hash devuelta es una copia de la configuración, lo que la hace segura para acceso concurrente y modificación sin afectar el estado interno del módulo.

**Performance**: La recuperación de configuración es ligera y adecuada para llamadas frecuentes, ya que devuelve la configuración en memoria cacheada en lugar de leer desde disco.

**Configuration File Format**: La configuración persistida utiliza formato JSON con codificación UTF-8. La edición manual es compatible pero no recomendada; use `Set-ColorScriptConfiguration` en su lugar.

### Best Practices

- Consulta la configuración una vez y reutiliza el resultado
- Valida la configuración antes de usar valores
- Monitorea la configuración para detectar desviaciones a lo largo del tiempo
- Mantén copias de seguridad de configuración en control de versiones
- Documenta cualquier personalización realizada a la configuración
- Prueba cambios de configuración en entornos no productivos primero
- Usa registros de auditoría de configuración para cumplimiento</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra la configuración actual utilizando la vista de tabla predeterminada, mostrando todas las configuraciones de caché y inicio.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | ConvertTo-Json -Depth 4
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Serializa la configuración a formato JSON para registro, depuración o exportación a otras herramientas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
$config.Cache.Location
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Recupera la configuración y accede a la ruta de ubicación del caché directamente desde la tabla hash.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
if ($config.Startup.Enabled) {
    Write-Host "Startup scripts are enabled"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Verifica si los scripts de inicio están habilitados en la configuración actual.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptConfiguration | Format-List *
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra todas las propiedades de configuración en un formato de lista detallada para inspección completa.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
Write-Host "Cache Path: $($config.Cache.Path)"
Write-Host "Profile Auto-Show: $($config.Startup.ProfileAutoShow)"
Write-Host "Default Script: $($config.Startup.DefaultScript)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Extrae y muestra propiedades específicas de configuración para auditoría o scripting.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$config = Get-ColorScriptConfiguration
if ($config.Cache.Path) {
    Write-Host "Custom cache path configured: $($config.Cache.Path)"
} else {
    Write-Host "Using default cache path"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Determina si se configura una ruta de caché personalizada versus usar valores predeterminados del módulo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata | ConvertTo-Json -Depth 5 |
    Out-File -FilePath "./backup-config.json" -Encoding UTF8
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Hace una copia de seguridad de la configuración actual a un archivo JSON para archivado o recuperación de desastres.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Compare current config with defaults
$current = Get-ColorScriptConfiguration
Reset-ColorScriptConfiguration -WhatIf
# Review the -WhatIf output to see what would change
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Compara la configuración actual con los valores predeterminados del módulo para identificar configuraciones personalizadas.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Monitor configuration changes across sessions
Get-ColorScriptConfiguration |
    Select-Object Cache, Startup |
    Format-List |
    Out-File "./config-snapshot.txt" -Append
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea instantáneas con marca de tiempo de la configuración para rastrear cambios a lo largo del tiempo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptList</command:name>
      <maml:description>
        <maml:para>Lista los colorescripts disponibles con filtrado opcional y salida de metadatos rica.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptList</command:noun>
    </command:details>
    <maml:description>
      <maml:para>El cmdlet `Get-ColorScriptList` recupera y muestra todos los colorescripts empaquetados con el módulo ColorScripts-Enhanced. Proporciona opciones de filtrado flexibles y múltiples formatos de salida para adaptarse a diferentes casos de uso.</maml:para>
      <maml:para>Por defecto, el cmdlet muestra una tabla formateada concisa que muestra los nombres de los scripts y las categorías. El interruptor `-Detailed` expande esta vista para incluir etiquetas y descripciones, proporcionando más contexto de un vistazo.</maml:para>
      <maml:para>Para escenarios de automatización y programáticos, el parámetro `-AsObject` devuelve los registros de metadatos sin procesar como objetos PowerShell, permitiendo un procesamiento adicional a través de la canalización. Estos registros incluyen información completa como nombre, categoría, categorías, etiquetas, descripción y la propiedad de metadatos original.</maml:para>
      <maml:para>Las capacidades de filtrado le permiten reducir la lista por: - **Name**: Soporta patrones de comodín (ej., `aurora-*`) para coincidencia flexible - **Category**: Filtrar por uno o más nombres de categoría (sin distinción de mayúsculas y minúsculas) - **Tag**: Filtrar por etiquetas de metadatos como "Recommended" o "Animated" (sin distinción de mayúsculas y minúsculas)</maml:para>
      <maml:para>El cmdlet valida los patrones de filtro y genera advertencias para cualquier patrón de nombre no coincidente, ayudándole a identificar posibles errores tipográficos o scripts faltantes.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Devuelve objetos de registro de metadatos sin procesar en lugar de renderizar una tabla formateada al host. Esto permite el procesamiento de canalización y la manipulación programática de los metadatos de colorescript.</maml:para>
            <maml:para>Cuando se especifica este interruptor, puede usar cmdlets estándar de PowerShell como `Where-Object`, `Select-Object`, `Sort-Object` y `ForEach-Object` para procesar aún más los resultados.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtra la lista para incluir solo scripts pertenecientes a una o más categorías especificadas. La coincidencia de categoría no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Las categorías comunes incluyen: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, y más. Puede especificar múltiples categorías para ampliar su búsqueda.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Incluye columnas adicionales (etiquetas y descripción) al renderizar la vista de tabla formateada. Esto proporciona información más completa sobre cada script de un vistazo.</maml:para>
            <maml:para>Sin este interruptor, solo se muestran el nombre y la categoría primaria en la salida de tabla.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filtra la lista de colorescripts por uno o más nombres de script. Soporta caracteres comodín (`*` y `?`) para coincidencia de patrones flexible.</maml:para>
            <maml:para>Si un patrón especificado no coincide con ningún script, se genera una advertencia para ayudar a identificar posibles problemas. La coincidencia de nombre no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Puede especificar nombres exactos o usar patrones como `aurora-*` para coincidir con múltiples scripts relacionados.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtra la lista para incluir solo scripts que contengan una o más etiquetas de metadatos especificadas. La coincidencia de etiqueta no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Las etiquetas comunes incluyen: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, y más. Las etiquetas ayudan a categorizar scripts por estilo visual, complejidad o caso de uso.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Devuelve objetos de registro de metadatos sin procesar en lugar de renderizar una tabla formateada al host. Esto permite el procesamiento de canalización y la manipulación programática de los metadatos de colorescript.</maml:para>
            <maml:para>Cuando se especifica este interruptor, puede usar cmdlets estándar de PowerShell como `Where-Object`, `Select-Object`, `Sort-Object` y `ForEach-Object` para procesar aún más los resultados.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filtra la lista para incluir solo scripts pertenecientes a una o más categorías especificadas. La coincidencia de categoría no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Las categorías comunes incluyen: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, y más. Puede especificar múltiples categorías para ampliar su búsqueda.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Detailed</maml:name>
          <maml:description>
            <maml:para>Incluye columnas adicionales (etiquetas y descripción) al renderizar la vista de tabla formateada. Esto proporciona información más completa sobre cada script de un vistazo.</maml:para>
            <maml:para>Sin este interruptor, solo se muestran el nombre y la categoría primaria en la salida de tabla.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Filtra la lista de colorescripts por uno o más nombres de script. Soporta caracteres comodín (`*` y `?`) para coincidencia de patrones flexible.</maml:para>
            <maml:para>Si un patrón especificado no coincide con ningún script, se genera una advertencia para ayudar a identificar posibles problemas. La coincidencia de nombre no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Puede especificar nombres exactos o usar patrones como `aurora-*` para coincidir con múltiples scripts relacionados.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filtra la lista para incluir solo scripts que contengan una o más etiquetas de metadatos especificadas. La coincidencia de etiqueta no distingue mayúsculas y minúsculas.</maml:para>
            <maml:para>Las etiquetas comunes incluyen: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, y más. Las etiquetas ayudan a categorizar scripts por estilo visual, complejidad o caso de uso.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsObject</maml:name>
        <maml:description>
          <maml:para>Devuelve objetos de registro de metadatos sin procesar en lugar de renderizar una tabla formateada al host. Esto permite el procesamiento de canalización y la manipulación programática de los metadatos de colorescript.</maml:para>
          <maml:para>Cuando se especifica este interruptor, puede usar cmdlets estándar de PowerShell como `Where-Object`, `Select-Object`, `Sort-Object` y `ForEach-Object` para procesar aún más los resultados.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filtra la lista para incluir solo scripts pertenecientes a una o más categorías especificadas. La coincidencia de categoría no distingue mayúsculas y minúsculas.</maml:para>
          <maml:para>Las categorías comunes incluyen: Patterns, Geometric, Abstract, Nature, Animated, Text, Retro, y más. Puede especificar múltiples categorías para ampliar su búsqueda.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Detailed</maml:name>
        <maml:description>
          <maml:para>Incluye columnas adicionales (etiquetas y descripción) al renderizar la vista de tabla formateada. Esto proporciona información más completa sobre cada script de un vistazo.</maml:para>
          <maml:para>Sin este interruptor, solo se muestran el nombre y la categoría primaria en la salida de tabla.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Filtra la lista de colorescripts por uno o más nombres de script. Soporta caracteres comodín (`*` y `?`) para coincidencia de patrones flexible.</maml:para>
          <maml:para>Si un patrón especificado no coincide con ningún script, se genera una advertencia para ayudar a identificar posibles problemas. La coincidencia de nombre no distingue mayúsculas y minúsculas.</maml:para>
          <maml:para>Puede especificar nombres exactos o usar patrones como `aurora-*` para coincidir con múltiples scripts relacionados.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filtra la lista para incluir solo scripts que contengan una o más etiquetas de metadatos especificadas. La coincidencia de etiqueta no distingue mayúsculas y minúsculas.</maml:para>
          <maml:para>Las etiquetas comunes incluyen: Recommended, Animated, Colorful, Minimal, Retro, Complex, Simple, y más. Las etiquetas ayudan a categorizar scripts por estilo visual, complejidad o caso de uso.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de canalización.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cuando se especifica `-AsObject`, devuelve objetos de registro de metadatos de colorescript con las siguientes propiedades:
- **Name**: El identificador de script usado con `Show-ColorScript`
- **Category**: La categoría primaria del script
- **Categories**: Una matriz de todas las categorías a las que pertenece el script
- **Tags**: Una matriz de etiquetas de metadatos que describen el script
- **Description**: Una descripción legible por humanos de la salida visual del script
- **Metadata**: El objeto de metadatos original que contiene toda la información sin procesar del script

Sin `-AsObject`, el cmdlet escribe una tabla formateada al host mientras aún devuelve los objetos de registro para procesamiento potencial de canalización.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author**: Nick
**Module**: ColorScripts-Enhanced
**Version**: 1.0

Los registros de metadatos devueltos proporcionan información completa para fines de visualización y automatización. La propiedad `Name` se puede usar directamente con el cmdlet `Show-ColorScript` para ejecutar scripts específicos.

Todas las operaciones de filtrado (Name, Category, Tag) no distinguen mayúsculas y minúsculas y se pueden combinar para crear consultas poderosas. Al usar comodines en el parámetro `-Name`, los patrones no coincidentes generan advertencias para ayudar con la resolución de problemas.

Para mejores resultados al integrar colorescripts en su perfil de PowerShell, use el filtro `-Tag Recommended` para identificar scripts curados adecuados para la visualización de inicio.

### Best Practices

- Siempre use `-AsObject` cuando necesite filtrar o manipular resultados programáticamente
- Use `-Detailed` cuando explore interactivamente para ver etiquetas y descripciones
- Combine múltiples filtros para consultas precisas
- Exporte metadatos periódicamente para rastrear cambios con el tiempo
- Use objetos de resultado para automatización en lugar de analizar salida de texto
- Considere el rendimiento al ejecutar consultas repetidamente (almacene en caché resultados si es posible)
- Aproveche Group-Object para análisis y reportes
- Use Where-Object para lógica de filtrado compleja</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra todos los colorescripts disponibles en un formato de tabla compacta mostrando el nombre y la categoría de cada script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra todos los colorescripts con columnas adicionales incluyendo etiquetas y descripciones para una visión general completa.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Detailed -Category Patterns
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra solo los scripts en la categoría "Patterns" con metadatos completos incluyendo etiquetas y descripciones.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Name 'aurora-*' | Select-Object Name, Tags
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Devuelve objetos estructurados para cada script cuyo nombre coincide con el patrón de comodín, luego selecciona solo las propiedades Name y Tags para mostrar.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Tag Recommended | Sort-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Recupera todos los scripts etiquetados como "Recommended" y los ordena alfabéticamente por nombre. Útil para encontrar scripts curados adecuados para la integración de perfil.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject -Category Geometric,Abstract | Where-Object { $_.Tags -contains 'Colorful' }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Combina el filtrado de categoría y etiqueta para encontrar scripts que están tanto en las categorías Geometric o Abstract como etiquetados como Colorful.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Name blocks,pipes,matrix -AsObject | ForEach-Object { Show-ColorScript -Name $_.Name }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Recupera scripts nombrados específicos y ejecuta cada uno en secuencia, demostrando la integración de canalización con `Show-ColorScript`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Count scripts by category for inventory purposes
Get-ColorScriptList -AsObject |
    Group-Object Category |
    Select-Object Name, Count |
    Sort-Object Count -Descending
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Proporciona un resumen de cuántos colorescripts existen en cada categoría.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find scripts with specific keywords in description
$scripts = Get-ColorScriptList -AsObject
$scripts |
    Where-Object { $_.Description -match 'fractal|mandelbrot' } |
    Select-Object Name, Category, Description
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Busca scripts basados en el contenido de su descripción usando coincidencia de patrones.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export to CSV for external tool processing
Get-ColorScriptList -AsObject -Detailed |
    Select-Object Name, Category, Tags, Description |
    Export-Csv -Path "./colorscripts-inventory.csv" -NoTypeInformation
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Exporta el inventario completo de colorescripts a formato CSV para uso en aplicaciones de hoja de cálculo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Check for scripts without specific category
$allScripts = Get-ColorScriptList -AsObject
$uncategorized = $allScripts | Where-Object { -not $_.Category }
Write-Host "Uncategorized scripts: $($uncategorized.Count)"
$uncategorized | Select-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifica scripts que carecen de metadatos de categoría.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build cache for filtered scripts
Get-ColorScriptList -Tag Recommended -AsObject |
    ForEach-Object {
        New-ColorScriptCache -Name $_.Name -PassThru
    } |
    Format-Table Name, Status
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché solo los scripts recomendados y muestra los resultados de la operación de almacenamiento en caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create a formatted report of all geometric scripts
Get-ColorScriptList -Category Geometric -Detailed |
    Out-String |
    Tee-Object -FilePath "./geometric-report.txt"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera y guarda un informe detallado de colorescripts de categoría geométrica en un archivo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 14 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find the first script matching a pattern for quick display
$script = Get-ColorScriptList -Name "aurora-*" -AsObject | Select-Object -First 1
if ($script) {
    Show-ColorScript -Name $script.Name -PassThru
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra rápidamente el primer script coincidente basado en un patrón de comodín.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 15 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verify all referenced scripts exist before running automation
$requiredScripts = @("bars", "arch", "mandelbrot-zoom")
$available = Get-ColorScriptList -AsObject | Select-Object -ExpandProperty Name
$missing = $requiredScripts | Where-Object { $_ -notin $available }
if ($missing) {
    Write-Warning "Missing scripts: $($missing -join ', ')"
} else {
    Write-Host "All required scripts are available"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Valida que todos los scripts requeridos existan antes de ejecutar la automatización.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Module Repository</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScript</command:name>
      <maml:description>
        <maml:para>Crea un nuevo archivo de colorscript y opcionalmente emite guía de metadatos.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>El cmdlet `New-ColorScript` crea un esqueleto completo de colorscript que sirve como base para desarrollar scripts de arte ANSI personalizados. El archivo generado incluye una plantilla preformateada con ejemplos de secuencias de escape ANSI, codificación UTF-8 adecuada sin marca de orden de bytes (BOM), y guía de metadatos opcional para la integración con el sistema de metadatos del módulo.</maml:para>
      <maml:para>Por defecto, el script se escribe en el directorio `Scripts` del módulo, asegurando que pueda ser descubierto automáticamente por las funciones de enumeración de scripts del módulo. Sin embargo, el parámetro `-OutputPath` permite apuntar a cualquier directorio personalizado para desarrollo o pruebas.</maml:para>
      <maml:para>Los nombres de script deben seguir las convenciones de nomenclatura de PowerShell: deben comenzar con un carácter alfanumérico y pueden incluir guiones bajos o guiones. La extensión `.ps1` se agrega automáticamente si no se proporciona. Los archivos existentes están protegidos contra sobrescrituras accidentales a menos que se especifique explícitamente el interruptor `-Force`.</maml:para>
      <maml:para>Cuando se combina con el parámetro `-GenerateMetadataSnippet`, el cmdlet produce código PowerShell listo para usar que demuestra cómo registrar el nuevo script en `ScriptMetadata.psd1`. Esta guía incluye los valores de categoría y etiqueta especificados a través de los parámetros respectivos, agilizando el proceso de integración de scripts personalizados en la estructura organizacional del módulo.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Especifica la categoría principal para el colorscript al generar guía de metadatos. Este parámetro solo tiene sentido cuando se usa con `-GenerateMetadataSnippet`. Las categorías comunes incluyen 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' y 'Abstract'. El valor debe alinearse con las categorías existentes en `ScriptMetadata.psd1` para consistencia.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Solicita confirmación antes de ejecutar el cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Sobrescribe el archivo de destino si ya existe. Sin este interruptor, el cmdlet terminará con un error si se encuentra un archivo con el mismo nombre en la ubicación de destino. Úselo con precaución para evitar pérdida de datos.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Incluye un fragmento de guía en la salida que demuestra cómo registrar el nuevo script en `ScriptMetadata.psd1`. El fragmento usa los valores de los parámetros `-Category` y `-Tag` si se proporcionan. Esto es particularmente útil para mantener metadatos consistentes en todos los colorscripts del módulo.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Especifica el nombre del nuevo colorscript. El nombre debe comenzar con un carácter alfanumérico y puede incluir guiones bajos o guiones. La extensión `.ps1` se agrega automáticamente si no se incluye. Este nombre se usará como nombre de archivo y debe ser descriptivo del contenido o tema del script.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Especifica el directorio de destino para el andamiaje. Cuando no se especifica, por defecto es el directorio `Scripts` del módulo. La ruta admite expansión de tilde (`~`) para el directorio de inicio del usuario, variables de entorno (ej. `$env:USERPROFILE`), y rutas tanto relativas como absolutas. El directorio se creará si no existe.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Especifica una o más etiquetas de metadatos para el colorscript. Las etiquetas proporcionan clasificación adicional más allá de la categoría principal y son útiles para filtrar y buscar. Las etiquetas comunes incluyen descriptores de tema como 'Minimal', 'Colorful', 'Animated', referencias tecnológicas como 'Matrix', 'ASCII', o marcadores contextuales como 'Holiday', 'Season'. Se pueden especificar múltiples etiquetas como una matriz separada por comas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar ninguna acción. Muestra la ruta del archivo que se crearía y cualquier verificación de validación que se realizaría. El cmdlet no crea ningún archivo o directorio cuando se especifica este interruptor.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Especifica la categoría principal para el colorscript al generar guía de metadatos. Este parámetro solo tiene sentido cuando se usa con `-GenerateMetadataSnippet`. Las categorías comunes incluyen 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' y 'Abstract'. El valor debe alinearse con las categorías existentes en `ScriptMetadata.psd1` para consistencia.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Solicita confirmación antes de ejecutar el cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Sobrescribe el archivo de destino si ya existe. Sin este interruptor, el cmdlet terminará con un error si se encuentra un archivo con el mismo nombre en la ubicación de destino. Úselo con precaución para evitar pérdida de datos.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>GenerateMetadataSnippet</maml:name>
          <maml:description>
            <maml:para>Incluye un fragmento de guía en la salida que demuestra cómo registrar el nuevo script en `ScriptMetadata.psd1`. El fragmento usa los valores de los parámetros `-Category` y `-Tag` si se proporcionan. Esto es particularmente útil para mantener metadatos consistentes en todos los colorscripts del módulo.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Especifica el nombre del nuevo colorscript. El nombre debe comenzar con un carácter alfanumérico y puede incluir guiones bajos o guiones. La extensión `.ps1` se agrega automáticamente si no se incluye. Este nombre se usará como nombre de archivo y debe ser descriptivo del contenido o tema del script.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>OutputPath</maml:name>
          <maml:description>
            <maml:para>Especifica el directorio de destino para el andamiaje. Cuando no se especifica, por defecto es el directorio `Scripts` del módulo. La ruta admite expansión de tilde (`~`) para el directorio de inicio del usuario, variables de entorno (ej. `$env:USERPROFILE`), y rutas tanto relativas como absolutas. El directorio se creará si no existe.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Especifica una o más etiquetas de metadatos para el colorscript. Las etiquetas proporcionan clasificación adicional más allá de la categoría principal y son útiles para filtrar y buscar. Las etiquetas comunes incluyen descriptores de tema como 'Minimal', 'Colorful', 'Animated', referencias tecnológicas como 'Matrix', 'ASCII', o marcadores contextuales como 'Holiday', 'Season'. Se pueden especificar múltiples etiquetas como una matriz separada por comas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar ninguna acción. Muestra la ruta del archivo que se crearía y cualquier verificación de validación que se realizaría. El cmdlet no crea ningún archivo o directorio cuando se especifica este interruptor.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Especifica la categoría principal para el colorscript al generar guía de metadatos. Este parámetro solo tiene sentido cuando se usa con `-GenerateMetadataSnippet`. Las categorías comunes incluyen 'Artistic', 'Geometric', 'Nature', 'Retro', 'Gaming' y 'Abstract'. El valor debe alinearse con las categorías existentes en `ScriptMetadata.psd1` para consistencia.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Solicita confirmación antes de ejecutar el cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Sobrescribe el archivo de destino si ya existe. Sin este interruptor, el cmdlet terminará con un error si se encuentra un archivo con el mismo nombre en la ubicación de destino. Úselo con precaución para evitar pérdida de datos.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>GenerateMetadataSnippet</maml:name>
        <maml:description>
          <maml:para>Incluye un fragmento de guía en la salida que demuestra cómo registrar el nuevo script en `ScriptMetadata.psd1`. El fragmento usa los valores de los parámetros `-Category` y `-Tag` si se proporcionan. Esto es particularmente útil para mantener metadatos consistentes en todos los colorscripts del módulo.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Especifica el nombre del nuevo colorscript. El nombre debe comenzar con un carácter alfanumérico y puede incluir guiones bajos o guiones. La extensión `.ps1` se agrega automáticamente si no se incluye. Este nombre se usará como nombre de archivo y debe ser descriptivo del contenido o tema del script.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>OutputPath</maml:name>
        <maml:description>
          <maml:para>Especifica el directorio de destino para el andamiaje. Cuando no se especifica, por defecto es el directorio `Scripts` del módulo. La ruta admite expansión de tilde (`~`) para el directorio de inicio del usuario, variables de entorno (ej. `$env:USERPROFILE`), y rutas tanto relativas como absolutas. El directorio se creará si no existe.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Especifica una o más etiquetas de metadatos para el colorscript. Las etiquetas proporcionan clasificación adicional más allá de la categoría principal y son útiles para filtrar y buscar. Las etiquetas comunes incluyen descriptores de tema como 'Minimal', 'Colorful', 'Animated', referencias tecnológicas como 'Matrix', 'ASCII', o marcadores contextuales como 'Holiday', 'Season'. Se pueden especificar múltiples etiquetas como una matriz separada por comas.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar ninguna acción. Muestra la ruta del archivo que se crearía y cualquier verificación de validación que se realizaría. El cmdlet no crea ningún archivo o directorio cuando se especifica este interruptor.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>No puede canalizar objetos a este cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Management.Automation.PSCustomObject</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>El cmdlet devuelve un objeto personalizado con las siguientes propiedades:

- **ScriptName**: El nombre del colorscript creado (incluyendo la extensión .ps1)
- **Path**: La ruta completa al archivo generado
- **Category**: El valor de categoría que se especificó (si existe)
- **Tags**: La matriz de valores de etiqueta que se especificaron (si existen)
- **MetadataGuidance**: El texto del fragmento de metadatos (solo cuando se usa -GenerateMetadataSnippet)</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Codificación**: El andamiaje se escribe con codificación UTF-8 sin marca de orden de bytes (BOM), asegurando compatibilidad en diferentes plataformas y editores.

**Estructura de plantilla**: La plantilla generada incluye:
- Un bloque de ayuda basado en comentarios con marcadores de posición para documentación
- Un bloque de muestra de arte ANSI demostrando secuencias de color y formato
- Estructura de script de PowerShell adecuada con secciones claras para personalización

**Integración de metadatos**: Aunque el cmdlet puede generar guía de metadatos, debe agregar manualmente el fragmento a `ScriptMetadata.psd1` para integrar completamente el script en el sistema de descubrimiento y categorización del módulo.

**Flujo de trabajo de desarrollo**:
1. Use `New-ColorScript` para crear el andamiaje
2. Edite el archivo .ps1 generado para agregar su arte ANSI
3. Si se generó guía de metadatos, cópiela a `ScriptMetadata.psd1`
4. Ejecute `New-ColorScriptCache` para reconstruir la caché del módulo
5. Pruebe su script con `Show-ColorScript -Name &lt;su-nombre-de-script&gt;`

**Mejores prácticas**:
- Elija nombres descriptivos con guiones que indiquen claramente el tema del script
- Use valores de categoría consistentes que se alineen con scripts existentes
- Aplique múltiples etiquetas para mejorar la capacidad de descubrimiento
- Pruebe scripts en diferentes entornos de terminal para asegurar compatibilidad</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'my-spectrum' -GenerateMetadataSnippet -Category 'Artistic' -Tag 'Custom','Demo'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea `my-spectrum.ps1` en el directorio `Scripts` del módulo y devuelve un objeto PowerShell que contiene la ruta del archivo y un fragmento de metadatos. El fragmento muestra cómo agregar una entrada a `ScriptMetadata.psd1` con la categoría 'Artistic' y las etiquetas 'Custom' y 'Demo'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'holiday-banner' -OutputPath '~/Dev/colorscripts' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Genera el andamiaje en un directorio personalizado (`~/Dev/colorscripts`), creando el directorio si no existe. Si un archivo llamado `holiday-banner.ps1` ya existe en esa ubicación, se sobrescribirá debido al interruptor `-Force`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
$result = New-ColorScript -Name 'retro-wave' -Category 'Retro' -Tag '80s','Neon' -GenerateMetadataSnippet
$result.MetadataGuidance | Set-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea un nuevo colorscript y copia la guía de metadatos al portapapeles, facilitando pegarla en `ScriptMetadata.psd1`.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name 'test-pattern' -OutputPath '.\temp' -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Muestra qué sucedería al crear un script de patrón de prueba en el directorio `.\temp` sin crear realmente el archivo. Útil para validar rutas y nombres antes de la ejecución.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Crear múltiples colorscripts para un proyecto
$scriptNames = @("company-logo", "team-banner", "status-display")
foreach ($name in $scriptNames) {
    New-ColorScript -Name $name -Category "Corporate" -Tag "Custom" -OutputPath ".\src" | Out-Null
}
Write-Host "Created $($scriptNames.Count) colorscript templates"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea múltiples plantillas de colorscript por lotes para un proyecto.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Crear y abrir inmediatamente en el editor
$scaffold = New-ColorScript -Name "my-art" -Category "Artistic" -GenerateMetadataSnippet
code $scaffold.Path  # Abre en VS Code
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea un colorscript y lo abre inmediatamente en el editor predeterminado para editarlo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Crear con automatización completa del flujo de trabajo
$newScript = New-ColorScript -Name "interactive-demo" -Category "Educational" -Tag "Interactive","Demo" -GenerateMetadataSnippet
Write-Host "Created: $($newScript.ScriptName)"
Write-Host "Path: $($newScript.Path)"
Write-Host "Metadata guidance ready in clipboard"
$newScript.MetadataGuidance | Set-Clipboard
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea un colorscript con guía de metadatos copiada automáticamente al portapapeles.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verificar convenciones de nombres de script
$validName = "my-awesome-script"
$invalidNames = @("123start", "-invalid", "_underscore-only")
foreach ($name in $invalidNames) {
    try {
        New-ColorScript -Name $name -WhatIf -ErrorAction Stop
    } catch {
        Write-Warning "Invalid name '$name': $_"
    }
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demuestra la validación de convenciones de nomenclatura para colorscripts.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Crear en ubicación portable para distribución
$portableDir = Join-Path $PSScriptRoot "colorscripts"
$scaffold = New-ColorScript -Name "portable-art" -OutputPath $portableDir -GenerateMetadataSnippet
Write-Host "Created portable colorscript at: $($scaffold.Path)"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Crea colorscripts en una ubicación portable relativa al script actual.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Crear con validación de categoría y etiqueta
$categories = Get-ColorScriptList -AsObject | Select-Object -ExpandProperty Category -Unique
if ("Retro" -in $categories) {
    New-ColorScript -Name "retro-party" -Category "Retro" -Tag "Fun","Social"
} else {
    Write-Warning "Retro category not found"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Valida que una categoría exista antes de crear un nuevo colorscript.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/New-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>ScriptMetadata.psd1</maml:linkText>
        <command:uri>../ScriptMetadata.psd1</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Pre-construir o refrescar archivos de caché de colorescript para una renderización más rápida.

## DESCRIPTION

`New-ColorScriptCache` ejecuta colorescripts en una instancia de PowerShell en segundo plano y guarda la salida renderizada usando codificación UTF-8 (sin BOM). El contenido en caché acelera drásticamente las llamadas subsiguientes a `Show-ColorScript` al eliminar la necesidad de re-ejecutar scripts. También puedes usar el alias `Update-ColorScriptCache` para invocar este cmdlet.

Puedes apuntar a scripts específicos por nombre (se admiten comodines) o almacenar en caché toda la colección. Cuando no se especifican parámetros, el cmdlet por defecto almacena en caché todos los scripts disponibles. También puedes filtrar scripts por categoría o etiqueta para almacenar en caché solo aquellos que coincidan con criterios específicos.

Por defecto, el cmdlet muestra un resumen conciso de la operación de almacenamiento en caché. Usa `-PassThru` para devolver objetos de resultado detallados para cada script, que puedes inspeccionar programáticamente para el estado, salida estándar y flujos de error.

El cmdlet omite inteligentemente los scripts cuyos archivos de caché ya están actualizados a menos que especifiques el parámetro `-Force` para reconstruir todos los cachés independientemente de su estado actual.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`New-ColorScriptCache` ejecuta colorescripts en una instancia de PowerShell en segundo plano y guarda la salida renderizada usando codificación UTF-8 (sin BOM). El contenido en caché acelera drásticamente las llamadas subsiguientes a `Show-ColorScript` al eliminar la necesidad de re-ejecutar scripts. También puedes usar el alias `Update-ColorScriptCache` para invocar este cmdlet.</maml:para>
      <maml:para>Puedes apuntar a scripts específicos por nombre (se admiten comodines) o almacenar en caché toda la colección. Cuando no se especifican parámetros, el cmdlet por defecto almacena en caché todos los scripts disponibles. También puedes filtrar scripts por categoría o etiqueta para almacenar en caché solo aquellos que coincidan con criterios específicos.</maml:para>
      <maml:para>Por defecto, el cmdlet muestra un resumen conciso de la operación de almacenamiento en caché. Usa `-PassThru` para devolver objetos de resultado detallados para cada script, que puedes inspeccionar programáticamente para el estado, salida estándar y flujos de error.</maml:para>
      <maml:para>El cmdlet omite inteligentemente los scripts cuyos archivos de caché ya están actualizados a menos que especifiques el parámetro `-Force` para reconstruir todos los cachés independientemente de su estado actual.</maml:para>
      <maml:para>## SYNTAX</maml:para>
      <maml:para>### All</maml:para>
      <maml:para>``` New-ColorScriptCache [-All] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
      <maml:para>### Named</maml:para>
      <maml:para>``` New-ColorScriptCache [-Name &lt;String[]&gt;] [-Category &lt;String[]&gt;] [-Tag &lt;String[]&gt;] [-Force] [-PassThru] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;] ```</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Almacena en caché cada script disponible. Cuando se omite y no se proporcionan nombres, todos los scripts se almacenan en caché por defecto. Este parámetro es útil cuando quieres ser explícito sobre almacenar en caché todos los scripts.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Pide confirmación antes de ejecutar el cmdlet. Útil cuando se almacenan en caché un gran número de scripts o cuando se usa `-Force` para prevenir regeneración accidental de caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Reconstruye archivos de caché incluso cuando el caché existente es más nuevo que la fuente del script. Esto es útil cuando quieres asegurar que todos los cachés se regeneren, como después de actualizaciones del módulo o cuando se solucionan problemas de renderización.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve objetos de resultado detallados para cada operación de caché. Por defecto, solo se muestra un resumen. Los objetos de resultado incluyen propiedades como Name, Status, CacheFile, ExitCode, StdOut y StdErr, permitiendo inspección programática del proceso de almacenamiento en caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar realmente las operaciones de almacenamiento en caché. Útil para previsualizar qué scripts se almacenarían en caché antes de comprometerse con la operación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>New-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Limita la selección a scripts que pertenecen a la categoría especificada (sin distinción de mayúsculas). Los valores múltiples se tratan como un filtro OR, lo que significa que se almacenarán en caché los scripts que coincidan con cualquiera de las categorías especificadas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Pide confirmación antes de ejecutar el cmdlet. Útil cuando se almacenan en caché un gran número de scripts o cuando se usa `-Force` para prevenir regeneración accidental de caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Reconstruye archivos de caché incluso cuando el caché existente es más nuevo que la fuente del script. Esto es útil cuando quieres asegurar que todos los cachés se regeneren, como después de actualizaciones del módulo o cuando se solucionan problemas de renderización.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Uno o más nombres de colorescript para almacenar en caché. Admite patrones de comodines (ej. 'aurora-*', '*-wave'). Cuando este parámetro se omite y no se especifican parámetros de filtrado, el cmdlet almacena en caché todos los scripts disponibles por defecto.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve objetos de resultado detallados para cada operación de caché. Por defecto, solo se muestra un resumen. Los objetos de resultado incluyen propiedades como Name, Status, CacheFile, ExitCode, StdOut y StdErr, permitiendo inspección programática del proceso de almacenamiento en caché.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Limita la selección a scripts que contienen las etiquetas de metadatos especificadas (sin distinción de mayúsculas). Los valores múltiples se tratan como un filtro OR, almacenando en caché scripts que coincidan con cualquiera de las etiquetas especificadas.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar realmente las operaciones de almacenamiento en caché. Útil para previsualizar qué scripts se almacenarían en caché antes de comprometerse con la operación.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Almacena en caché cada script disponible. Cuando se omite y no se proporcionan nombres, todos los scripts se almacenan en caché por defecto. Este parámetro es útil cuando quieres ser explícito sobre almacenar en caché todos los scripts.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Limita la selección a scripts que pertenecen a la categoría especificada (sin distinción de mayúsculas). Los valores múltiples se tratan como un filtro OR, lo que significa que se almacenarán en caché los scripts que coincidan con cualquiera de las categorías especificadas.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Pide confirmación antes de ejecutar el cmdlet. Útil cuando se almacenan en caché un gran número de scripts o cuando se usa `-Force` para prevenir regeneración accidental de caché.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Reconstruye archivos de caché incluso cuando el caché existente es más nuevo que la fuente del script. Esto es útil cuando quieres asegurar que todos los cachés se regeneren, como después de actualizaciones del módulo o cuando se solucionan problemas de renderización.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Uno o más nombres de colorescript para almacenar en caché. Admite patrones de comodines (ej. 'aurora-*', '*-wave'). Cuando este parámetro se omite y no se especifican parámetros de filtrado, el cmdlet almacena en caché todos los scripts disponibles por defecto.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Devuelve objetos de resultado detallados para cada operación de caché. Por defecto, solo se muestra un resumen. Los objetos de resultado incluyen propiedades como Name, Status, CacheFile, ExitCode, StdOut y StdErr, permitiendo inspección programática del proceso de almacenamiento en caché.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Limita la selección a scripts que contienen las etiquetas de metadatos especificadas (sin distinción de mayúsculas). Los valores múltiples se tratan como un filtro OR, almacenando en caché scripts que coincidan con cualquiera de las etiquetas especificadas.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin realizar realmente las operaciones de almacenamiento en caché. Útil para previsualizar qué scripts se almacenarían en caché antes de comprometerse con la operación.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Puedes canalizar nombres de script a este cmdlet. Cada cadena se trata como un nombre de script potencial y admite coincidencia de comodines.</maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Puedes canalizar una matriz de nombres de script o registros de metadatos con una propiedad `Name` a este cmdlet para procesamiento por lotes.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cuando se especifica `-PassThru`, devuelve un objeto personalizado para cada script procesado que contiene las siguientes propiedades:

- **Name**: El nombre del colorescript
- **Status**: Éxito, Omitido o Fallido
- **CacheFile**: Ruta completa al archivo de caché generado
- **ExitCode**: El código de salida de la ejecución del script (0 indica éxito)
- **StdOut**: Salida estándar capturada durante la ejecución del script
- **StdErr**: Salida de error estándar capturada durante la ejecución del script

Sin `-PassThru`, muestra una tabla de resumen concisa en la consola mostrando el número de scripts almacenados en caché, omitidos y fallidos.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced

**Aliases:** Este cmdlet también se puede llamar usando el alias `Update-ColorScriptCache`, que es útil para scripts que refrescan cachés existentes.

Los archivos de caché se almacenan en el directorio expuesto por la variable `CacheDir` del módulo (típicamente dentro del directorio de datos del módulo). Una construcción exitosa establece la marca de tiempo del archivo de caché para que coincida con la hora de escritura del script, permitiendo que ejecuciones subsiguientes omitan scripts sin cambios de manera eficiente.

El cmdlet ejecuta cada script en un proceso de PowerShell en segundo plano aislado para capturar su salida sin afectar la sesión actual. Esto asegura el almacenamiento en caché preciso de la salida exacta de la consola que se mostraría al ejecutar el script directamente.

**Mejores Prácticas:**
- Ejecutar una vez después de la instalación del módulo para pre-almacenar en caché todos los scripts
- Usar `-Force` solo cuando necesites reconstruir todos los cachés
- Filtrar por categoría o etiqueta para construcciones de caché dirigidas más rápidas
- Monitorear tiempos de construcción para identificar scripts de renderización lenta
- Programar reconstrucciones periódicas para mantener el caché actual
- Usar `-PassThru` en automatización para reportes de estado detallados
- Considerar usar `-WhatIf` antes de operaciones de caché grandes

**Consejo de Rendimiento:** Ejecuta este cmdlet una vez después de instalar o actualizar el módulo para pre-almacenar en caché todos los scripts para un rendimiento óptimo.

**Solución de Problemas:**
- Si la construcción de caché falla, verifica la sintaxis del script con `Show-ColorScript -Name scriptname -NoCache`
- Monitorea el espacio en disco para el crecimiento del directorio de caché
- Usa `-PassThru` para identificar qué scripts fallaron en la construcción
- Limpia y reconstruye si el caché se corrompe: `Clear-ColorScriptCache -All; New-ColorScriptCache`</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Calienta el caché para cada script que se incluye con el módulo. Este es el comportamiento por defecto cuando no se especifican parámetros.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Name bars, 'aurora-*'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché una mezcla de coincidencias exactas y comodines. El cmdlet procesará el script 'bars' y todos los scripts cuyos nombres comiencen con 'aurora-'.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Name mandelbrot-zoom -Force -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Fuerza una reconstrucción del caché de 'mandelbrot-zoom' incluso si está actualizado, y examina el objeto de resultado detallado.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Category 'Animation' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché todos los scripts en la categoría 'Animation' y devuelve resultados detallados para cada operación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Tag 'geometric', 'colorful' -Force
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Reconstruye cachés para todos los scripts etiquetados con 'geometric' o 'colorful', forzando la regeneración incluso si los cachés están actuales.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList | Where-Object Category -eq 'Classic' | New-ColorScriptCache -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Ejemplo de pipeline: recupera todos los scripts clásicos y los almacena en caché, devolviendo resultados detallados.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verificar estadísticas de caché después de construir
$before = @(Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache" -ErrorAction SilentlyContinue).Count
New-ColorScriptCache
$after = @(Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache").Count
Write-Host "Scripts en caché: $before -&gt; $after"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mide el crecimiento del caché contando archivos de caché antes y después de la operación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Construir caché para scripts usados frecuentemente solo
$frequentScripts = @('bars', 'arch', 'mandelbrot-zoom', 'aurora-waves', 'galaxy-spiral')
New-ColorScriptCache -Name $frequentScripts -PassThru | Format-Table Name, Status, ExitCode
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché solo los scripts más accedidos frecuentemente para un rendimiento más rápido en producción.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Monitorear construcción de caché con seguimiento de progreso
$scripts = Get-ColorScriptList -AsObject
$total = $scripts.Count
$current = 0
$scripts | ForEach-Object {
    $current++
    Write-Progress -Activity "Building cache" -Status $_.Name -PercentComplete (($current / $total) * 100)
    New-ColorScriptCache -Name $_.Name | Out-Null
}
Write-Progress -Activity "Building cache" -Completed
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Proporciona retroalimentación visual de progreso mientras construye el caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Programar reconstrucción de caché al cargar módulo
# Agregar al perfil de PowerShell:
Import-Module ColorScripts-Enhanced
if ((Get-Date).Day % 7 -eq 0) {  # Reconstrucción semanal
    New-ColorScriptCache -Force | Out-Null
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Reconstruye automáticamente el caché semanalmente cuando se carga el módulo.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Almacenar en caché categoría específica para despliegue
New-ColorScriptCache -Category 'Recommended' -Force -PassThru |
    Select-Object Name, Status |
    Export-Csv "./cache-deployment.csv"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché scripts recomendados y exporta los resultados a un manifiesto de despliegue.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verificar que el caché se construyó exitosamente
New-ColorScriptCache -Name "mandelbrot-zoom" -Force -PassThru |
    Where-Object { $_.ExitCode -ne 0 } |
    Select-Object Name, StdErr
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Identifica cualquier fallo de almacenamiento en caché filtrando por códigos de salida no cero.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Almacenar en caché todos los scripts animados
New-ColorScriptCache -Tag Animated -PassThru |
    Measure-Object |
    Select-Object @{N='ScriptsCached'; E={$_.Count}}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Almacena en caché todos los scripts etiquetados como animados y muestra el conteo de scripts en caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Reset-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Restaurar la configuración de ColorScripts-Enhanced a sus valores predeterminados.</maml:para>
      </maml:description>
      <command:verb>Reset</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Reset-ColorScriptConfiguration` borra todas las anulaciones de configuración persistidas y restaura el módulo a sus valores predeterminados de fábrica. Cuando se ejecuta, este cmdlet:</maml:para>
      <maml:para>- Elimina todas las configuraciones personalizadas del archivo de configuración - Restablece la ruta de caché a la ubicación predeterminada específica de la plataforma - Restaura todas las banderas de inicio (RunOnStartup, RandomOnStartup, etc.) a sus valores originales - Preserva la estructura del archivo de configuración mientras borra las personalizaciones del usuario</maml:para>
      <maml:para>Este cmdlet admite los parámetros `-WhatIf` y `-Confirm` porque realiza una operación destructiva al sobrescribir el archivo de configuración. La operación de restablecimiento no se puede deshacer automáticamente, por lo que los usuarios deben considerar hacer una copia de seguridad de su configuración actual usando `Get-ColorScriptConfiguration` antes de proceder.</maml:para>
      <maml:para>Use el parámetro `-PassThru` para inspeccionar inmediatamente las configuraciones predeterminadas recién restauradas después de que se complete el restablecimiento.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Pide confirmación antes de ejecutar el cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve el objeto de configuración actualizado después de que se complete el restablecimiento.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin ejecutar realmente la operación de restablecimiento.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Pide confirmación antes de ejecutar el cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve el objeto de configuración actualizado después de que se complete el restablecimiento.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin ejecutar realmente la operación de restablecimiento.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Pide confirmación antes de ejecutar el cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Devuelve el objeto de configuración actualizado después de que se complete el restablecimiento.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Muestra qué sucedería si el cmdlet se ejecuta sin ejecutar realmente la operación de restablecimiento.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Devuelto cuando se especifica `-PassThru`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>El archivo de configuración se almacena en el directorio resuelto por `Get-ColorScriptConfiguration`. Por defecto, esta ubicación es específica de la plataforma:

- **Windows**: `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS**: `$HOME/.config/ColorScripts-Enhanced`

La variable de entorno `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` puede anular la ubicación predeterminada si se establece antes de la importación del módulo.

**Consideraciones importantes:**

- La operación de restablecimiento es inmediata y no se puede deshacer automáticamente
- Se perderán todas las rutas de script de color personalizadas, ubicaciones de caché o comportamientos de inicio
- Considera usar `Get-ColorScriptConfiguration` para exportar tus configuraciones actuales antes de restablecer
- El módulo debe tener permisos de escritura en el directorio de configuración
- Otras sesiones de PowerShell que usan el módulo verán los cambios después de su próxima recarga de configuración

**Valores predeterminados restaurados:**

- CachePath: Directorio de caché predeterminado específico de la plataforma
- RunOnStartup: `$false`
- RandomOnStartup: `$false`
- ScriptOnStartup: Cadena vacía
- CustomScriptPaths: Matriz vacía</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Restablece la configuración sin pedir confirmación. Esto es útil en scripts automatizados o cuando estás seguro de restablecer a los valores predeterminados.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Restablece la configuración y devuelve la tabla hash resultante para inspección, permitiendo verificar los valores predeterminados.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Backup current configuration before resetting
$backup = Get-ColorScriptConfiguration
Reset-ColorScriptConfiguration -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Usa `-WhatIf` para previsualizar la operación de restablecimiento sin ejecutarla realmente, después de hacer una copia de seguridad de la configuración actual.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Verbose
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Restablece la configuración con salida detallada para ver información detallada sobre la operación.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Reset configuration and clear cache for complete factory reset
Reset-ColorScriptConfiguration -Confirm:$false
Clear-ColorScriptCache -All -Confirm:$false
New-ColorScriptCache
Write-Host "Module reset to factory defaults!"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Realiza un restablecimiento completo de fábrica incluyendo configuración, caché y reconstrucción del caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Verify reset was successful
$config = Reset-ColorScriptConfiguration -PassThru
if ($config.Cache.Path -match "AppData|\.config") {
    Write-Host "Configuration successfully reset to platform default"
} else {
    Write-Host "Configuration reset but using custom path: $($config.Cache.Path)"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Restablece y verifica que la configuración se haya restaurado a los valores predeterminados comprobando la ruta de caché.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Persistir cambios en la caché y configuración de inicio de ColorScripts-Enhanced.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Set-ColorScriptConfiguration` proporciona una forma persistente de personalizar el comportamiento y la ubicación de almacenamiento del módulo ColorScripts-Enhanced. Este cmdlet actualiza el archivo de configuración del módulo, permitiéndole controlar varios aspectos de la representación y almacenamiento de scripts.</maml:para>
      <maml:para>**Capacidades clave:**</maml:para>
      <maml:para>- **Reubicación de caché**: Mueva la caché de colorscript a un directorio personalizado, útil para acciones compartidas de red, unidades más rápidas o ubicaciones de almacenamiento centralizadas. - **Comportamiento de autoimportación**: Controle si un colorscript se muestra automáticamente cuando el módulo se importa por primera vez en su sesión de PowerShell. - **Integración de perfil**: Configure ajustes predeterminados para `Add-ColorScriptProfile` para simplificar la configuración del perfil. - **Selección de script predeterminado**: Establezca un colorscript preferido que se utilizará cuando no se solicite un script específico.</maml:para>
      <maml:para>Cualquier ruta de directorio proporcionada para `-CachePath` se crea automáticamente si no existe. El cmdlet admite expansión de variables de entorno, expansión de directorio de inicio tilde (`~`), y rutas absolutas y relativas. Proporcionar una cadena vacía (`''`) a `-CachePath` o `-DefaultScript` borra el valor almacenado y revierte a los valores predeterminados del módulo.</maml:para>
      <maml:para>Los cambios realizados con este cmdlet surten efecto inmediatamente para nuevas operaciones, pero pueden no afectar los datos de caché ya cargados hasta que el módulo se reimporte o PowerShell se reinicie.</maml:para>
      <maml:para>Cuando se especifica `-PassThru`, el cmdlet devuelve el objeto de configuración actualizado, facilitando la verificación de cambios o el encadenamiento de operaciones adicionales.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Habilitar o deshabilitar la representación automática de un colorscript cuando se importa el módulo. Cuando está habilitado (`$true`), un colorscript se muestra inmediatamente al importar el módulo, proporcionando retroalimentación visual instantánea. Cuando está deshabilitado (`$false`), los scripts solo se muestran cuando se invocan explícitamente. Si no se especifica, la configuración existente permanece sin cambios.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Especifica el directorio donde se almacenan los archivos y metadatos de colorscript. Admite rutas absolutas, rutas relativas (resueltas desde la ubicación actual), variables de entorno (por ejemplo, `$env:USERPROFILE`), y expansión de tilde (`~`) para el directorio de inicio.</maml:para>
            <maml:para>Si el directorio especificado no existe, se creará automáticamente con permisos apropiados. Proporcione una cadena vacía (`''`) para borrar la ruta personalizada y revertir a la ubicación predeterminada específica de la plataforma. Cuando se deja sin especificar, se preserva la configuración de ruta de caché existente.</maml:para>
            <maml:para>**Nota**: Cambiar la ruta de caché no migra automáticamente los archivos en caché existentes. Puede necesitar copiar archivos manualmente o permitir que se regeneren.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Establece o borra el nombre de colorscript predeterminado utilizado por los ayudantes de perfil, características de auto-show, y cuando no se especifica un script en comandos. Esto debe coincidir con el nombre base de un archivo de script sin extensión (por ejemplo, `'bars'`, no `'bars.ps1'`).</maml:para>
            <maml:para>Proporcione una cadena vacía (`''`) para eliminar el predeterminado almacenado, revirtiendo al comportamiento predeterminado a nivel de módulo (típicamente selección aleatoria). Cuando se omite este parámetro, la configuración de script predeterminado actual permanece sin cambios.</maml:para>
            <maml:para>El script especificado debe existir en el directorio de scripts del módulo para usarse exitosamente.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve el objeto de configuración actualizado después de realizar cambios. Sin este interruptor, el cmdlet opera silenciosamente (sin salida). El objeto devuelto tiene la misma estructura que `Get-ColorScriptConfiguration` y puede inspeccionarse, almacenarse o canalizarse a otros cmdlets para procesamiento adicional.</maml:para>
            <maml:para>Útil para verificación, registro o encadenamiento de comandos de configuración.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controla si los fragmentos de perfil generados por `Add-ColorScriptProfile` incluyen una invocación automática de `Show-ColorScript`. Cuando `$true`, el código de perfil mostrará un colorscript en cada inicio de shell. Cuando `$false`, el perfil cargará el módulo pero no mostrará scripts automáticamente.</maml:para>
            <maml:para>Esta configuración solo afecta el código de perfil recién generado; las modificaciones de perfil existentes no se actualizan automáticamente. Omitir este parámetro deja la configuración actual sin cambios.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Habilitar o deshabilitar la representación automática de un colorscript cuando se importa el módulo. Cuando está habilitado (`$true`), un colorscript se muestra inmediatamente al importar el módulo, proporcionando retroalimentación visual instantánea. Cuando está deshabilitado (`$false`), los scripts solo se muestran cuando se invocan explícitamente. Si no se especifica, la configuración existente permanece sin cambios.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Especifica el directorio donde se almacenan los archivos y metadatos de colorscript. Admite rutas absolutas, rutas relativas (resueltas desde la ubicación actual), variables de entorno (por ejemplo, `$env:USERPROFILE`), y expansión de tilde (`~`) para el directorio de inicio.</maml:para>
            <maml:para>Si el directorio especificado no existe, se creará automáticamente con permisos apropiados. Proporcione una cadena vacía (`''`) para borrar la ruta personalizada y revertir a la ubicación predeterminada específica de la plataforma. Cuando se deja sin especificar, se preserva la configuración de ruta de caché existente.</maml:para>
            <maml:para>**Nota**: Cambiar la ruta de caché no migra automáticamente los archivos en caché existentes. Puede necesitar copiar archivos manualmente o permitir que se regeneren.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Establece o borra el nombre de colorscript predeterminado utilizado por los ayudantes de perfil, características de auto-show, y cuando no se especifica un script en comandos. Esto debe coincidir con el nombre base de un archivo de script sin extensión (por ejemplo, `'bars'`, no `'bars.ps1'`).</maml:para>
            <maml:para>Proporcione una cadena vacía (`''`) para eliminar el predeterminado almacenado, revirtiendo al comportamiento predeterminado a nivel de módulo (típicamente selección aleatoria). Cuando se omite este parámetro, la configuración de script predeterminado actual permanece sin cambios.</maml:para>
            <maml:para>El script especificado debe existir en el directorio de scripts del módulo para usarse exitosamente.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Devuelve el objeto de configuración actualizado después de realizar cambios. Sin este interruptor, el cmdlet opera silenciosamente (sin salida). El objeto devuelto tiene la misma estructura que `Get-ColorScriptConfiguration` y puede inspeccionarse, almacenarse o canalizarse a otros cmdlets para procesamiento adicional.</maml:para>
            <maml:para>Útil para verificación, registro o encadenamiento de comandos de configuración.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controla si los fragmentos de perfil generados por `Add-ColorScriptProfile` incluyen una invocación automática de `Show-ColorScript`. Cuando `$true`, el código de perfil mostrará un colorscript en cada inicio de shell. Cuando `$false`, el perfil cargará el módulo pero no mostrará scripts automáticamente.</maml:para>
            <maml:para>Esta configuración solo afecta el código de perfil recién generado; las modificaciones de perfil existentes no se actualizan automáticamente. Omitir este parámetro deja la configuración actual sin cambios.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>AutoShowOnImport</maml:name>
        <maml:description>
          <maml:para>Habilitar o deshabilitar la representación automática de un colorscript cuando se importa el módulo. Cuando está habilitado (`$true`), un colorscript se muestra inmediatamente al importar el módulo, proporcionando retroalimentación visual instantánea. Cuando está deshabilitado (`$false`), los scripts solo se muestran cuando se invocan explícitamente. Si no se especifica, la configuración existente permanece sin cambios.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>CachePath</maml:name>
        <maml:description>
          <maml:para>Especifica el directorio donde se almacenan los archivos y metadatos de colorscript. Admite rutas absolutas, rutas relativas (resueltas desde la ubicación actual), variables de entorno (por ejemplo, `$env:USERPROFILE`), y expansión de tilde (`~`) para el directorio de inicio.</maml:para>
          <maml:para>Si el directorio especificado no existe, se creará automáticamente con permisos apropiados. Proporcione una cadena vacía (`''`) para borrar la ruta personalizada y revertir a la ubicación predeterminada específica de la plataforma. Cuando se deja sin especificar, se preserva la configuración de ruta de caché existente.</maml:para>
          <maml:para>**Nota**: Cambiar la ruta de caché no migra automáticamente los archivos en caché existentes. Puede necesitar copiar archivos manualmente o permitir que se regeneren.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>DefaultScript</maml:name>
        <maml:description>
          <maml:para>Establece o borra el nombre de colorscript predeterminado utilizado por los ayudantes de perfil, características de auto-show, y cuando no se especifica un script en comandos. Esto debe coincidir con el nombre base de un archivo de script sin extensión (por ejemplo, `'bars'`, no `'bars.ps1'`).</maml:para>
          <maml:para>Proporcione una cadena vacía (`''`) para eliminar el predeterminado almacenado, revirtiendo al comportamiento predeterminado a nivel de módulo (típicamente selección aleatoria). Cuando se omite este parámetro, la configuración de script predeterminado actual permanece sin cambios.</maml:para>
          <maml:para>El script especificado debe existir en el directorio de scripts del módulo para usarse exitosamente.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Devuelve el objeto de configuración actualizado después de realizar cambios. Sin este interruptor, el cmdlet opera silenciosamente (sin salida). El objeto devuelto tiene la misma estructura que `Get-ColorScriptConfiguration` y puede inspeccionarse, almacenarse o canalizarse a otros cmdlets para procesamiento adicional.</maml:para>
          <maml:para>Útil para verificación, registro o encadenamiento de comandos de configuración.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>ProfileAutoShow</maml:name>
        <maml:description>
          <maml:para>Controla si los fragmentos de perfil generados por `Add-ColorScriptProfile` incluyen una invocación automática de `Show-ColorScript`. Cuando `$true`, el código de perfil mostrará un colorscript en cada inicio de shell. Cuando `$false`, el perfil cargará el módulo pero no mostrará scripts automáticamente.</maml:para>
          <maml:para>Esta configuración solo afecta el código de perfil recién generado; las modificaciones de perfil existentes no se actualizan automáticamente. Omitir este parámetro deja la configuración actual sin cambios.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Este cmdlet no acepta entrada de canalización.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Por defecto, este cmdlet no produce salida.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Cuando se especifica `-PassThru`, devuelve una hashtable que contiene la configuración completa actualizada. La estructura coincide con la salida de `Get-ColorScriptConfiguration`, con claves como `CachePath`, `AutoShowOnImport`, `ProfileAutoShow`, y `DefaultScript`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Ubicación del archivo de configuración:**

Los cambios de configuración se persisten en un archivo JSON o XML almacenado en un directorio de datos de aplicación específico de la plataforma. Use `Get-ColorScriptConfiguration` para ver la ruta raíz de configuración actual. La variable de entorno `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` puede anular la ubicación predeterminada del directorio de configuración si se establece antes de importar el módulo.

**Valores predeterminados de plataforma:**

- **Windows**: `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS**: `~/.config/ColorScripts-Enhanced` o `$XDG_CONFIG_HOME/ColorScripts-Enhanced`

**Mejores prácticas:**

- Pruebe cambios de ruta de caché en un entorno no productivo primero, especialmente cuando use ubicaciones de red.
- Use `-PassThru` al escribir scripts para validar actualizaciones de configuración programáticamente.
- Considere establecer `AutoShowOnImport:$false` en scripts automatizados o canalizaciones CI/CD para evitar salida visual inesperada.
- Documente configuraciones personalizadas en entornos de equipo para asegurar comportamiento consistente entre usuarios.

**Permisos:**

Asegúrese de tener permisos de escritura en el directorio de configuración. En sistemas compartidos, los cambios de configuración afectan solo el perfil del usuario actual a menos que se anulen con variables de entorno que apunten a ubicaciones compartidas.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath 'D:/Temp/ColorScriptsCache' -AutoShowOnImport:$true -ProfileAutoShow:$false -DefaultScript 'bars'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Mueve la caché a `D:/Temp/ColorScriptsCache`, habilita la visualización automática al importar el módulo, deshabilita el auto-show del perfil y establece `bars` como el script predeterminado.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -DefaultScript '' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Borra el script predeterminado y devuelve el objeto de configuración resultante, permitiéndole verificar que la configuración se eliminó.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "$env:TEMP\ColorScripts" -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Reubica la caché al directorio TEMP de Windows y muestra la configuración completa actualizada en formato de lista. Útil para escenarios de prueba temporales.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -AutoShowOnImport:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Deshabilita la representación automática de colorscript cuando se carga el módulo. Útil si prefiere control manual sobre cuándo se muestran los scripts.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath '~/.local/share/colorscripts' -DefaultScript 'crunch'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Establece una ruta de caché estilo Linux/macOS usando expansión de tilde y configura 'crunch' como el script predeterminado para todas las operaciones.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Show-ColorScript</command:name>
      <maml:description>
        <maml:para>Displays a colorscript with automatic caching for enhanced performance.</maml:para>
      </maml:description>
      <command:verb>Show</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Renders beautiful ANSI colorscripts in your terminal with intelligent performance optimization. The cmdlet provides four primary modes of operation:</maml:para>
      <maml:para>**Random Mode (Default):** Displays a randomly selected colorscript from the available collection. This is the default behavior when no parameters are specified.</maml:para>
      <maml:para>**Named Mode:** Displays a specific colorscript by name. Supports wildcard patterns for flexible matching. When multiple scripts match a pattern, the first match in alphabetical order is selected.</maml:para>
      <maml:para>**List Mode:** Displays a formatted list of all available colorscripts with their metadata, including name, category, tags, and descriptions.</maml:para>
      <maml:para>**All Mode:** Cycles through all available colorscripts in alphabetical order. Particularly useful for showcasing the entire collection or discovering new scripts.</maml:para>
      <maml:para>**Performance Features:** The caching system provides 6-19x performance improvements. On first execution, a colorscript runs normally and its output is cached. Subsequent displays use the cached output for near-instant rendering. The cache is automatically invalidated when source scripts are modified, ensuring output accuracy.</maml:para>
      <maml:para>**Filtering Capabilities:** Filter scripts by category or tags before selection occurs. This applies across all modes, allowing you to work with subsets of the collection (e.g., only nature-themed scripts or scripts tagged as "retro").</maml:para>
      <maml:para>**Output Options:** By default, colorscripts are written directly to the console for immediate visual display. Use `-ReturnText` to emit the rendered output to the pipeline for capture, redirection, or further processing. Use `-PassThru` to receive the script's metadata object for programmatic use.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Random</maml:name>
          <maml:description>
            <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>List</maml:name>
          <maml:description>
            <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Cycle through all available colorscripts in alphabetical order. When specified alone, scripts are displayed continuously with a short automatic delay. Combine with `-WaitForInput` to manually control progression through the collection. This mode is ideal for showcasing the full library or discovering new favorites.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WaitForInput</maml:name>
          <maml:description>
            <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Cycle through all available colorscripts in alphabetical order. When specified alone, scripts are displayed continuously with a short automatic delay. Combine with `-WaitForInput` to manually control progression through the collection. This mode is ideal for showcasing the full library or discovering new favorites.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Filter the available script collection by one or more categories before any selection or display occurs. Categories are typically broad themes like "Nature", "Abstract", "Art", "Retro", etc. Multiple categories can be specified as an array. This parameter works in conjunction with all modes (Random, Named, List, All) to narrow the working set.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>List</maml:name>
        <maml:description>
          <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoCache</maml:name>
        <maml:description>
          <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Random</maml:name>
        <maml:description>
          <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReturnText</maml:name>
        <maml:description>
          <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WaitForInput</maml:name>
        <maml:description>
          <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipe colorscript names to Show-ColorScript. This enables pipeline-based workflows where script names are generated or filtered by other commands.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns the selected colorscript's metadata object containing properties like Name, Path, Category, Tags, and Description.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-ReturnText` is specified, emits the rendered colorscript as a string to the pipeline. This string contains all ANSI escape sequences for proper color rendering when displayed in a compatible terminal.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>In default operation (without `-PassThru` or `-ReturnText`), output is written directly to the console host and nothing is returned to the pipeline.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance:**
The intelligent caching system provides 6-19x performance improvements over direct execution. Cache files are stored in a module-managed directory and are automatically invalidated when source scripts are modified, ensuring accuracy.

**Cache Management:**
- Cache location: Use `(Get-Module ColorScripts-Enhanced).ModuleBase` and look for the cache directory
- Clear cache: Use `Clear-ColorScriptCache` to rebuild from scratch
- Rebuild cache: Use `New-ColorScriptCache` to pre-populate cache for all scripts
- Inspect cache: Cache files are plain text and can be viewed directly

**Tips:**
- Add `Show-ColorScript -Random` to your PowerShell profile for a colorful greeting on each session start
- Use the module alias `scs` for quick access: `scs -Random`
- Combine category and tag filters for precise selection
- Use `-List` to discover new scripts and learn about their themes
- The `-All -WaitForInput` combination is perfect for presenting the collection to others

**Compatibility:**
Colorscripts use ANSI escape sequences and display best in terminals with full color support, such as Windows Terminal, ConEmu, or modern Unix terminals.

## ADVANCED USAGE

### Filtering Strategies

**By Category and Tag Combination**
```powershell
# Show only geometric colorscripts tagged as minimal
Show-ColorScript -Category Geometric -Tag minimal -Random

# Show only recommended colorscripts from nature category
Show-ColorScript -Category Nature -Tag Recommended -Random

# Display multiple categories with specific tag
Show-ColorScript -Category Geometric,Abstract -Tag colorful -Random
```

**Dynamic Filtering Based on Time**
```powershell
# Morning: bright colors
if ((Get-Date).Hour -lt 12) {
    Show-ColorScript -Tag bright,colorful -Random
}
# Evening: darker palettes
else {
    Show-ColorScript -Tag dark,minimal -Random
}
```

### Output Capture Patterns

**Save for Later Viewing**
```powershell
# Save to variable
$art = Show-ColorScript -Name spectrum -ReturnText
$art | Out-File "./my-art.ansi" -Encoding UTF8

# Later display
Get-Content "./my-art.ansi" -Raw | Write-Host
```

**Create Themed Collections**
```powershell
# Collect all geometric scripts
$geometric = Get-ColorScriptList -Category Geometric -AsObject

# Save each one
$geometric | ForEach-Object {
    Show-ColorScript -Name $_.Name -ReturnText |
        Out-File "./collection/$($_.Name).ansi" -Encoding UTF8
}
```

### Performance Analysis

**Comprehensive Benchmark**
```powershell
# Function to benchmark colorscript performance
function Measure-ColorScriptPerformance {
    param([string]$Name)

    # Warm up cache
    Show-ColorScript -Name $Name | Out-Null

    # Cached performance
    $cached = Measure-Command { Show-ColorScript -Name $Name }

    # Uncached performance
    Clear-ColorScriptCache -Name $Name -Confirm:$false
    $uncached = Measure-Command { Show-ColorScript -Name $Name -NoCache }

    [PSCustomObject]@{
        Script = $Name
        Cached = $cached.TotalMilliseconds
        Uncached = $uncached.TotalMilliseconds
        Improvement = [math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 2)
    }
}

# Test multiple scripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object { Measure-ColorScriptPerformance -Name $_.Name }
```

### Terminal Customization

**Terminal-Specific Display**
```powershell
# Windows Terminal with ANSI support
if ($env:WT_SESSION) {
    Show-ColorScript -Category Abstract -Random  # Maximum colors
}

# VS Code terminal
if ($env:TERM_PROGRAM -eq "vscode") {
    Show-ColorScript -Tag simple  # Avoid complex rendering
}

# SSH session (potentially limited)
if ($env:SSH_CONNECTION) {
    Show-ColorScript -NoCache -Category Simple  # Minimal overhead
}

# ConEmu terminal
if ($env:ConEmuANSI -eq "ON") {
    Show-ColorScript -Random  # Full ANSI support
}
```

### Automation Integration

**Scheduled Colorscript Rotation**
```powershell
# Create scheduled task wrapper
function Start-ColorScriptSession {
    param(
        [int]$MaxScripts = 5,
        [string[]]$Categories = @("Geometric", "Nature"),
        [int]$DelaySeconds = 2
    )

    Get-ColorScriptList -Category $Categories -AsObject |
        Select-Object -First $MaxScripts |
        ForEach-Object {
            Write-Host "`n=== $($_.Name) ($($_.Category)) ===" -ForegroundColor Cyan
            Show-ColorScript -Name $_.Name
            Start-Sleep -Seconds $DelaySeconds
        }
}
```

### Error Handling and Resilience

**Graceful Fallback**
```powershell
# Try specific script, fallback to random
try {
    Show-ColorScript -Name "specific-script" -ErrorAction Stop
} catch {
    Write-Warning "Specific script not found, showing random"
    Show-ColorScript -Random
}
```

**Validation Before Display**
```powershell
# Verify script exists before displaying
$scripts = Get-ColorScriptList -AsObject
$scriptName = "aurora-waves"

if ($scriptName -in $scripts.Name) {
    Show-ColorScript -Name $scriptName
} else {
    Write-Error "$scriptName not found"
    Get-ColorScriptList | Out-Host
}
```

### Metadata Inspection

**Inspect Before Displaying**
```powershell
# Get metadata while displaying
$metadata = Show-ColorScript -Name aurora-waves -PassThru

Write-Host "`nScript Details:`n"
$metadata | Select-Object Name, Category, Tags, Description | Format-List

# Use metadata for decisions
if ($metadata.Tags -contains "Animated") {
    Write-Host "This is an animated script"
}
```

## NOTES

**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance:**
The intelligent caching system provides 6-19x performance improvements over direct execution. Cache files are stored in a module-managed directory and are automatically invalidated when source scripts are modified, ensuring accuracy.

**Cache Management:**
- Cache location: Use `(Get-Module ColorScripts-Enhanced).ModuleBase` and look for the cache directory
- Clear cache: Use `Clear-ColorScriptCache` to rebuild from scratch
- Rebuild cache: Use `New-ColorScriptCache` to pre-populate cache for all scripts
- Inspect cache: Cache files are plain text and can be viewed directly

**Advanced Tips:**
- Use `-PassThru` to get metadata while displaying for post-processing
- Combine `-ReturnText` with pipeline commands for advanced text manipulation
- Use `-NoCache` during development of custom colorscripts for immediate feedback
- Filter by multiple categories/tags for more precise selection
- Store frequently-used scripts in variables for quick access
- Use `-List` with `-Category` and `-Tag` to explore available content
- Monitor cache hits with performance measurements
- Consider terminal capabilities when selecting scripts
- Use environment variables to customize behavior per environment
- Implement error handling for automated display scenarios

**Terminal Compatibility Matrix:**

| Terminal | ANSI Support | UTF-8 | Performance | Notes |
|----------|---------|-------|-----------|-------|
| Windows Terminal | ✓ Excellent | ✓ Full | Excellent | Recommended |
| ConEmu | ✓ Good | ✓ Full | Good | Legacy but reliable |
| VS Code | ✓ Good | ✓ Full | Very Good | Slight rendering delay |
| PowerShell ISE | ✗ Limited | ✗ Limited | N/A | Not recommended |
| SSH Terminal | ✓ Varies | ✓ Depends | Varies | Network latency may affect |
| Windows 10 Console | ✗ No | ✓ Yes | N/A | Not recommended |</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random colorscript with caching enabled. This is the quickest way to add visual flair to your terminal session.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "mandelbrot-zoom"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the specified colorscript by exact name. The .ps1 extension is not required.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "aurora-*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the first colorscript (alphabetically) that matches the wildcard pattern "aurora-*". Useful when you remember part of a script's name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
scs hearts
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Uses the module's alias 'scs' for quick access to the hearts colorscript. Aliases provide convenient shortcuts for frequent use.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists all available colorscripts with their metadata in a formatted table. Helpful for discovering available scripts and their attributes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name arch -NoCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the arch colorscript without using cache, forcing fresh execution. Useful during development or when troubleshooting cache issues.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Category Nature -PassThru | Select-Object Name, Category
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random nature-themed script and captures its metadata object for further inspection or processing.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "bars" -ReturnText | Set-Content bars.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Renders the colorscript and saves the output to a text file. The rendered ANSI codes are preserved, allowing the file to be displayed later with proper coloring.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts in alphabetical order with a brief automatic delay between each. Perfect for a visual showcase of the entire collection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts one at a time, pausing after each. Press spacebar to advance to the next script, or press 'q' to quit the sequence early.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -Category Nature -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cycles through all nature-themed colorscripts with manual progression. Combines filtering with interactive browsing for a curated experience.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Tag retro,geometric -Random
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random colorscript that has both "retro" and "geometric" tags. Tag filtering enables precise subset selection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List -Category Art,Abstract
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists only colorscripts categorized as "Art" or "Abstract", helping you discover scripts within specific themes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 14 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Measure performance improvement from caching
$uncached = Measure-Command { Show-ColorScript -Name spectrum -NoCache }
$cached = Measure-Command { Show-ColorScript -Name spectrum }
Write-Host "Uncached: $($uncached.TotalMilliseconds)ms | Cached: $($cached.TotalMilliseconds)ms | Speedup: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates the performance improvement that caching provides by measuring execution time.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 15 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Set up daily rotation of different colorscripts
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript -Random -PassThru | Select-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a consistent but different colorscript each day based on the date.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 16 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export rendered colorscript to file for sharing
Show-ColorScript -Name "aurora-waves" -ReturnText |
    Out-File -FilePath "./aurora.ansi" -Encoding UTF8</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Later, display the saved file
Get-Content "./aurora.ansi" -Raw | Write-Host
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Saves a rendered colorscript to a file that can be displayed later or shared with others.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 17 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create a slideshow of geometric colorscripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object {
        Show-ColorScript -Name $_.Name
        Start-Sleep -Seconds 3
    }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Automatically displays a sequence of geometric colorscripts with 3-second delays between each.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 18 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Error handling example
try {
    Show-ColorScript -Name "nonexistent-script" -ErrorAction Stop
} catch {
    Write-Warning "Script not found: $_"
    Show-ColorScript  # Fallback to random
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates error handling when requesting a script that doesn't exist.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 19 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build automation integration
if ($env:CI) {
    Show-ColorScript -Name "nerd-font-test" -NoCache
} else {
    Show-ColorScript  # Random display for interactive use
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Shows how to conditionally display different colorscripts in CI/CD environments vs. interactive sessions.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 20 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Scheduled task for terminal greeting
$scriptPath = "$(Get-Module ColorScripts-Enhanced).ModuleBase\Scripts\mandelbrot-zoom.ps1"
if (Test-Path $scriptPath) {
    &amp; $scriptPath
} else {
    Show-ColorScript -Name mandelbrot-zoom
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates running a specific colorscript as part of scheduled task or startup automation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/es/Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>