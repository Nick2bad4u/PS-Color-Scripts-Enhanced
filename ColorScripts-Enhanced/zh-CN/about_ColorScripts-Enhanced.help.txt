# ColorScripts-Enhanced Module Help

## about_ColorScripts-Enhanced

### SHORT DESCRIPTION
增强的 PowerShell ColorScripts，具有高性能缓存系统，用于在您的终端中显示美丽的 ANSI 艺术。

### LONG DESCRIPTION
ColorScripts-Enhanced 是一个 PowerShell 模块，提供 450++ 个美丽的 ANSI colorscripts 集合用于终端显示。它具有智能缓存系统，比传统脚本执行提供 6-19 倍的性能改进。

该模块自动将脚本输出缓存到您 AppData 文件夹中的集中位置，使后续运行时能够即时显示。缓存文件会在源脚本修改时自动验证和重新生成。

### FEATURES
- 450++ 个美丽的预制 colorscripts
- 高性能缓存系统（6-19 倍更快）
- 集中缓存位置（从任何目录工作）
- 脚本更改时自动缓存失效
- UTF-8 编码支持完美渲染
- 随机 colorscript 选择
- 轻松脚本发现和列出
- 配置文件助手用于单行启动集成
- 缓存和启动行为的持久配置助手
- 自定义脚本的元数据导出和脚手架工作流

### INSTALLATION

#### From PowerShell Gallery (Recommended)
```powershell
Install-Module -Name ColorScripts-Enhanced -Scope CurrentUser
```

自动将模块添加到您的配置文件：

```powershell
Add-ColorScriptProfile             # Import + Show-ColorScript
Add-ColorScriptProfile -SkipStartupScript
```

#### Manual Installation
1. 从 GitHub 下载模块
2. 提取到 PowerShell 模块路径：
   - User: `$HOME\Documents\PowerShell\Modules\ColorScripts-Enhanced`
   - System: `C:\Program Files\PowerShell\Modules\ColorScripts-Enhanced`
3. 导入模块：
   ```powershell
   Import-Module ColorScripts-Enhanced
   ```

### QUICK START

显示随机 colorscript：
```powershell
Show-ColorScript
# or use the alias
scs
```

显示特定 colorscript：
```powershell
Show-ColorScript -Name hearts
scs mandelbrot-zoom
```

列出所有可用 colorscripts：
```powershell
Show-ColorScript -List
Get-ColorScriptList
```

为所有脚本预构建缓存：
```powershell
New-ColorScriptCache
```

### COMMANDS

模块导出以下命令：

- `Show-ColorScript` - 显示 colorscripts（alias: scs）
- `Get-ColorScriptList` - 列出可用 colorscripts
- `New-ColorScriptCache` - 预生成缓存文件
- `Clear-ColorScriptCache` - 删除缓存文件
- `Add-ColorScriptProfile` - 将模块启动片段附加到 PowerShell 配置文件
- `Get-ColorScriptConfiguration` - 检查缓存和启动默认值
- `Set-ColorScriptConfiguration` - 持久保存自定义配置值
- `Reset-ColorScriptConfiguration` - 恢复配置默认值
- `Export-ColorScriptMetadata` - 导出脚本元数据用于自动化
- `New-ColorScript` - 搭建新的 colorscript 和元数据片段

使用 `Get-Help <CommandName> -Full` 获取每个命令的详细帮助。

### CACHE SYSTEM

缓存系统自动工作：

1. **首次运行**：脚本正常执行并缓存输出
2. **后续运行**：缓存输出即时显示（6-19 倍更快）
3. **自动刷新**：脚本修改时缓存重新生成

**缓存位置**：`$env:APPDATA\ColorScripts-Enhanced\cache`

**缓存优势**：
- 复杂 colorscripts 的即时显示
- 减少 CPU 使用
- 一致性能
- 从任何目录工作

### CONFIGURATION

#### Add to PowerShell Profile
在每次终端启动时显示随机 colorscript：

```powershell
Add-ColorScriptProfile                 # Import + Show-ColorScript
Add-ColorScriptProfile -SkipStartupScript
```

#### Customize Cache Location
缓存位置根据您的平台自动设置：

Windows：
```powershell
$env:APPDATA\ColorScripts-Enhanced\cache
```

macOS：
```powershell
~/Library/Application Support/ColorScripts-Enhanced/cache
```

Linux：
```powershell
~/.cache/ColorScripts-Enhanced
```

### NERD FONT GLYPHS

某些脚本显示 Nerd Font 图标（开发者字形、powerline 分隔符、复选标记）。安装补丁字体以使这些字符正确渲染：

1. 从 https://www.nerdfonts.com/ 下载字体（流行选择：Cascadia Code、JetBrainsMono、FiraCode）。
2. Windows：提取 `.zip`，选择 `.ttf` 文件，右键 → **为所有用户安装**。
   macOS：`brew install --cask font-caskaydia-cove-nerd-font` 或通过 Font Book 添加。
   Linux：将 `.ttf` 文件复制到 `~/.local/share/fonts`（或 `/usr/local/share/fonts`）并运行 `fc-cache -fv`。
3. 设置终端配置文件使用已安装的 Nerd Font。
4. 使用以下命令验证字形：

```powershell
Show-ColorScript -Name nerd-font-test
```

### EXAMPLES

#### Example 1: Random Colorscript on Startup
```powershell
# In your $PROFILE file:
Import-Module ColorScripts-Enhanced
Show-ColorScript
```

#### Example 2: Daily Different Colorscript
```powershell
# Use the date as seed for consistent daily script
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript
```

#### Example 3: Build Cache for Favorite Scripts
```powershell
New-ColorScriptCache -Name hearts,mandelbrot-zoom,galaxy-spiral
```

#### Example 4: Force Cache Rebuild
```powershell
New-ColorScriptCache -Force
```

### TROUBLESHOOTING

#### Scripts not displaying correctly
确保您的终端支持 UTF-8 和 ANSI 转义码：
```powershell
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
```

#### Cache not working
清除并重建缓存：
```powershell
Clear-ColorScriptCache -All
New-ColorScriptCache
```

#### Performance issues
每个脚本的首次运行会较慢，因为它正在构建缓存。预构建所有缓存：
```powershell
New-ColorScriptCache
```

### PERFORMANCE

使用缓存的典型性能改进：

| Script Type | Without Cache | With Cache | Speedup |
|------------|---------------|------------|---------|
| Simple | ~50ms | ~8ms | 6x |
| Medium | ~150ms | ~12ms | 12x |
| Complex | ~300ms | ~16ms | 19x |

### SCRIPT CATEGORIES

模块包括各种类别的脚本：

- **Geometric**: mandelbrot-zoom, apollonian-circles, sierpinski-carpet
- **Nature**: galaxy-spiral, aurora-bands, crystal-drift
- **Artistic**: kaleidoscope, rainbow-waves, prismatic-rain
- **Gaming**: doom, pacman, space-invaders
- **System**: colortest, nerd-font-test, terminal-benchmark
- **Logos**: arch, debian, ubuntu, windows

### SEE ALSO

- GitHub Repository: https://github.com/Nick2bad4u/ps-color-scripts-enhanced
- Original inspiration: shell-color-scripts
- PowerShell Documentation: https://docs.microsoft.com/powershell/

### KEYWORDS
- ANSI
- Terminal
- Art
- ASCII
- Color
- Scripts
- Cache
- Performance

### ADVANCED USAGE

#### Building Cache for Specific Categories
为最佳性能缓存 Geometric 类别中的所有脚本：
```powershell
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object { New-ColorScriptCache -Name $_.Name }
```

#### Performance Measurement
测量缓存的性能改进：
```powershell
# Uncached performance (cold start)
Remove-Module ColorScripts-Enhanced -ErrorAction SilentlyContinue
$uncached = Measure-Command {
    Import-Module ColorScripts-Enhanced
    Show-ColorScript -Name "mandelbrot-zoom" -NoCache
}

# Cached performance (warm start)
$cached = Measure-Command {
    Show-ColorScript -Name "mandelbrot-zoom"
}

Write-Host "Uncached: $($uncached.TotalMilliseconds)ms"
Write-Host "Cached: $($cached.TotalMilliseconds)ms"
Write-Host "Speedup: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```

#### Automation: Display Different Script Daily
设置您的配置文件每天显示不同的脚本：
```powershell
# In your $PROFILE file:
$seed = (Get-Date).DayOfYear
[System.Random]::new($seed).Next()
Get-Random -SetSeed $seed
Show-ColorScript
```

#### Pipeline Operations with Metadata
导出 colorscript 元数据以用于其他工具：
```powershell
# Export to JSON for web dashboard
Export-ColorScriptMetadata -Path ./dist/colorscripts.json -IncludeFileInfo

# Count scripts by category
Get-ColorScriptList -AsObject |
    Group-Object Category |
    Select-Object Name, Count |
    Sort-Object Count -Descending

# Find scripts with specific keywords
$scripts = Get-ColorScriptList -AsObject
$scripts |
    Where-Object { $_.Description -match 'fractal|mandelbrot' } |
    Select-Object Name, Category, Description
```

#### Cache Management for CI/CD Environments
为自动化部署配置和管理缓存：
```powershell
# Set temporary cache location for CI/CD
Set-ColorScriptConfiguration -CachePath $env:TEMP\colorscripts-cache

# Pre-build cache for deployment
$productionScripts = @('bars', 'arch', 'ubuntu', 'windows', 'rainbow-waves')
New-ColorScriptCache -Name $productionScripts -Force

# Verify cache health
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
Get-ChildItem $cacheDir -Filter "*.cache" | Measure-Object -Sum Length
```

#### Filtering and Display Workflows
自定义显示的高级过滤：
```powershell
# Display all recommended scripts with details
Get-ColorScriptList -Tag Recommended -Detailed

# Show geometric scripts with caching disabled for testing
Get-ColorScriptList -Category Geometric -Name "aurora-*" -AsObject |
    ForEach-Object { Show-ColorScript -Name $_.Name -NoCache }

# Export metadata filtered by category
Export-ColorScriptMetadata -IncludeFileInfo |
    Where-Object { $_.Category -eq 'Animated' } |
    ConvertTo-Json |
    Out-File "./animated-scripts.json"
```

### ENVIRONMENT VARIABLES

模块尊重以下环境变量：

- **COLORSCRIPTS_CACHE**: 覆盖默认缓存位置
- **PSModulePath**: 影响模块发现位置

### PERFORMANCE TUNING

#### Typical Performance Metrics
| Script Complexity | Without Cache | With Cache | Improvement |
|------------------|---------------|------------|-------------|
| Simple (50-100ms) | ~50ms | ~8ms | 6x faster |
| Medium (100-200ms) | ~150ms | ~12ms | 12x faster |
| Complex (200-300ms) | ~300ms | ~16ms | 19x faster |

#### Cache Size Information
- 平均缓存文件大小：每个脚本 2-50KB
- 所有脚本的总缓存大小：~2-5MB
- 缓存位置：使用适合 OS 的路径以最小化占用空间

### TROUBLESHOOTING ADVANCED ISSUES

#### Module Not Found Error
```powershell
# Check if module is in PSModulePath
Get-Module ColorScripts-Enhanced -ListAvailable

# List available module paths
$env:PSModulePath -split ';'

# Import from explicit path if necessary
Import-Module "C:\Path\To\ColorScripts-Enhanced\ColorScripts-Enhanced.psd1"
```

#### Cache Corruption
完全清除并重建：
```powershell
# Remove module from session
Remove-Module ColorScripts-Enhanced -Force

# Clear all cache files
Clear-ColorScriptCache -All -Confirm:$false

# Reimport and rebuild cache
Import-Module ColorScripts-Enhanced
New-ColorScriptCache -Force
```

#### Performance Degradation
如果性能随时间恶化：
```powershell
# Check cache directory size
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
$size = (Get-ChildItem $cacheDir -Filter "*.cache" |
    Measure-Object -Sum Length).Sum
Write-Host "Cache size: $([math]::Round($size / 1MB, 2)) MB"

# Clear old cache and rebuild
Clear-ColorScriptCache -All
New-ColorScriptCache
```

### PLATFORM-SPECIFIC NOTES

#### Windows PowerShell 5.1
- 仅限于 Windows
- 使用 `powershell.exe` 运行脚本
- 某些高级功能可能不可用
- 推荐升级到 PowerShell 7+

#### PowerShell 7+ (Cross-Platform)
- 在 Windows、macOS 和 Linux 上完全支持
- 使用 `pwsh` 命令
- 所有功能完全正常
- 推荐用于新部署

### DETAILED COMMAND REFERENCE

#### Core Commands Overview
模块提供 10 个主要命令用于管理和显示 colorscripts：

**Display Commands:**
- `Show-ColorScript` - 以多种模式显示 colorscripts（random、named、list、all）
- `Get-ColorScriptList` - 列出具有详细元数据的可用 colorscripts

**Cache Management:**
- `New-ColorScriptCache` - 构建缓存文件以提高性能
- `Clear-ColorScriptCache` - 删除具有过滤选项的缓存文件
- `Build-ColorScriptCache` - New-ColorScriptCache 的别名

**Configuration:**
- `Get-ColorScriptConfiguration` - 检索当前配置设置
- `Set-ColorScriptConfiguration` - 持久保存配置更改
- `Reset-ColorScriptConfiguration` - 恢复出厂默认值

**Profile Integration:**
- `Add-ColorScriptProfile` - 将模块集成到 PowerShell 配置文件

**Development:**
- `New-ColorScript` - 搭建新的 colorscript 模板
- `Export-ColorScriptMetadata` - 导出元数据用于自动化

#### Command Usage Patterns

**Pattern 1: Quick Display**
```powershell
Show-ColorScript                    # Random colorscript
scs                                 # Using module alias
Show-ColorScript -Name aurora       # Specific script
```

**Pattern 2: Discovery and Listing**
```powershell
Get-ColorScriptList                 # All scripts
Get-ColorScriptList -Detailed       # With tags and descriptions
Get-ColorScriptList -Category Nature # Filter by category
Get-ColorScriptList -Tag Animated   # Filter by tag
```

**Pattern 3: Performance Optimization**
```powershell
New-ColorScriptCache                # Build all caches
New-ColorScriptCache -Name bars     # Build specific cache
New-ColorScriptCache -Category Geometric  # Build category
```

**Pattern 4: Cache Maintenance**
```powershell
Clear-ColorScriptCache -All         # Remove all caches
Clear-ColorScriptCache -Name "test-*"  # Clear pattern
Clear-ColorScriptCache -Category Demo   # Clear by category
```

### DETAILED WORKFLOW EXAMPLES

#### Workflow 1: Initial Setup and Configuration
```powershell
# Step 1: Install the module
Install-Module -Name ColorScripts-Enhanced -Scope CurrentUser

# Step 2: Add to profile for automatic startup
Add-ColorScriptProfile

# Step 3: Pre-build cache for optimal performance
New-ColorScriptCache

# Step 4: Verify setup
Get-ColorScriptConfiguration
```

#### Workflow 2: Daily Use with Rotation
```powershell
# In $PROFILE file, add:
Import-Module ColorScripts-Enhanced

# Display different script each day based on date
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript -Random

# Alternative: Show specific category
Show-ColorScript -Category Geometric -Random
```

#### Workflow 3: Automation Integration
```powershell
# Export metadata for external tools
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$metadata | ConvertTo-Json | Out-File "./colorscripts.json"

# Use in automation: cycle through scripts
$scripts = Get-ColorScriptList -Tag Recommended -AsObject
$scripts | ForEach-Object { Show-ColorScript -Name $_.Name; Start-Sleep -Seconds 2 }
```

#### Workflow 4: Performance Monitoring
```powershell
# Measure cache effectiveness
$uncached = Measure-Command { Show-ColorScript -Name mandelbrot-zoom -NoCache }
$cached = Measure-Command { Show-ColorScript -Name mandelbrot-zoom }

Write-Host "Uncached: $($uncached.TotalMilliseconds)ms"
Write-Host "Cached: $($cached.TotalMilliseconds)ms"
Write-Host "Improvement: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```

#### Workflow 5: Customization and Development
```powershell
# Create custom colorscript
New-ColorScript -Name "my-custom-art" -Category "Custom" -Tag "MyTag" -GenerateMetadataSnippet

# Edit the script
code "$env:USERPROFILE\Documents\PowerShell\Modules\ColorScripts-Enhanced\Scripts\my-custom-art.ps1"

# Add metadata (use guidance from generation)
# Edit ScriptMetadata.psd1

# Cache and test
New-ColorScriptCache -Name "my-custom-art" -Force
Show-ColorScript -Name "my-custom-art"
```

### INTEGRATION SCENARIOS

#### Scenario 1: Terminal Welcome Screen
```powershell
# In profile:
$hour = (Get-Date).Hour
if ($hour -ge 6 -and $hour -lt 12) {
    Show-ColorScript -Tag "bright,morning" -Random
} elseif ($hour -ge 12 -and $hour -lt 18) {
    Show-ColorScript -Category Geometric -Random
} else {
    Show-ColorScript -Tag "night,dark" -Random
}
```

#### Scenario 2: CI/CD Pipeline
```powershell
# Build phase decoration
Show-ColorScript -Name "bars" -NoCache  # Quick display without cache
New-ColorScriptCache -Category "Build" -Force  # Prepare for next run

# In CI/CD context:
$env:CI = $true
if ($env:CI) {
    Show-ColorScript -NoCache  # Avoid cache in ephemeral environments
}
```

#### Scenario 3: Administrative Dashboards
```powershell
# Display system-themed colorscripts
$os = if ($PSVersionTable.PSVersion.Major -ge 7) { "pwsh" } else { "powershell" }
Show-ColorScript -Name $os -PassThru | Out-Null

# Show status information
Get-ColorScriptList -Tag "system" -AsObject |
    ForEach-Object { Write-Host "Available: $($_.Name)" }
```

#### Scenario 4: Educational Presentations
```powershell
# Interactive colorscript showcase
Show-ColorScript -All -WaitForInput
# Users can press space to advance, q to quit

# Or with specific category
Show-ColorScript -All -Category Abstract -WaitForInput
```

#### Scenario 5: Multi-User Environment
```powershell
# Per-user configuration
Set-ColorScriptConfiguration -CachePath "\\shared\cache\$env:USERNAME"
Set-ColorScriptConfiguration -DefaultScript "team-logo"

# Shared scripts with user customization
Get-ColorScriptList -AsObject |
    Where-Object { $_.Tags -contains "shared" } |
    ForEach-Object { Show-ColorScript -Name $_.Name }
```

### ADVANCED TOPICS

#### Topic 1: Cache Strategy Selection
不同场景的不同缓存策略：

**Full Cache Strategy** (Optimal for Workstations)
```powershell
New-ColorScriptCache              # Cache all 450++ scripts
# Pros: Maximum performance, instant display
# Cons: Uses 2-5MB disk space
```

**Selective Cache Strategy** (Optimal for Portable/CI)
```powershell
Get-ColorScriptList -Tag Recommended -AsObject |
    ForEach-Object { New-ColorScriptCache -Name $_.Name }
# Pros: Balanced performance and storage
# Cons: Requires more setup
```

**No Cache Strategy** (Optimal for Development)
```powershell
Show-ColorScript -NoCache
# Pros: See script changes immediately
# Cons: Slower display, more resource usage
```

#### Topic 2: Metadata Organization
按元数据理解和组织 colorscripts：

**Categories** - 广泛的组织分组：
- Geometric: 分形、数学模式
- Nature: 景观、有机主题
- Artistic: 创意、抽象设计
- Gaming: 游戏相关主题
- System: OS/技术主题

**Tags** - 具体描述符：
- Recommended: 为一般使用而策划
- Animated: 移动/变化模式
- Colorful: 多色调色板
- Minimal: 简单、干净设计
- Retro: 经典 80 年代/90 年代美学

#### Topic 3: Performance Optimization Tips
```powershell
# Tip 1: Pre-load frequently used scripts
New-ColorScriptCache -Name bars,arch,mandelbrot-zoom,aurora-waves

# Tip 2: Monitor cache staleness
$old = Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache" |
    Where-Object { $_.LastWriteTime -lt (Get-Date).AddMonths(-1) }

# Tip 3: Use category filtering for faster selection
Show-ColorScript -Category Geometric  # Faster than full set

# Tip 4: Enable verbose output for debugging
Show-ColorScript -Name aurora -Verbose
```

#### Topic 4: Cross-Platform Considerations
```powershell
# Windows Terminal specific
if ($env:WT_SESSION) {
    Show-ColorScript  # Full color support
}

# VS Code integrated terminal
if ($env:TERM_PROGRAM -eq "vscode") {
    Show-ColorScript -Name nerd-font-test  # Font support
}

# SSH session
if ($env:SSH_CONNECTION) {
    Show-ColorScript -NoCache  # Avoid slow network cache I/O
}

# Linux/macOS terminal
if ($PSVersionTable.PSVersion.Major -ge 7) {
    Show-ColorScript -Category Nature  # Use Unix-friendly scripts
}
```

#### Topic 5: Scripting and Automation
```powershell
# Create reusable function for daily greeting
function Show-DailyColorScript {
    $seed = (Get-Date).DayOfYear
    Get-Random -SetSeed $seed
    Show-ColorScript -Random -Category @("Geometric", "Nature") -Random
}

# Use in profile
Show-DailyColorScript

# Create script rotation function
function Invoke-ColorScriptSlideshow {
    param(
        [int]$Interval = 3,
        [string[]]$Category,
        [int]$Count
    )

    $scripts = if ($Category) {
        Get-ColorScriptList -Category $Category -AsObject
    } else {
        Get-ColorScriptList -AsObject
    }

    $scripts | Select-Object -First $Count | ForEach-Object {
        Show-ColorScript -Name $_.Name
        Start-Sleep -Seconds $Interval
    }
}

# Usage
Invoke-ColorScriptSlideshow -Interval 2 -Category Geometric -Count 5
```

### TROUBLESHOOTING GUIDE

#### Issue 1: Scripts Not Displaying Correctly
**Symptoms**: Garbled characters or missing colors
**Solutions**:
```powershell
# Set UTF-8 encoding
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Check terminal supports UTF-8
Write-Host "Test: ✓ ✗ ◆ ○" -ForegroundColor Green

# Use nerd font test
Show-ColorScript -Name nerd-font-test

# If still broken, disable cache
Show-ColorScript -Name yourscript -NoCache
```

#### Issue 2: Module Import Failures
**Symptoms**: "Module not found" or import errors
**Solutions**:
```powershell
# Check if module exists
Get-Module -ListAvailable | Where-Object Name -like "*Color*"

# Check PSModulePath
$env:PSModulePath -split [System.IO.Path]::PathSeparator

# Reinstall module
Remove-Module ColorScripts-Enhanced
Uninstall-Module ColorScripts-Enhanced
Install-Module -Name ColorScripts-Enhanced -Force
```

#### Issue 3: Cache Not Being Used
**Symptoms**: Scripts run slowly every time
**Solutions**:
```powershell
# Verify cache exists
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
Get-ChildItem $cacheDir -Filter "*.cache" | Measure-Object

# Rebuild cache
Remove-Item "$cacheDir\*" -Confirm:$false
New-ColorScriptCache -Force

# Check for cache path issues
Get-ColorScriptConfiguration | Select-Object -ExpandProperty Cache
```

#### Issue 4: Profile Not Running
**Symptoms**: Colorscript doesn't show on PowerShell startup
**Solutions**:
```powershell
# Verify profile exists
Test-Path $PROFILE

# Check profile content
Get-Content $PROFILE | Select-String "ColorScripts"

# Repair profile
Add-ColorScriptProfile -Force

# Test profile manually
. $PROFILE
```

### FAQ

**Q: How many colorscripts are available?**
A: 450++ 个内置脚本跨越多个类别和标签

**Q: How much disk space does caching use?**
A: 所有脚本总共大约 2-5MB，每个脚本约 2-50KB

**Q: Can I use colorscripts in scripts/automation?**
A: 是的，使用 `-ReturnText` 捕获输出或 `-PassThru` 获取元数据

**Q: How do I create custom colorscripts?**
A: 使用 `New-ColorScript` 搭建模板，然后添加您的 ANSI 艺术

**Q: What if I don't want colors on startup?**
A: 使用 `Add-ColorScriptProfile -SkipStartupScript` 导入而不自动显示

**Q: Can I use this on macOS/Linux?**
A: 是的，使用 PowerShell 7+ 它是跨平台的

**Q: How do I share colorscripts with colleagues?**
A: 使用 `Export-ColorScriptMetadata` 导出元数据或共享脚本文件

**Q: Is caching always enabled?**
A: 不是，使用 `-NoCache` 在开发/测试中禁用缓存

### BEST PRACTICES

1. **Install from PowerShell Gallery**: 使用 `Install-Module` 进行自动更新
2. **Add to Profile**: 使用 `Add-ColorScriptProfile` 进行自动启动集成
3. **Pre-build Cache**: 安装后运行 `New-ColorScriptCache` 以获得最佳性能
4. **Use Meaningful Naming**: 创建自定义脚本时使用描述性名称
5. **Keep Metadata Updated**: 添加脚本时更新 ScriptMetadata.psd1
6. **Test in Different Terminals**: 验证脚本在您的环境中正确显示
7. **Monitor Cache Size**: 定期检查缓存目录大小并在需要时清理
8. **Use Categories/Tags**: 利用过滤以更快发现脚本
9. **Document Custom Scripts**: 为自定义 colorscripts 添加描述和标签
10. **Backup Configuration**: 在重大更改前导出配置

### VERSION HISTORY

#### Version 2025.10.09
- 具有 OS 范围缓存的增强缓存系统
- 6-19 倍性能改进
- AppData 中的集中缓存位置
- 包含 450++ 个 colorscripts
- 完整的基于注释的帮助文档
- 模块清单改进
- 高级配置管理
- 元数据导出功能
- 配置文件集成助手

### COPYRIGHT

Copyright (c) 2025. All rights reserved.

### LICENSE

Licensed under MIT License. See LICENSE file for details.
