# ColorScripts-Enhanced Module Help

## about_ColorScripts-Enhanced

### SHORT DESCRIPTION
Erweiterte PowerShell ColorScripts mit Hochleistungs-Caching-System zur Anzeige schöner ANSI-Kunst in Ihrem Terminal.

### LONG DESCRIPTION
ColorScripts-Enhanced ist ein PowerShell-Modul, das eine Sammlung von 450++ schönen ANSI-ColorScripts für die Terminal-Anzeige bereitstellt. Es verfügt über ein intelligentes Caching-System, das 6-19x Leistungsverbesserungen gegenüber der traditionellen Skriptausführung bietet.

Das Modul speichert Skriptausgaben automatisch an einem zentralen Ort in Ihrem AppData-Ordner, wodurch eine sofortige Anzeige bei nachfolgenden Ausführungen ermöglicht wird. Cache-Dateien werden automatisch validiert und neu generiert, wenn Quellskripte geändert werden.

### FEATURES
- 450++ schöne vorgefertigte ColorScripts
- Hochleistungs-Caching-System (6-19x schneller)
- Zentraler Cache-Speicherort (funktioniert aus jedem Verzeichnis)
- Automatische Cache-Invalidierung bei Skriptänderungen
- UTF-8-Kodierungsunterstützung für perfekte Darstellung
- Zufällige ColorScript-Auswahl
- Einfache Skriptentdeckung und Auflistung
- Profil-Helfer für einzeilige Startintegration
- Persistente Konfigurationshelfer für Cache- und Startverhalten
- Metadaten-Export und Scaffolding-Workflows für benutzerdefinierte Skripte

### INSTALLATION

#### From PowerShell Gallery (Recommended)
```powershell
Install-Module -Name ColorScripts-Enhanced -Scope CurrentUser
```

Fügen Sie das Modul automatisch zu Ihrem Profil hinzu:

```powershell
Add-ColorScriptProfile             # Import + Show-ColorScript
Add-ColorScriptProfile -SkipStartupScript
```

#### Manual Installation
1. Laden Sie das Modul von GitHub herunter
2. Entpacken Sie in einen PowerShell-Modulpfad:
   - Benutzer: `$HOME\Documents\PowerShell\Modules\ColorScripts-Enhanced`
   - System: `C:\Program Files\PowerShell\Modules\ColorScripts-Enhanced`
3. Importieren Sie das Modul:
   ```powershell
   Import-Module ColorScripts-Enhanced
   ```

### QUICK START

Zeigen Sie ein zufälliges ColorScript an:
```powershell
Show-ColorScript
# oder verwenden Sie den Alias
scs
```

Zeigen Sie ein bestimmtes ColorScript an:
```powershell
Show-ColorScript -Name hearts
scs mandelbrot-zoom
```

Listen Sie alle verfügbaren ColorScripts auf:
```powershell
Show-ColorScript -List
Get-ColorScriptList
```

Erstellen Sie den Cache für alle Skripte im Voraus:
```powershell
New-ColorScriptCache
```

### COMMANDS

Das Modul exportiert die folgenden Befehle:

- `Show-ColorScript` - ColorScripts anzeigen (Alias: scs)
- `Get-ColorScriptList` - Verfügbare ColorScripts auflisten
- `New-ColorScriptCache` - Cache-Dateien im Voraus generieren
- `Clear-ColorScriptCache` - Cache-Dateien entfernen
- `Add-ColorScriptProfile` - Modul-Start-Snippet an ein PowerShell-Profil anhängen
- `Get-ColorScriptConfiguration` - Cache- und Start-Standardeinstellungen überprüfen
- `Set-ColorScriptConfiguration` - Benutzerdefinierte Konfigurationswerte dauerhaft speichern
- `Reset-ColorScriptConfiguration` - Konfigurations-Standardeinstellungen wiederherstellen
- `Export-ColorScriptMetadata` - Skript-Metadaten für Automatisierung exportieren
- `New-ColorScript` - Ein neues ColorScript und Metadaten-Snippet erstellen

Verwenden Sie `Get-Help <CommandName> -Full` für detaillierte Hilfe zu jedem Befehl.

### CACHE SYSTEM

Das Caching-System funktioniert automatisch:

1. **Erster Lauf**: Das Skript wird normal ausgeführt und die Ausgabe wird zwischengespeichert
2. **Nachfolgende Läufe**: Die zwischengespeicherte Ausgabe wird sofort angezeigt (6-19x schneller)
3. **Automatische Aktualisierung**: Der Cache wird neu generiert, wenn das Skript geändert wird

**Cache-Speicherort**: `$env:APPDATA\ColorScripts-Enhanced\cache`

**Cache-Vorteile**:
- Sofortige Anzeige komplexer ColorScripts
- Reduzierte CPU-Nutzung
- Konsistente Leistung
- Funktioniert aus jedem Verzeichnis

### CONFIGURATION

#### Zum PowerShell-Profil hinzufügen
Zeigen Sie ein zufälliges ColorScript bei jedem Terminal-Start an:

```powershell
Add-ColorScriptProfile                 # Import + Show-ColorScript
Add-ColorScriptProfile -SkipStartupScript
```

#### Cache-Speicherort anpassen
Der Cache-Speicherort wird automatisch basierend auf Ihrer Plattform festgelegt:

Windows:
```powershell
$env:APPDATA\ColorScripts-Enhanced\cache
```

macOS:
```powershell
~/Library/Application Support/ColorScripts-Enhanced/cache
```

Linux:
```powershell
~/.cache/ColorScripts-Enhanced
```

### NERD FONT GLYPHS

Some scripts display Nerd Font icons (developer glyphs, powerline separators, checkmarks). Install a patched font so those characters render correctly:

1. Download a font from https://www.nerdfonts.com/ (popular choices: Cascadia Code, JetBrainsMono, FiraCode).
2. Windows: extract the `.zip`, select the `.ttf` files, right-click → **Install for all users**.
   macOS: `brew install --cask font-caskaydia-cove-nerd-font` or add via Font Book.
   Linux: copy `.ttf` files to `~/.local/share/fonts` (or `/usr/local/share/fonts`) and run `fc-cache -fv`.
3. Set your terminal profile to use the installed Nerd Font.
4. Verify glyphs with:

```powershell
Show-ColorScript -Name nerd-font-test
```

### EXAMPLES

#### Example 1: Random Colorscript on Startup
```powershell
# In your $PROFILE file:
Import-Module ColorScripts-Enhanced
Show-ColorScript
```

#### Example 2: Daily Different Colorscript
```powershell
# Use the date as seed for consistent daily script
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript
```

#### Example 3: Build Cache for Favorite Scripts
```powershell
New-ColorScriptCache -Name hearts,mandelbrot-zoom,galaxy-spiral
```

#### Example 4: Force Cache Rebuild
```powershell
New-ColorScriptCache -Force
```

### TROUBLESHOOTING

#### Scripts not displaying correctly
Ensure your terminal supports UTF-8 and ANSI escape codes:
```powershell
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
```

#### Cache not working
Clear and rebuild cache:
```powershell
Clear-ColorScriptCache -All
New-ColorScriptCache
```

#### Performance issues
The first run of each script will be slower as it builds cache. Pre-build all caches:
```powershell
New-ColorScriptCache
```

### PERFORMANCE

Typical performance improvements with caching:

| Script Type | Without Cache | With Cache | Speedup |
|------------|---------------|------------|---------|
| Simple | ~50ms | ~8ms | 6x |
| Medium | ~150ms | ~12ms | 12x |
| Complex | ~300ms | ~16ms | 19x |

### SCRIPT CATEGORIES

The module includes scripts in various categories:

- **Geometric**: mandelbrot-zoom, apollonian-circles, sierpinski-carpet
- **Nature**: galaxy-spiral, aurora-bands, crystal-drift
- **Artistic**: kaleidoscope, rainbow-waves, prismatic-rain
- **Gaming**: doom, pacman, space-invaders
- **System**: colortest, nerd-font-test, terminal-benchmark
- **Logos**: arch, debian, ubuntu, windows

### SEE ALSO

- GitHub Repository: https://github.com/Nick2bad4u/ps-color-scripts-enhanced
- Original inspiration: shell-color-scripts
- PowerShell Documentation: https://docs.microsoft.com/powershell/

### KEYWORDS
- ANSI
- Terminal
- Art
- ASCII
- Color
- Scripts
- Cache
- Performance

### ADVANCED USAGE

#### Building Cache for Specific Categories
Cache all scripts in the Geometric category for optimal performance:
```powershell
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object { New-ColorScriptCache -Name $_.Name }
```

#### Performance Measurement
Measure the performance improvement from caching:
```powershell
# Uncached performance (cold start)
Remove-Module ColorScripts-Enhanced -ErrorAction SilentlyContinue
$uncached = Measure-Command {
    Import-Module ColorScripts-Enhanced
    Show-ColorScript -Name "mandelbrot-zoom" -NoCache
}

# Cached performance (warm start)
$cached = Measure-Command {
    Show-ColorScript -Name "mandelbrot-zoom"
}

Write-Host "Uncached: $($uncached.TotalMilliseconds)ms"
Write-Host "Cached: $($cached.TotalMilliseconds)ms"
Write-Host "Speedup: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```

#### Automation: Display Different Script Daily
Set up your profile to show a different script each day:
```powershell
# In your $PROFILE file:
$seed = (Get-Date).DayOfYear
[System.Random]::new($seed).Next()
Get-Random -SetSeed $seed
Show-ColorScript
```

#### Pipeline Operations with Metadata
Export colorscript metadata for use in other tools:
```powershell
# Export to JSON for web dashboard
Export-ColorScriptMetadata -Path ./dist/colorscripts.json -IncludeFileInfo

# Count scripts by category
Get-ColorScriptList -AsObject |
    Group-Object Category |
    Select-Object Name, Count |
    Sort-Object Count -Descending

# Find scripts with specific keywords
$scripts = Get-ColorScriptList -AsObject
$scripts |
    Where-Object { $_.Description -match 'fractal|mandelbrot' } |
    Select-Object Name, Category, Description
```

#### Cache Management for CI/CD Environments
Configure and manage cache for automated deployments:
```powershell
# Set temporary cache location for CI/CD
Set-ColorScriptConfiguration -CachePath $env:TEMP\colorscripts-cache

# Pre-build cache for deployment
$productionScripts = @('bars', 'arch', 'ubuntu', 'windows', 'rainbow-waves')
New-ColorScriptCache -Name $productionScripts -Force

# Verify cache health
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
Get-ChildItem $cacheDir -Filter "*.cache" | Measure-Object -Sum Length
```

#### Filtering and Display Workflows
Advanced filtering for customized displays:
```powershell
# Display all recommended scripts with details
Get-ColorScriptList -Tag Recommended -Detailed

# Show geometric scripts with caching disabled for testing
Get-ColorScriptList -Category Geometric -Name "aurora-*" -AsObject |
    ForEach-Object { Show-ColorScript -Name $_.Name -NoCache }

# Export metadata filtered by category
Export-ColorScriptMetadata -IncludeFileInfo |
    Where-Object { $_.Category -eq 'Animated' } |
    ConvertTo-Json |
    Out-File "./animated-scripts.json"
```

### ENVIRONMENT VARIABLES

The module respects the following environment variables:

- **COLORSCRIPTS_CACHE**: Override the default cache location
- **PSModulePath**: Affects where the module is discovered

### PERFORMANCE TUNING

#### Typical Performance Metrics
| Script Complexity | Without Cache | With Cache | Improvement |
|------------------|---------------|------------|-------------|
| Simple (50-100ms) | ~50ms | ~8ms | 6x faster |
| Medium (100-200ms) | ~150ms | ~12ms | 12x faster |
| Complex (200-300ms) | ~300ms | ~16ms | 19x faster |

#### Cache Size Information
- Average cache file size: 2-50KB per script
- Total cache size for all scripts: ~2-5MB
- Cache location: Uses OS-appropriate paths for minimal footprint

### TROUBLESHOOTING ADVANCED ISSUES

#### Module Not Found Error
```powershell
# Check if module is in PSModulePath
Get-Module ColorScripts-Enhanced -ListAvailable

# List available module paths
$env:PSModulePath -split ';'

# Import from explicit path if necessary
Import-Module "C:\Path\To\ColorScripts-Enhanced\ColorScripts-Enhanced.psd1"
```

#### Cache Corruption
Clear and rebuild completely:
```powershell
# Remove module from session
Remove-Module ColorScripts-Enhanced -Force

# Clear all cache files
Clear-ColorScriptCache -All -Confirm:$false

# Reimport and rebuild cache
Import-Module ColorScripts-Enhanced
New-ColorScriptCache -Force
```

#### Performance Degradation
If performance worsens over time:
```powershell
# Check cache directory size
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
$size = (Get-ChildItem $cacheDir -Filter "*.cache" |
    Measure-Object -Sum Length).Sum
Write-Host "Cache size: $([math]::Round($size / 1MB, 2)) MB"

# Clear old cache and rebuild
Clear-ColorScriptCache -All
New-ColorScriptCache
```

### PLATFORM-SPECIFIC NOTES

#### Windows PowerShell 5.1
- Beschränkt auf Windows
- Verwenden Sie `powershell.exe`, um Skripte auszuführen
- Einige erweiterte Funktionen sind möglicherweise nicht verfügbar
- Es wird empfohlen, auf PowerShell 7+ zu aktualisieren

#### PowerShell 7+ (Cross-Platform)
- Vollständige Unterstützung unter Windows, macOS und Linux
- Verwenden Sie den Befehl `pwsh`
- Alle Funktionen sind vollständig funktional
- Empfohlen für neue Bereitstellungen

### DETAILED COMMAND REFERENCE

#### Core Commands Overview
Das Modul bietet 10 Hauptbefehle zur Verwaltung und Anzeige von ColorScripts:

**Display Commands:**
- `Show-ColorScript` - ColorScripts mit mehreren Modi anzeigen (zufällig, benannt, Liste, alle)
- `Get-ColorScriptList` - Verfügbare ColorScripts mit detaillierten Metadaten auflisten

**Cache Management:**
- `New-ColorScriptCache` - Cache-Dateien für Leistung erstellen
- `Clear-ColorScriptCache` - Cache-Dateien mit Filteroptionen entfernen
- `Build-ColorScriptCache` - Alias für New-ColorScriptCache

**Configuration:**
- `Get-ColorScriptConfiguration` - Aktuelle Konfigurationseinstellungen abrufen
- `Set-ColorScriptConfiguration` - Konfigurationsänderungen dauerhaft speichern
- `Reset-ColorScriptConfiguration` - Werkseinstellungen wiederherstellen

**Profile Integration:**
- `Add-ColorScriptProfile` - Modul in PowerShell-Profil integrieren

**Development:**
- `New-ColorScript` - Neue ColorScript-Vorlage erstellen
- `Export-ColorScriptMetadata` - Metadaten für Automatisierung exportieren

#### Command Usage Patterns

**Pattern 1: Quick Display**
```powershell
Show-ColorScript                    # Zufälliges ColorScript
scs                                 # Modul-Alias verwenden
Show-ColorScript -Name aurora       # Spezifisches Skript
```

**Pattern 2: Discovery and Listing**
```powershell
Get-ColorScriptList                 # Alle Skripte
Get-ColorScriptList -Detailed       # Mit Tags und Beschreibungen
Get-ColorScriptList -Category Nature # Nach Kategorie filtern
Get-ColorScriptList -Tag Animated   # Nach Tag filtern
```

**Pattern 3: Performance Optimization**
```powershell
New-ColorScriptCache                # Alle Caches erstellen
New-ColorScriptCache -Name bars     # Spezifischen Cache erstellen
New-ColorScriptCache -Category Geometric  # Kategorie erstellen
```

**Pattern 4: Cache Maintenance**
```powershell
Clear-ColorScriptCache -All         # Alle Caches entfernen
Clear-ColorScriptCache -Name "test-*"  # Muster löschen
Clear-ColorScriptCache -Category Demo   # Nach Kategorie löschen
```

### DETAILED WORKFLOW EXAMPLES

#### Workflow 1: Initial Setup and Configuration
```powershell
# Schritt 1: Das Modul installieren
Install-Module -Name ColorScripts-Enhanced -Scope CurrentUser

# Schritt 2: Zum Profil für automatischen Start hinzufügen
Add-ColorScriptProfile

# Schritt 3: Cache für optimale Leistung im Voraus erstellen
New-ColorScriptCache

# Schritt 4: Setup überprüfen
Get-ColorScriptConfiguration
```

#### Workflow 2: Daily Use with Rotation
```powershell
# In der $PROFILE-Datei hinzufügen:
Import-Module ColorScripts-Enhanced

# Verschiedenes Skript täglich basierend auf Datum anzeigen
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript -Random

# Alternative: Spezifische Kategorie anzeigen
Show-ColorScript -Category Geometric -Random
```

#### Workflow 3: Automation Integration
```powershell
# Metadaten für externe Tools exportieren
$metadata = Export-ColorScriptMetadata -IncludeFileInfo -IncludeCacheInfo
$metadata | ConvertTo-Json | Out-File "./colorscripts.json"

# In Automatisierung verwenden: Skripte durchlaufen
$scripts = Get-ColorScriptList -Tag Recommended -AsObject
$scripts | ForEach-Object { Show-ColorScript -Name $_.Name; Start-Sleep -Seconds 2 }
```

#### Workflow 4: Performance Monitoring
```powershell
# Cache-Effektivität messen
$uncached = Measure-Command { Show-ColorScript -Name mandelbrot-zoom -NoCache }
$cached = Measure-Command { Show-ColorScript -Name mandelbrot-zoom }

Write-Host "Uncached: $($uncached.TotalMilliseconds)ms"
Write-Host "Cached: $($cached.TotalMilliseconds)ms"
Write-Host "Improvement: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```

#### Workflow 5: Customization and Development
```powershell
# Benutzerdefiniertes ColorScript erstellen
New-ColorScript -Name "my-custom-art" -Category "Custom" -Tag "MyTag" -GenerateMetadataSnippet

# Das Skript bearbeiten
code "$env:USERPROFILE\Documents\PowerShell\Modules\ColorScripts-Enhanced\Scripts\my-custom-art.ps1"

# Metadaten hinzufügen (Anleitung aus Generierung verwenden)
# Edit ScriptMetadata.psd1

# Cache und testen
New-ColorScriptCache -Name "my-custom-art" -Force
Show-ColorScript -Name "my-custom-art"
```

### INTEGRATION SCENARIOS

#### Scenario 1: Terminal Welcome Screen
```powershell
# In profile:
$hour = (Get-Date).Hour
if ($hour -ge 6 -and $hour -lt 12) {
    Show-ColorScript -Tag "bright,morning" -Random
} elseif ($hour -ge 12 -and $hour -lt 18) {
    Show-ColorScript -Category Geometric -Random
} else {
    Show-ColorScript -Tag "night,dark" -Random
}
```

#### Scenario 2: CI/CD Pipeline
```powershell
# Build phase decoration
Show-ColorScript -Name "bars" -NoCache  # Quick display without cache
New-ColorScriptCache -Category "Build" -Force  # Prepare for next run

# In CI/CD context:
$env:CI = $true
if ($env:CI) {
    Show-ColorScript -NoCache  # Avoid cache in ephemeral environments
}
```

#### Scenario 3: Administrative Dashboards
```powershell
# Display system-themed colorscripts
$os = if ($PSVersionTable.PSVersion.Major -ge 7) { "pwsh" } else { "powershell" }
Show-ColorScript -Name $os -PassThru | Out-Null

# Show status information
Get-ColorScriptList -Tag "system" -AsObject |
    ForEach-Object { Write-Host "Available: $($_.Name)" }
```

#### Scenario 4: Educational Presentations
```powershell
# Interactive colorscript showcase
Show-ColorScript -All -WaitForInput
# Users can press space to advance, q to quit

# Or with specific category
Show-ColorScript -All -Category Abstract -WaitForInput
```

#### Scenario 5: Multi-User Environment
```powershell
# Per-user configuration
Set-ColorScriptConfiguration -CachePath "\\shared\cache\$env:USERNAME"
Set-ColorScriptConfiguration -DefaultScript "team-logo"

# Shared scripts with user customization
Get-ColorScriptList -AsObject |
    Where-Object { $_.Tags -contains "shared" } |
    ForEach-Object { Show-ColorScript -Name $_.Name }
```

### ADVANCED TOPICS

#### Topic 1: Cache Strategy Selection
Different caching strategies for different scenarios:

**Full Cache Strategy** (Optimal for Workstations)
```powershell
New-ColorScriptCache              # Cache all 450++ scripts
# Pros: Maximum performance, instant display
# Cons: Uses 2-5MB disk space
```

**Selective Cache Strategy** (Optimal for Portable/CI)
```powershell
Get-ColorScriptList -Tag Recommended -AsObject |
    ForEach-Object { New-ColorScriptCache -Name $_.Name }
# Pros: Balanced performance and storage
# Cons: Requires more setup
```

**No Cache Strategy** (Optimal for Development)
```powershell
Show-ColorScript -NoCache
# Pros: See script changes immediately
# Cons: Slower display, more resource usage
```

#### Topic 2: Metadata Organization
Understanding and organizing colorscripts by metadata:

**Categories** - Broad organizational groupings:
- Geometric: Fractals, mathematical patterns
- Nature: Landscapes, organic themes
- Artistic: Creative, abstract designs
- Gaming: Game-related themes
- System: OS/technology themed

**Tags** - Specific descriptors:
- Recommended: Curated for general use
- Animated: Moving/changing patterns
- Colorful: Multi-color palettes
- Minimal: Simple, clean designs
- Retro: Classic 80s/90s aesthetics

#### Topic 3: Performance Optimization Tips
```powershell
# Tip 1: Pre-load frequently used scripts
New-ColorScriptCache -Name bars,arch,mandelbrot-zoom,aurora-waves

# Tip 2: Monitor cache staleness
$old = Get-ChildItem "$env:APPDATA\ColorScripts-Enhanced\cache" -Filter "*.cache" |
    Where-Object { $_.LastWriteTime -lt (Get-Date).AddMonths(-1) }

# Tip 3: Use category filtering for faster selection
Show-ColorScript -Category Geometric  # Faster than full set

# Tip 4: Enable verbose output for debugging
Show-ColorScript -Name aurora -Verbose
```

#### Topic 4: Cross-Platform Considerations
```powershell
# Windows Terminal specific
if ($env:WT_SESSION) {
    Show-ColorScript  # Full color support
}

# VS Code integrated terminal
if ($env:TERM_PROGRAM -eq "vscode") {
    Show-ColorScript -Name nerd-font-test  # Font support
}

# SSH session
if ($env:SSH_CONNECTION) {
    Show-ColorScript -NoCache  # Avoid slow network cache I/O
}

# Linux/macOS terminal
if ($PSVersionTable.PSVersion.Major -ge 7) {
    Show-ColorScript -Category Nature  # Use Unix-friendly scripts
}
```

#### Topic 5: Scripting and Automation
```powershell
# Create reusable function for daily greeting
function Show-DailyColorScript {
    $seed = (Get-Date).DayOfYear
    Get-Random -SetSeed $seed
    Show-ColorScript -Random -Category @("Geometric", "Nature") -Random
}

# Use in profile
Show-DailyColorScript

# Create script rotation function
function Invoke-ColorScriptSlideshow {
    param(
        [int]$Interval = 3,
        [string[]]$Category,
        [int]$Count
    )

    $scripts = if ($Category) {
        Get-ColorScriptList -Category $Category -AsObject
    } else {
        Get-ColorScriptList -AsObject
    }

    $scripts | Select-Object -First $Count | ForEach-Object {
        Show-ColorScript -Name $_.Name
        Start-Sleep -Seconds $Interval
    }
}

# Usage
Invoke-ColorScriptSlideshow -Interval 2 -Category Geometric -Count 5
```

### TROUBLESHOOTING GUIDE

#### Issue 1: Scripts Not Displaying Correctly
**Symptoms**: Garbled characters or missing colors
**Solutions**:
```powershell
# Set UTF-8 encoding
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Check terminal supports UTF-8
Write-Host "Test: ✓ ✗ ◆ ○" -ForegroundColor Green

# Use nerd font test
Show-ColorScript -Name nerd-font-test

# If still broken, disable cache
Show-ColorScript -Name yourscript -NoCache
```

#### Issue 2: Module Import Failures
**Symptoms**: "Module not found" or import errors
**Solutions**:
```powershell
# Check if module exists
Get-Module -ListAvailable | Where-Object Name -like "*Color*"

# Check PSModulePath
$env:PSModulePath -split [System.IO.Path]::PathSeparator

# Reinstall module
Remove-Module ColorScripts-Enhanced
Uninstall-Module ColorScripts-Enhanced
Install-Module -Name ColorScripts-Enhanced -Force
```

#### Issue 3: Cache Not Being Used
**Symptoms**: Scripts run slowly every time
**Solutions**:
```powershell
# Verify cache exists
$cacheDir = (Get-ColorScriptConfiguration).Cache.Path
Get-ChildItem $cacheDir -Filter "*.cache" | Measure-Object

# Rebuild cache
Remove-Item "$cacheDir\*" -Confirm:$false
New-ColorScriptCache -Force

# Check for cache path issues
Get-ColorScriptConfiguration | Select-Object -ExpandProperty Cache
```

#### Issue 4: Profile Not Running
**Symptoms**: Colorscript doesn't show on PowerShell startup
**Solutions**:
```powershell
# Verify profile exists
Test-Path $PROFILE

# Check profile content
Get-Content $PROFILE | Select-String "ColorScripts"

# Repair profile
Add-ColorScriptProfile -Force

# Test profile manually
. $PROFILE
```

### FAQ

**Q: How many colorscripts are available?**
A: 450++ built-in scripts across multiple categories and tags

**Q: How much disk space does caching use?**
A: Approximately 2-5MB total for all scripts, about 2-50KB per script

**Q: Can I use colorscripts in scripts/automation?**
A: Yes, use `-ReturnText` to capture output or `-PassThru` for metadata

**Q: How do I create custom colorscripts?**
A: Use `New-ColorScript` to scaffold a template, then add your ANSI art

**Q: What if I don't want colors on startup?**
A: Use `Add-ColorScriptProfile -SkipStartupScript` to import without auto-display

**Q: Can I use this on macOS/Linux?**
A: Yes, with PowerShell 7+ which runs cross-platform

**Q: How do I share colorscripts with colleagues?**
A: Export metadata with `Export-ColorScriptMetadata` or share script files

**Q: Is caching always enabled?**
A: No, use `-NoCache` to disable caching for development/testing

### BEST PRACTICES

1. **Install from PowerShell Gallery**: Use `Install-Module` for automatic updates
2. **Add to Profile**: Use `Add-ColorScriptProfile` for automatic startup integration
3. **Pre-build Cache**: Run `New-ColorScriptCache` after installation for optimal performance
4. **Use Meaningful Naming**: When creating custom scripts, use descriptive names
5. **Keep Metadata Updated**: Update ScriptMetadata.psd1 when adding scripts
6. **Test in Different Terminals**: Verify scripts display correctly across your environments
7. **Monitor Cache Size**: Periodically check cache directory size and clean if needed
8. **Use Categories/Tags**: Leverage filtering for faster script discovery
9. **Document Custom Scripts**: Add descriptions and tags to custom colorscripts
10. **Backup Configuration**: Export configuration before major changes

### VERSION HISTORY

#### Version 2025.10.09
- Enhanced caching system with OS-wide cache
- 6-19x performance improvement
- Centralized cache location in AppData
- 450++ colorscripts included
- Full comment-based help documentation
- Module manifest improvements
- Advanced configuration management
- Metadata export capabilities
- Profile integration helpers

### COPYRIGHT

Copyright (c) 2025. All rights reserved.

### LICENSE

Licensed under MIT License. See LICENSE file for details.
