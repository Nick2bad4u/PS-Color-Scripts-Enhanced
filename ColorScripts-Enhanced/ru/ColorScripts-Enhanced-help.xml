<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" schema="maml" xmlns="http://msh">
  <command:command>
    <command:details>
      <command:name>Add-ColorScriptProfile</command:name>
      <maml:description>
        <maml:para>Добавляет интеграцию ColorScripts-Enhanced в файлы профилей PowerShell.</maml:para>
      </maml:description>
      <command:verb>Add</command:verb>
      <command:noun>ColorScriptProfile</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Автоматически добавляет интеграцию запуска ColorScripts-Enhanced в ваш профиль PowerShell. Этот командлет изменяет ваши файлы профилей для импорта модуля ColorScripts-Enhanced и опционально отображает colorscript при запуске сессии.</maml:para>
      <maml:para>Командлет поддерживает все стандартные области профилей PowerShell: - CurrentUserCurrentHost: Профиль для текущего пользователя и текущего хоста - CurrentUserAllHosts: Профиль для текущего пользователя во всех хостах - AllUsersCurrentHost: Профиль для всех пользователей на текущем хосте (требует прав администратора) - AllUsersAllHosts: Профиль для всех пользователей во всех хостах (требует прав администратора)</maml:para>
      <maml:para>При выполнении добавляется фрагмент, который: 1. Импортирует модуль ColorScripts-Enhanced 2. Опционально отображает случайный colorscript при запуске 3. Предоставляет полезные псевдонимы для быстрого доступа</maml:para>
      <maml:para>Интеграция разработана как ненавязчивая и может быть легко удалена путем прямого редактирования файлов профилей.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-ColorScriptProfile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Указывает область профиля для изменения. Допустимые значения:
- CurrentUserCurrentHost (по умолчанию)
- CurrentUserAllHosts
- AllUsersCurrentHost
- AllUsersAllHosts</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Указывает область профиля для изменения. Допустимые значения:
- CurrentUserCurrentHost (по умолчанию)
- CurrentUserAllHosts
- AllUsersCurrentHost
- AllUsersAllHosts</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не возвращает выходные данные в конвейер.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 или более поздней версии

**Profile Integration:**
Командлет добавляет фрагмент запуска, который импортирует ColorScripts-Enhanced и обеспечивает удобный доступ. Интеграция разработана как легковесная и ненавязчивая.

**Scope Considerations:**
- Области CurrentUser изменяют файлы в вашем каталоге профиля пользователя
- Области AllUsers требуют привилегий администратора и влияют на всех пользователей
- Изменения вступают в силу в новых сессиях PowerShell

**Safety Features:**
- Проверяет наличие существующей интеграции, чтобы избежать дублирования
- Использует стандартные механизмы профилей PowerShell
- Предоставляет опции WhatIf и Confirm для безопасной работы</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-ColorScriptProfile
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Добавляет интеграцию ColorScripts-Enhanced в ваш профиль по умолчанию (CurrentUserCurrentHost).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-ColorScriptProfile -Scope CurrentUserAllHosts
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Добавляет интеграцию в ваш профиль, который применяется ко всем хостам PowerShell для текущего пользователя.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-ColorScriptProfile -Scope AllUsersCurrentHost
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Добавляет интеграцию в профиль для всех пользователей на текущем хосте (требует привилегий администратора).</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-ColorScriptProfile -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает, какие изменения будут внесены в ваш профиль, без фактического применения их.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Add-ColorScriptProfile -Confirm
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Запрашивает подтверждение перед изменением вашего профиля.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Clear-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Очищает кэшированные файлы вывода цветов скриптов.</maml:para>
      </maml:description>
      <command:verb>Clear</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Удаляет кэшированные файлы вывода для цветов скриптов, чтобы принудительно выполнить свежий запуск при следующем отображении. Этот командлет предоставляет целевое управление кэшем для отдельных скриптов или массовых операций.</maml:para>
      <maml:para>Система кэша хранит отрендеренный вывод ANSI для обеспечения почти мгновенной производительности отображения. Со временем кэшированные файлы могут устареть, если исходные скрипты были изменены, или вы можете захотеть очистить кэш для целей устранения неисправностей.</maml:para>
      <maml:para>Используйте этот командлет, когда: - Исходные цветов скрипты были изменены - Подозревается повреждение кэша - Вы хотите обеспечить свежий запуск - Желаемо освобождение дискового пространства</maml:para>
      <maml:para>Командлет поддерживает как целевую очистку (конкретные скрипты), так и массовые операции (все кэшированные файлы).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-ColorScriptCache</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Очищает все кэшированные файлы цветов скриптов. Не может использоваться с параметром -Name.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Указывает имена цветов скриптов для очистки из кэша. Поддерживает подстановочные знаки (* и ?) для сопоставления шаблонов.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает ввод из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не возвращает вывод в конвейер.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Cache Location:**
Файлы кэша хранятся в управляемом модулем каталоге. Используйте `(Get-Module ColorScripts-Enhanced).ModuleBase`, чтобы найти каталог модуля, затем найдите подкаталог cache.

**When to Clear Cache:**
Когда очищать кэш:
- После изменения исходных файлов цветов скриптов
- При устранении неисправностей отображения
- Чтобы обеспечить свежий запуск скриптов
- Перед benchmarking производительности

**Performance Impact:**
Влияние на производительность:
Очистка кэша приведет к нормальному запуску скриптов при следующем отображении, что может занять больше времени, чем кэшированное выполнение. Кэш будет автоматически перестроен при последующих отображениях.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name "spectrum"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Очищает кэш для конкретного цветов скрипта с именем "spectrum".</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -All
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Очищает все кэшированные файлы цветов скриптов.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name "aurora*", "geometric*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Очищает кэш для цветов скриптов, соответствующих указанным шаблонам подстановки.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Clear-ColorScriptCache -Name aurora-waves -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает, какие файлы кэша будут очищены, без их фактического удаления.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Clear cache for all scripts in a category
Get-ColorScriptList -Category Nature -AsObject | ForEach-Object {
    Clear-ColorScriptCache -Name $_.Name
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Очищает кэш для всех цветов скриптов на тему природы.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Export-ColorScriptMetadata</command:name>
      <maml:description>
        <maml:para>Экспортирует метаданные цветовых скриптов в различные форматы для внешнего использования.</maml:para>
      </maml:description>
      <command:verb>Export</command:verb>
      <command:noun>ColorScriptMetadata</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Экспортирует всесторонние метаданные о цветовых скриптах во внешние файлы для документации, отчетности или интеграции с другими инструментами. Поддерживает несколько форматов вывода, включая JSON, CSV и XML.</maml:para>
      <maml:para>Экспортированные метаданные включают: - Имена скриптов и пути к файлам - Категории и теги - Описания и метаданные - Размеры файлов и даты изменения - Информацию о состоянии кэша</maml:para>
      <maml:para>Этот командлет полезен для: - Генерации документации - Создания инвентарей - Интеграции с системами CI/CD - Резервного копирования и миграции - Анализа и отчетности</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-ColorScriptMetadata</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует экспортируемые скрипты по одной или нескольким категориям перед экспортом.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Format</maml:name>
          <maml:description>
            <maml:para>Указывает формат вывода. Допустимые значения: JSON, CSV и XML.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Указывает путь к файлу, куда будут сохранены экспортированные метаданные.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Фильтрует экспортируемые скрипты по одному или нескольким тегам перед экспортом.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Фильтрует экспортируемые скрипты по одной или нескольким категориям перед экспортом.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Format</maml:name>
        <maml:description>
          <maml:para>Указывает формат вывода. Допустимые значения: JSON, CSV и XML.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Указывает путь к файлу, куда будут сохранены экспортированные метаданные.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Фильтрует экспортируемые скрипты по одному или нескольким тегам перед экспортом.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не возвращает выходные данные в конвейер.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Автор:** Nick
**Модуль:** ColorScripts-Enhanced
**Требуется:** PowerShell 5.1 или новее

**Форматы вывода:**
- JSON: Структурированные данные для программного доступа
- CSV: Формат, совместимый с электронными таблицами
- XML: Иерархическая структура данных

**Случаи использования:**
- Генерация документации
- Управление инвентарем
- Интеграция CI/CD
- Резервное копирование и восстановление
- Аналитика и отчетность</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path "colorscripts.json"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Экспортирует все метаданные цветовых скриптов в файл JSON.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path "inventory.csv" -Format CSV
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Экспортирует метаданные в формате CSV для анализа в электронных таблицах.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path "nature-scripts.xml" -Category Nature -Format XML
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Экспортирует только цветовые скрипты на тему природы в формате XML.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Export-ColorScriptMetadata -Path "geometric.json" -Tag geometric
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Экспортирует цветовые скрипты, помеченные как "geometric", в JSON.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export with timestamp
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
Export-ColorScriptMetadata -Path "backup-$timestamp.json"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Создает резервную копию всех метаданных с отметкой времени.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Изменяет настройки конфигурации ColorScripts-Enhanced.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Обновляет настройки конфигурации ColorScripts-Enhanced с постоянным хранением. Этот командлет позволяет настраивать поведение модуля через пользовательские параметры.</maml:para>
      <maml:para>Настраиваемые параметры включают: - Расположение каталога кэша - Предпочтения оптимизации производительности - Поведение отображения по умолчанию - Настройки работы модуля</maml:para>
      <maml:para>Изменения автоматически сохраняются в пользовательские файлы конфигурации и сохраняются между сеансами PowerShell. Используйте Get-ColorScriptConfiguration для просмотра текущих настроек.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Указывает путь к каталогу, где будут храниться файлы кэша colorscript.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>CachePath</maml:name>
        <maml:description>
          <maml:para>Указывает путь к каталогу, где будут храниться файлы кэша colorscript.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не возвращает выходные данные в конвейер.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Сохранение конфигурации:**
Настройки автоматически сохраняются в пользовательские файлы конфигурации и сохраняются между сеансами PowerShell.

**Разрешение путей:**
Пути кэша поддерживают переменные среды, относительные пути и стандартную нотацию путей PowerShell.

**Проверка:**
Изменения конфигурации проверяются перед применением для предотвращения недопустимых настроек.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "C:\MyCache"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Устанавливает пользовательский путь к каталогу кэша.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath $env:TEMP
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Использует системный временный каталог для хранения кэша.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "~/.colorscript-cache"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Устанавливает путь кэша с использованием нотации домашнего каталога в стиле Unix.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает, какие изменения конфигурации будут внесены без их применения.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Backup current config, modify, then restore if needed
$currentConfig = Get-ColorScriptConfiguration
Set-ColorScriptConfiguration -CachePath "D:\Cache"
# ... test new configuration ...
# Set-ColorScriptConfiguration -CachePath $currentConfig.CachePath
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Демонстрирует резервное копирование и восстановление конфигурации.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Get-ColorScriptList</command:name>
      <maml:description>
        <maml:para>Получает список доступных цветовых скриптов с их метаданными.</maml:para>
      </maml:description>
      <command:verb>Get</command:verb>
      <command:noun>ColorScriptList</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Возвращает информацию о доступных цветовых скриптах в коллекции ColorScripts-Enhanced. По умолчанию отображает отформатированную таблицу, показывающую имена скриптов, категории и описания. Используйте `-AsObject` для возврата структурированных объектов для программного доступа.</maml:para>
      <maml:para>Командлет предоставляет всесторонние метаданные о каждом цветовом скрипте, включая: - Name: Идентификатор скрипта (без расширения .ps1) - Category: Тематическая группировка (Nature, Abstract, Geometric и т.д.) - Tags: Дополнительные дескрипторы для фильтрации и обнаружения - Description: Краткое объяснение визуального содержания скрипта</maml:para>
      <maml:para>Этот командлет необходим для изучения коллекции и понимания доступных вариантов перед использованием других командлетов, таких как `Show-ColorScript`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-ColorScriptList</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>AsObject</maml:name>
          <maml:description>
            <maml:para>Возвращает информацию о цветовых скриптах в виде структурированных объектов вместо отображения отформатированной таблицы. Объекты включают свойства Name, Category, Tags и Description для программного доступа.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует результаты по цветовыми скриптам, принадлежащим к одной или нескольким указанным категориям. Категории - это широкие тематические группировки, такие как "Nature", "Abstract", "Art", "Retro" и т.д.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Фильтрует результаты по цветовыми скриптам, соответствующим одному или нескольким шаблонам имен. Поддерживает подстановочные знаки (* и ?) для гибкого сопоставления.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Фильтрует результаты по цветовыми скриптам, tagged с одним или несколькими указанными тегами. Теги - это более конкретные дескрипторы, такие как "geometric", "retro", "animated", "minimal" и т.д.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>AsObject</maml:name>
        <maml:description>
          <maml:para>Возвращает информацию о цветовых скриптах в виде структурированных объектов вместо отображения отформатированной таблицы. Объекты включают свойства Name, Category, Tags и Description для программного доступа.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Фильтрует результаты по цветовыми скриптам, принадлежащим к одной или нескольким указанным категориям. Категории - это широкие тематические группировки, такие как "Nature", "Abstract", "Art", "Retro" и т.д.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Фильтрует результаты по цветовыми скриптам, соответствующим одному или нескольким шаблонам имен. Поддерживает подстановочные знаки (* и ?) для гибкого сопоставления.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Фильтрует результаты по цветовыми скриптам, tagged с одним или несколькими указанными тегами. Теги - это более конкретные дескрипторы, такие как "geometric", "retro", "animated", "minimal" и т.д.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Когда указан `-AsObject`, возвращает пользовательские объекты со свойствами Name, Category, Tags и Description.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Когда `-AsObject` не указан, вывод записывается непосредственно в консоль хоста.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Автор:** Nick
**Модуль:** ColorScripts-Enhanced
**Требуется:** PowerShell 5.1 или новее

**Свойства метаданных:**
- Name: Идентификатор скрипта, используемый Show-ColorScript
- Category: Тематическая группировка для организации
- Tags: Массив описательных ключевых слов для фильтрации
- Description: Человеко-читаемое объяснение содержания

**Шаблоны использования:**
- Discovery: Изучите доступные скрипты перед выбором
- Filtering: Сузьте варианты с помощью категорий и тегов
- Automation: Используйте -AsObject для программного выбора скрипта
- Inventory: Экспортируйте метаданные для документации или отчетности</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Отображает отформатированную таблицу всех доступных цветовых скриптов с их метаданными.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Category Nature
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Перечисляет только цветовые скрипты, categorized как "Nature".</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Tag geometric -AsObject
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Возвращает цветовые скрипты, tagged как "geometric", в виде объектов для дальнейшей обработки.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Name "aurora*" | Format-Table Name, Category, Tags
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Перечисляет цветовые скрипты, соответствующие шаблону подстановки, с выбранными свойствами.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -AsObject | Where-Object { $_.Tags -contains 'animated' }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Находит все анимированные цветовые скрипты с помощью фильтрации объектов.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Category Abstract,Geometric | Measure-Object
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Подсчитывает цветовые скрипты в категориях Abstract или Geometric.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Get-ColorScriptList -Tag retro | Select-Object Name, Description
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает имена и описания цветовых скриптов в стиле retro.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Get random script from specific category
Get-ColorScriptList -Category Nature -AsObject | Get-Random | Select-Object -ExpandProperty Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Выбирает случайное имя цветового скрипта из категории Nature.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export script inventory to CSV
Get-ColorScriptList -AsObject | Export-Csv -Path "colorscripts.csv" -NoTypeInformation
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Экспортирует полные метаданные скриптов в файл CSV.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Find scripts by multiple criteria
Get-ColorScriptList -AsObject | Where-Object {
    $_.Category -eq 'Geometric' -and $_.Tags -contains 'colorful'
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Находит геометрические цветовые скрипты, которые также tagged как colorful.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScript</command:name>
      <maml:description>
        <maml:para>Создает новый colorscript с метаданными и структурой шаблона.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Создает новый файл colorscript с правильной структурой метаданных и необязательным содержимым шаблона. Этот командлет предоставляет стандартизированный способ создания новых colorscripts, которые seamlessly интегрируются с экосистемой ColorScripts-Enhanced.</maml:para>
      <maml:para>Командлет генерирует: - Новый файл .ps1 с базовой структурой - Связанные метаданные для категоризации - Содержимое шаблона на основе выбранного стиля - Правильную организацию файлов</maml:para>
      <maml:para>Доступные шаблоны включают: - Basic: Минимальная структура для пользовательских скриптов - Animated: Шаблон с контролем времени - Interactive: Шаблон с обработкой пользовательского ввода - Geometric: Шаблон для геометрических узоров - Nature: Шаблон для дизайнов, вдохновленных природой</maml:para>
      <maml:para>Созданные скрипты автоматически интегрируются с системами кэширования и отображения модуля.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Указывает категорию для нового colorscript. Категории помогают организовывать скрипты тематически.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Предоставляет описание для colorscript, которое объясняет его визуальное содержимое.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Имя нового colorscript (без расширения .ps1).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Указывает каталог, где будет создан colorscript.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>Tags</maml:name>
          <maml:description>
            <maml:para>Указывает теги для colorscript. Теги предоставляют дополнительные возможности категоризации и фильтрации.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Template</maml:name>
          <maml:description>
            <maml:para>Указывает шаблон для использования в новом colorscript. Доступные шаблоны: Basic, Animated, Interactive, Geometric, Nature.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Указывает категорию для нового colorscript. Категории помогают организовывать скрипты тематически.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Предоставляет описание для colorscript, которое объясняет его визуальное содержимое.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Имя нового colorscript (без расширения .ps1).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Указывает каталог, где будет создан colorscript.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>Tags</maml:name>
        <maml:description>
          <maml:para>Указывает теги для colorscript. Теги предоставляют дополнительные возможности категоризации и фильтрации.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Template</maml:name>
        <maml:description>
          <maml:para>Указывает шаблон для использования в новом colorscript. Доступные шаблоны: Basic, Animated, Interactive, Geometric, Nature.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает ввод из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Возвращает объект с информацией о созданном colorscript.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 или более поздней версии

**Templates:**
- Basic: Минимальная структура для пользовательских скриптов
- Animated: Шаблон с контролем времени
- Interactive: Шаблон с обработкой пользовательского ввода
- Geometric: Шаблон для геометрических узоров
- Nature: Шаблон для дизайнов, вдохновленных природой

**File Structure:**
Созданные скрипты следуют стандартной организации модуля и автоматически интегрируются с системами кэширования и отображения.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name "MyScript"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Создает новый colorscript с базовым шаблоном.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name "Sunset" -Category Nature -Tags "animated", "colorful" -Description "Beautiful sunset animation"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Создает анимированный colorscript на тему природы с метаданными.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name "GeometricPattern" -Template Geometric -Path "./custom-scripts/"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Создает геометрический colorscript в пользовательском каталоге.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScript -Name "InteractiveDemo" -Template Interactive -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает, что будет создано, без фактического создания файлов.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create multiple related scripts
$themes = @("Forest", "Ocean", "Mountain")
foreach ($theme in $themes) {
    New-ColorScript -Name $theme -Category Nature -Tags "landscape"
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Создает несколько colorscripts на тему природы.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/New-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>New-ColorScriptCache</command:name>
      <maml:description>
        <maml:para>Предварительно строит кэш для оптимизации производительности цветовых скриптов.</maml:para>
      </maml:description>
      <command:verb>New</command:verb>
      <command:noun>ColorScriptCache</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Предварительно генерирует кэшированный вывод цветовых скриптов для обеспечения оптимальной производительности при первом отображении. Этот командлет выполняет цветовые скрипты заранее и сохраняет их отрендеренный вывод для мгновенного извлечения.</maml:para>
      <maml:para>Система кэширования обеспечивает улучшение производительности в 6-19 раз за счет устранения времени выполнения скрипта при первом отображении. Кэшированное содержимое автоматически аннулируется при изменении исходных скриптов.</maml:para>
      <maml:para>Используйте этот командлет для: - Подготовки кэша для часто используемых скриптов - Обеспечения последовательной производительности в сеансах - Предварительного разогрева кэша после обновлений модуля - Оптимизации производительности запуска</maml:para>
      <maml:para>Командлет поддерживает выборочное кэширование по имени, категории или тегам, позволяя целевую подготовку кэша.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-ColorScriptCache</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует скрипты для кэширования по одной или нескольким категориям.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Указывает имена цветовых скриптов для кэширования. Поддерживает подстановочные знаки (* и ?).</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Фильтрует скрипты для кэширования по одному или нескольким тегам.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Фильтрует скрипты для кэширования по одной или нескольким категориям.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Указывает имена цветовых скриптов для кэширования. Поддерживает подстановочные знаки (* и ?).</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Фильтрует скрипты для кэширования по одному или нескольким тегам.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Возвращает результаты построения кэша с статусом успеха/неудачи для каждого скрипта.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance Impact:**
Предварительное кэширование устраняет время выполнения при первом отображении, обеспечивая мгновенную визуальную обратную связь. Особенно полезно для сложных или анимированных скриптов.

**Cache Management:**
Кэшированные файлы хранятся в управляемых модулем каталогах и автоматически аннулируются при изменении исходных скриптов. Используйте Clear-ColorScriptCache для удаления устаревшего кэша.

**Best Practices:**
- Кэшируйте часто используемые скрипты для оптимальной производительности
- Используйте выборочное кэширование, чтобы избежать ненужной обработки
- Запускайте после обновлений модуля для обеспечения актуальности кэша</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Предварительно строит кэш для всех доступных цветовых скриптов.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Name "spectrum", "aurora-waves"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Кэширует определенные цветовые скрипты по имени.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Category Nature
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Предварительно строит кэш для всех цветовых скриптов тематики природы.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
New-ColorScriptCache -Tag animated
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Кэширует все цветовые скрипты, помеченные как "animated".</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Cache scripts for startup optimization
New-ColorScriptCache -Category Geometric -Tag minimal
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Подготавливает кэш для легких геометрических скриптов, идеальных для быстрого отображения при запуске.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Reset-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Сбрасывает конфигурацию ColorScripts-Enhanced к значениям по умолчанию.</maml:para>
      </maml:description>
      <command:verb>Reset</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Восстанавливает настройки конфигурации ColorScripts-Enhanced к их значениям по умолчанию. Этот командлет удаляет все пользовательские настройки и возвращает модуль к его исходному состоянию конфигурации.</maml:para>
      <maml:para>Операции сброса включают: - Настройки пути кэша - Предпочтения производительности - Параметры отображения - Настройки поведения модуля</maml:para>
      <maml:para>Этот командлет полезен, когда: - Конфигурация становится поврежденной - Вы хотите начать заново с настройками по умолчанию - Устранение неполадок, связанных с конфигурацией - Подготовка к чистому тестированию модуля</maml:para>
      <maml:para>Операция сброса по умолчанию требует подтверждения, чтобы предотвратить случайную потерю данных.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-ColorScriptConfiguration</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не принимает входные данные из конвейера.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Этот командлет не возвращает выходные данные в конвейер.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Автор:** Nick
**Модуль:** ColorScripts-Enhanced
**Требуется:** PowerShell 5.1 или новее

**Область сброса:**
Сбрасывает все настраиваемые пользователем настройки к значениям по умолчанию модуля. Это включает пути кэша, настройки производительности и предпочтения отображения.

**Безопасность данных:**
Сброс конфигурации не влияет на кэшированный вывод скриптов или созданные пользователем цветные скрипты. Затрагиваются только настройки конфигурации.

**Восстановление:**
После сброса используйте Set-ColorScriptConfiguration для повторного применения пользовательских настроек, если необходимо.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Сбрасывает все настройки конфигурации к значениям по умолчанию с запросом подтверждения.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -Confirm:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Сбрасывает конфигурацию без запроса подтверждения.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Reset-ColorScriptConfiguration -WhatIf
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Показывает, какие изменения конфигурации будут сделаны, без применения их.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Сброс и проверка
Reset-ColorScriptConfiguration
Get-ColorScriptConfiguration
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Сбрасывает конфигурацию и отображает новые настройки по умолчанию.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-ColorScriptConfiguration</maml:linkText>
        <command:uri>Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Set-ColorScriptConfiguration</command:name>
      <maml:description>
        <maml:para>Persist changes to the ColorScripts-Enhanced cache and startup configuration.</maml:para>
      </maml:description>
      <command:verb>Set</command:verb>
      <command:noun>ColorScriptConfiguration</command:noun>
    </command:details>
    <maml:description>
      <maml:para>`Set-ColorScriptConfiguration` provides a persistent way to customize the behavior and storage location of the ColorScripts-Enhanced module. This cmdlet updates the module's configuration file, allowing you to control various aspects of script rendering and storage.</maml:para>
      <maml:para>**Key capabilities:**</maml:para>
      <maml:para>- **Cache relocation**: Move the colorscript cache to a custom directory, useful for network shares, faster drives, or centralized storage locations. - **Auto-import behavior**: Control whether a colorscript automatically displays when the module is first imported into your PowerShell session. - **Profile integration**: Configure default settings for `Add-ColorScriptProfile` to streamline profile setup. - **Default script selection**: Set a preferred colorscript that will be used when no specific script is requested.</maml:para>
      <maml:para>Any directory path supplied for `-CachePath` is automatically created if it does not already exist. The cmdlet supports environment variable expansion, tilde (`~`) home directory expansion, and both absolute and relative paths. Supplying an empty string (`''`) to `-CachePath` or `-DefaultScript` clears the stored value and reverts to module defaults.</maml:para>
      <maml:para>Changes made with this cmdlet take effect immediately for new operations but may not affect already-loaded cache data until the module is reimported or PowerShell is restarted.</maml:para>
      <maml:para>When `-PassThru` is specified, the cmdlet returns the updated configuration object, making it easy to verify changes or chain additional operations.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
            <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
            <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
            <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
            <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
            <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
            <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-ColorScriptConfiguration</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
          <maml:name>AutoShowOnImport</maml:name>
          <maml:description>
            <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
          <maml:name>CachePath</maml:name>
          <maml:description>
            <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
            <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
            <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
          <maml:name>DefaultScript</maml:name>
          <maml:description>
            <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
            <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
            <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
            <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
          <maml:name>ProfileAutoShow</maml:name>
          <maml:description>
            <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
            <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="none">
        <maml:name>AutoShowOnImport</maml:name>
        <maml:description>
          <maml:para>Enable or disable automatic rendering of a colorscript when the module is imported. When enabled (`$true`), a colorscript displays immediately upon module import, providing instant visual feedback. When disabled (`$false`), scripts only display when explicitly invoked. If not specified, the existing setting remains unchanged.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="none">
        <maml:name>CachePath</maml:name>
        <maml:description>
          <maml:para>Specifies the directory where colorscript files and metadata are stored. Supports absolute paths, relative paths (resolved from the current location), environment variables (e.g., `$env:USERPROFILE`), and tilde (`~`) expansion for the home directory.</maml:para>
          <maml:para>If the specified directory does not exist, it will be created automatically with appropriate permissions. Provide an empty string (`''`) to clear the custom path and revert to the platform-specific default location. When left unspecified, the existing cache path setting is preserved.</maml:para>
          <maml:para>**Note**: Changing the cache path does not automatically migrate existing cached files. You may need to manually copy files or allow them to be regenerated.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="none">
        <maml:name>DefaultScript</maml:name>
        <maml:description>
          <maml:para>Sets or clears the default colorscript name used by profile helpers, auto-show features, and when no script is explicitly specified in commands. This should match the base name of a script file without extension (e.g., `'bars'`, not `'bars.ps1'`).</maml:para>
          <maml:para>Provide an empty string (`''`) to remove the stored default, reverting to module-level default behavior (typically random selection). When this parameter is omitted, the current default script setting is unchanged.</maml:para>
          <maml:para>The specified script must exist in the module's script directory to be used successfully.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Returns the updated configuration object after making changes. Without this switch, the cmdlet operates silently (no output). The returned object has the same structure as `Get-ColorScriptConfiguration` and can be inspected, stored, or piped to other cmdlets for further processing.</maml:para>
          <maml:para>Useful for verification, logging, or chaining configuration commands.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="none">
        <maml:name>ProfileAutoShow</maml:name>
        <maml:description>
          <maml:para>Controls whether profile snippets generated by `Add-ColorScriptProfile` include an automatic `Show-ColorScript` invocation. When `$true`, the profile code will display a colorscript on every shell startup. When `$false`, the profile will load the module but not auto-display scripts.</maml:para>
          <maml:para>This setting only affects newly generated profile code; existing profile modifications are not automatically updated. Omitting this parameter leaves the current setting unchanged.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Nullable`1[System.Boolean]</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not accept pipeline input.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>By default, this cmdlet produces no output.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Collections.Hashtable</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns a hashtable containing the complete updated configuration. The structure matches the output of `Get-ColorScriptConfiguration`, with keys such as `CachePath`, `AutoShowOnImport`, `ProfileAutoShow`, and `DefaultScript`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Configuration file location:**

Configuration changes are persisted to a JSON or XML file stored in a platform-specific application data directory. Use `Get-ColorScriptConfiguration` to view the current configuration root path. The environment variable `COLOR_SCRIPTS_ENHANCED_CONFIG_ROOT` can override the default configuration directory location if set before module import.

**Platform defaults:**

- **Windows**: `$env:LOCALAPPDATA\ColorScripts-Enhanced`
- **Linux/macOS**: `~/.config/ColorScripts-Enhanced` or `$XDG_CONFIG_HOME/ColorScripts-Enhanced`

**Best practices:**

- Test cache path changes in a non-production environment first, especially when using network locations.
- Use `-PassThru` when scripting to validate configuration updates programmatically.
- Consider setting `AutoShowOnImport:$false` in automated scripts or CI/CD pipelines to avoid unexpected visual output.
- Document custom configurations in team environments to ensure consistent behavior across users.

**Permissions:**

Ensure you have write permissions to the configuration directory. On shared systems, configuration changes affect only the current user's profile unless overridden with environment variables pointing to shared locations.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath 'D:/Temp/ColorScriptsCache' -AutoShowOnImport:$true -ProfileAutoShow:$false -DefaultScript 'bars'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Moves the cache to `D:/Temp/ColorScriptsCache`, enables automatic display on module import, disables profile auto-show, and sets `bars` as the default script.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -DefaultScript '' -PassThru
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Clears the default script and returns the resulting configuration object, allowing you to verify that the setting was removed.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath "$env:TEMP\ColorScripts" -PassThru | Format-List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Relocates the cache to the Windows TEMP directory and displays the full updated configuration in list format. Useful for temporary testing scenarios.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -AutoShowOnImport:$false
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Disables automatic colorscript rendering when the module loads. Useful if you prefer manual control over when scripts are displayed.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Set-ColorScriptConfiguration -CachePath '~/.local/share/colorscripts' -DefaultScript 'crunch'
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Sets a Linux/macOS-style cache path using tilde expansion and configures 'crunch' as the default script for all operations.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Set-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptConfiguration</maml:linkText>
        <command:uri>Get-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-ColorScriptConfiguration</maml:linkText>
        <command:uri>Reset-ColorScriptConfiguration.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-ColorScriptProfile</maml:linkText>
        <command:uri>Add-ColorScriptProfile.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Show-ColorScript</maml:linkText>
        <command:uri>Show-ColorScript.md</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command>
    <command:details>
      <command:name>Show-ColorScript</command:name>
      <maml:description>
        <maml:para>Отображает цветовой скрипт с автоматическим кэшированием для улучшения производительности.</maml:para>
      </maml:description>
      <command:verb>Show</command:verb>
      <command:noun>ColorScript</command:noun>
    </command:details>
    <maml:description>
      <maml:para>Отображает красивые ANSI цветовые скрипты в вашем терминале с интеллектуальной оптимизацией производительности. Командлет предоставляет четыре основных режима работы:</maml:para>
      <maml:para>**Random Mode (Default):** Отображает случайно выбранный цветовой скрипт из доступной коллекции. Это поведение по умолчанию, когда параметры не указаны.</maml:para>
      <maml:para>**Named Mode:** Отображает конкретный цветовой скрипт по имени. Поддерживает шаблоны с подстановочными знаками для гибкого сопоставления. Когда несколько скриптов соответствуют шаблону, выбирается первое совпадение в алфавитном порядке.</maml:para>
      <maml:para>**List Mode:** Отображает отформатированный список всех доступных цветовых скриптов с их метаданными, включая имя, категорию, теги и описания.</maml:para>
      <maml:para>**All Mode:** Циклически проходит через все доступные цветовые скрипты в алфавитном порядке. Особенно полезно для демонстрации всей коллекции или открытия новых скриптов.</maml:para>
      <maml:para>**Performance Features:** Система кэширования обеспечивает улучшение производительности в 6-19 раз. При первом выполнении цветовой скрипт запускается нормально, и его вывод кэшируется. Последующие отображения используют кэшированный вывод для почти мгновенного рендеринга. Кэш автоматически аннулируется при изменении исходных скриптов, обеспечивая точность вывода.</maml:para>
      <maml:para>**Filtering Capabilities:** Фильтруйте скрипты по категории или тегам перед выбором. Это применяется во всех режимах, позволяя работать с подмножествами коллекции (например, только скрипты на тему природы или скрипты с тегом "retro").</maml:para>
      <maml:para>**Output Options:** По умолчанию цветовые скрипты записываются непосредственно в консоль для немедленного визуального отображения. Используйте `-ReturnText` для вывода отрендеренного вывода в конвейер для захвата, перенаправления или дальнейшей обработки. Используйте `-PassThru` для получения объекта метаданных скрипта для программного использования.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует доступную коллекцию скриптов по одной или нескольким категориям перед любым выбором или отображением. Категории обычно являются широкими темами, такими как "Nature", "Abstract", "Art", "Retro" и т.д. Можно указать несколько категорий как массив. Этот параметр работает в сочетании со всеми режимами (Random, Named, List, All) для сужения рабочего набора.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Random</maml:name>
          <maml:description>
            <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует доступную коллекцию скриптов по одной или нескольким категориям перед любым выбором или отображением. Категории обычно являются широкими темами, такими как "Nature", "Abstract", "Art", "Retro" и т.д. Можно указать несколько категорий как массив. Этот параметр работает в сочетании со всеми режимами (Random, Named, List, All) для сужения рабочего набора.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>PassThru</maml:name>
          <maml:description>
            <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует доступную коллекцию скриптов по одной или нескольким категориям перед любым выбором или отображением. Категории обычно являются широкими темами, такими как "Nature", "Abstract", "Art", "Retro" и т.д. Можно указать несколько категорий как массив. Этот параметр работает в сочетании со всеми режимами (Random, Named, List, All) для сужения рабочего набора.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>List</maml:name>
          <maml:description>
            <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Show-ColorScript</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Циклически проходит через все доступные цветовые скрипты в алфавитном порядке. Когда указано отдельно, скрипты отображаются непрерывно с короткой автоматической задержкой. Комбинируйте с `-WaitForInput` для ручного управления прогрессом через коллекцию. Этот режим идеален для демонстрации полной библиотеки или открытия новых фаворитов.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Category</maml:name>
          <maml:description>
            <maml:para>Фильтрует доступную коллекцию скриптов по одной или нескольким категориям перед любым выбором или отображением. Категории обычно являются широкими темами, такими как "Nature", "Abstract", "Art", "Retro" и т.д. Можно указать несколько категорий как массив. Этот параметр работает в сочетании со всеми режимами (Random, Named, List, All) для сужения рабочего набора.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>NoCache</maml:name>
          <maml:description>
            <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>ReturnText</maml:name>
          <maml:description>
            <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
          <maml:name>WaitForInput</maml:name>
          <maml:description>
            <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Циклически проходит через все доступные цветовые скрипты в алфавитном порядке. Когда указано отдельно, скрипты отображаются непрерывно с короткой автоматической задержкой. Комбинируйте с `-WaitForInput` для ручного управления прогрессом через коллекцию. Этот режим идеален для демонстрации полной библиотеки или открытия новых фаворитов.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Category</maml:name>
        <maml:description>
          <maml:para>Фильтрует доступную коллекцию скриптов по одной или нескольким категориям перед любым выбором или отображением. Категории обычно являются широкими темами, такими как "Nature", "Abstract", "Art", "Retro" и т.д. Можно указать несколько категорий как массив. Этот параметр работает в сочетании со всеми режимами (Random, Named, List, All) для сужения рабочего набора.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>List</maml:name>
        <maml:description>
          <maml:para>Display a formatted list of all available colorscripts with their associated metadata. The output includes script name, category, tags, and description. This is useful for exploring available options and understanding the collection's organization. Can be combined with `-Category` or `-Tag` to list only filtered subsets.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the colorscript to display (without the .ps1 extension). Supports wildcard patterns (* and ?) for flexible matching. When multiple scripts match a wildcard pattern, the first match in alphabetical order is selected and displayed. Use `-PassThru` to verify which script was chosen when using wildcards.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>NoCache</maml:name>
        <maml:description>
          <maml:para>Bypass the caching system and execute the colorscript directly. This forces fresh execution and can be useful when testing script modifications, debugging, or when cache corruption is suspected. Without this switch, cached output is used when available for optimal performance.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>PassThru</maml:name>
        <maml:description>
          <maml:para>Return the selected colorscript's metadata object to the pipeline in addition to displaying the colorscript. The metadata object contains properties like Name, Path, Category, Tags, and Description. This enables programmatic access to script information for filtering, logging, or further processing while still rendering the visual output.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Random</maml:name>
        <maml:description>
          <maml:para>Explicitly request a random colorscript selection. This is the default behavior when no name is specified, so this switch is primarily useful for clarity in scripts or when you want to be explicit about the selection mode. Can be combined with `-Category` or `-Tag` to randomize within a filtered subset.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>ReturnText</maml:name>
        <maml:description>
          <maml:para>Emit the rendered colorscript as a string to the PowerShell pipeline instead of writing directly to the console host. This allows the output to be captured in a variable, redirected to a file, or piped to other commands. The output retains all ANSI escape sequences, so it will display with proper colors when later written to a compatible terminal.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.Management.Automation.SwitchParameter</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Filter the available script collection by metadata tags (case-insensitive). Tags are more specific descriptors than categories, such as "geometric", "retro", "animated", "minimal", etc. Multiple tags can be specified as an array. Scripts matching any of the specified tags will be included in the working set before selection occurs.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">System.String[]</command:parameterValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="Named" aliases="none">
        <maml:name>WaitForInput</maml:name>
        <maml:description>
          <maml:para>When used with `-All`, pause after displaying each colorscript and wait for user input before proceeding. Press the spacebar to advance to the next script in the sequence. Press 'q' to quit the sequence early and return to the prompt. This provides an interactive browsing experience through the entire collection.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">SwitchParameter</command:parameterValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>Вы можете передавать имена цветовых скриптов в Show-ColorScript. Это позволяет рабочие процессы на основе конвейера, где имена скриптов генерируются или фильтруются другими командами.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <dev:name>System.Object</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-PassThru` is specified, returns the selected colorscript's metadata object containing properties like Name, Path, Category, Tags, and Description.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>System.String</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>When `-ReturnText` is specified, emits the rendered colorscript as a string to the pipeline. This string contains all ANSI escape sequences for proper color rendering when displayed in a compatible terminal.</maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <dev:name>None</dev:name>
        </dev:type>
        <maml:description>
          <maml:para>In default operation (without `-PassThru` or `-ReturnText`), output is written directly to the console host and nothing is returned to the pipeline.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance:**
The intelligent caching system provides 6-19x performance improvements over direct execution. Cache files are stored in a module-managed directory and are automatically invalidated when source scripts are modified, ensuring accuracy.

**Cache Management:**
- Cache location: Use `(Get-Module ColorScripts-Enhanced).ModuleBase` and look for the cache directory
- Clear cache: Use `Clear-ColorScriptCache` to rebuild from scratch
- Rebuild cache: Use `New-ColorScriptCache` to pre-populate cache for all scripts
- Inspect cache: Cache files are plain text and can be viewed directly

**Tips:**
- Add `Show-ColorScript -Random` to your PowerShell profile for a colorful greeting on each session start
- Use the module alias `scs` for quick access: `scs -Random`
- Combine category and tag filters for precise selection
- Use `-List` to discover new scripts and learn about their themes
- The `-All -WaitForInput` combination is perfect for presenting the collection to others

**Compatibility:**
Colorscripts use ANSI escape sequences and display best in terminals with full color support, such as Windows Terminal, ConEmu, or modern Unix terminals.

## ADVANCED USAGE

### Filtering Strategies

**By Category and Tag Combination**
```powershell
# Show only geometric colorscripts tagged as minimal
Show-ColorScript -Category Geometric -Tag minimal -Random

# Show only recommended colorscripts from nature category
Show-ColorScript -Category Nature -Tag Recommended -Random

# Display multiple categories with specific tag
Show-ColorScript -Category Geometric,Abstract -Tag colorful -Random
```

**Dynamic Filtering Based on Time**
```powershell
# Morning: bright colors
if ((Get-Date).Hour -lt 12) {
    Show-ColorScript -Tag bright,colorful -Random
}
# Evening: darker palettes
else {
    Show-ColorScript -Tag dark,minimal -Random
}
```

### Output Capture Patterns

**Save for Later Viewing**
```powershell
# Save to variable
$art = Show-ColorScript -Name spectrum -ReturnText
$art | Out-File "./my-art.ansi" -Encoding UTF8

# Later display
Get-Content "./my-art.ansi" -Raw | Write-Host
```

**Create Themed Collections**
```powershell
# Collect all geometric scripts
$geometric = Get-ColorScriptList -Category Geometric -AsObject

# Save each one
$geometric | ForEach-Object {
    Show-ColorScript -Name $_.Name -ReturnText |
        Out-File "./collection/$($_.Name).ansi" -Encoding UTF8
}
```

### Performance Analysis

**Comprehensive Benchmark**
```powershell
# Function to benchmark colorscript performance
function Measure-ColorScriptPerformance {
    param([string]$Name)

    # Warm up cache
    Show-ColorScript -Name $Name | Out-Null

    # Cached performance
    $cached = Measure-Command { Show-ColorScript -Name $Name }

    # Uncached performance
    Clear-ColorScriptCache -Name $Name -Confirm:$false
    $uncached = Measure-Command { Show-ColorScript -Name $Name -NoCache }

    [PSCustomObject]@{
        Script = $Name
        Cached = $cached.TotalMilliseconds
        Uncached = $uncached.TotalMilliseconds
        Improvement = [math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 2)
    }
}

# Test multiple scripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object { Measure-ColorScriptPerformance -Name $_.Name }
```

### Terminal Customization

**Terminal-Specific Display**
```powershell
# Windows Terminal with ANSI support
if ($env:WT_SESSION) {
    Show-ColorScript -Category Abstract -Random  # Maximum colors
}

# VS Code terminal
if ($env:TERM_PROGRAM -eq "vscode") {
    Show-ColorScript -Tag simple  # Avoid complex rendering
}

# SSH session (potentially limited)
if ($env:SSH_CONNECTION) {
    Show-ColorScript -NoCache -Category Simple  # Minimal overhead
}

# ConEmu terminal
if ($env:ConEmuANSI -eq "ON") {
    Show-ColorScript -Random  # Full ANSI support
}
```

### Automation Integration

**Scheduled Colorscript Rotation**
```powershell
# Create scheduled task wrapper
function Start-ColorScriptSession {
    param(
        [int]$MaxScripts = 5,
        [string[]]$Categories = @("Geometric", "Nature"),
        [int]$DelaySeconds = 2
    )

    Get-ColorScriptList -Category $Categories -AsObject |
        Select-Object -First $MaxScripts |
        ForEach-Object {
            Write-Host "`n=== $($_.Name) ($($_.Category)) ===" -ForegroundColor Cyan
            Show-ColorScript -Name $_.Name
            Start-Sleep -Seconds $DelaySeconds
        }
}
```

### Error Handling and Resilience

**Graceful Fallback**
```powershell
# Try specific script, fallback to random
try {
    Show-ColorScript -Name "specific-script" -ErrorAction Stop
} catch {
    Write-Warning "Specific script not found, showing random"
    Show-ColorScript -Random
}
```

**Validation Before Display**
```powershell
# Verify script exists before displaying
$scripts = Get-ColorScriptList -AsObject
$scriptName = "aurora-waves"

if ($scriptName -in $scripts.Name) {
    Show-ColorScript -Name $scriptName
} else {
    Write-Error "$scriptName not found"
    Get-ColorScriptList | Out-Host
}
```

### Metadata Inspection

**Inspect Before Displaying**
```powershell
# Get metadata while displaying
$metadata = Show-ColorScript -Name aurora-waves -PassThru

Write-Host "`nScript Details:`n"
$metadata | Select-Object Name, Category, Tags, Description | Format-List

# Use metadata for decisions
if ($metadata.Tags -contains "Animated") {
    Write-Host "This is an animated script"
}
```

## NOTES

**Author:** Nick
**Module:** ColorScripts-Enhanced
**Requires:** PowerShell 5.1 or later

**Performance:**
The intelligent caching system provides 6-19x performance improvements over direct execution. Cache files are stored in a module-managed directory and are automatically invalidated when source scripts are modified, ensuring accuracy.

**Cache Management:**
- Cache location: Use `(Get-Module ColorScripts-Enhanced).ModuleBase` and look for the cache directory
- Clear cache: Use `Clear-ColorScriptCache` to rebuild from scratch
- Rebuild cache: Use `New-ColorScriptCache` to pre-populate cache for all scripts
- Inspect cache: Cache files are plain text and can be viewed directly

**Advanced Tips:**
- Use `-PassThru` to get metadata while displaying for post-processing
- Combine `-ReturnText` with pipeline commands for advanced text manipulation
- Use `-NoCache` during development of custom colorscripts for immediate feedback
- Filter by multiple categories/tags for more precise selection
- Store frequently-used scripts in variables for quick access
- Use `-List` with `-Category` and `-Tag` to explore available content
- Monitor cache hits with performance measurements
- Consider terminal capabilities when selecting scripts
- Use environment variables to customize behavior per environment
- Implement error handling for automated display scenarios

**Terminal Compatibility Matrix:**

| Terminal | ANSI Support | UTF-8 | Performance | Notes |
|----------|---------|-------|-----------|-------|
| Windows Terminal | ✓ Excellent | ✓ Full | Excellent | Recommended |
| ConEmu | ✓ Good | ✓ Full | Good | Legacy but reliable |
| VS Code | ✓ Good | ✓ Full | Very Good | Slight rendering delay |
| PowerShell ISE | ✗ Limited | ✗ Limited | N/A | Not recommended |
| SSH Terminal | ✓ Varies | ✓ Depends | Varies | Network latency may affect |
| Windows 10 Console | ✗ No | ✓ Yes | N/A | Not recommended |</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- EXAMPLE 1 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Отображает случайный цветовой скрипт с включенным кэшированием. Это самый быстрый способ добавить визуальный шарм вашему сеансу терминала.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 2 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "mandelbrot-zoom"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Отображает указанный цветовой скрипт по точному имени. Расширение .ps1 не требуется.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 3 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "aurora-*"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the first colorscript (alphabetically) that matches the wildcard pattern "aurora-*". Useful when you remember part of a script's name.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 4 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
scs hearts
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Uses the module's alias 'scs' for quick access to the hearts colorscript. Aliases provide convenient shortcuts for frequent use.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 5 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists all available colorscripts with their metadata in a formatted table. Helpful for discovering available scripts and their attributes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 6 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name arch -NoCache
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays the arch colorscript without using cache, forcing fresh execution. Useful during development or when troubleshooting cache issues.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 7 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Category Nature -PassThru | Select-Object Name, Category
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random nature-themed script and captures its metadata object for further inspection or processing.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 8 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Name "bars" -ReturnText | Set-Content bars.txt
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Renders the colorscript and saves the output to a text file. The rendered ANSI codes are preserved, allowing the file to be displayed later with proper coloring.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 9 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts in alphabetical order with a brief automatic delay between each. Perfect for a visual showcase of the entire collection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 10 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays all colorscripts one at a time, pausing after each. Press spacebar to advance to the next script, or press 'q' to quit the sequence early.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 11 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -All -Category Nature -WaitForInput
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Cycles through all nature-themed colorscripts with manual progression. Combines filtering with interactive browsing for a curated experience.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 12 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -Tag retro,geometric -Random
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a random colorscript that has both "retro" and "geometric" tags. Tag filtering enables precise subset selection.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 13 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
Show-ColorScript -List -Category Art,Abstract
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Lists only colorscripts categorized as "Art" or "Abstract", helping you discover scripts within specific themes.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 14 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Measure performance improvement from caching
$uncached = Measure-Command { Show-ColorScript -Name spectrum -NoCache }
$cached = Measure-Command { Show-ColorScript -Name spectrum }
Write-Host "Uncached: $($uncached.TotalMilliseconds)ms | Cached: $($cached.TotalMilliseconds)ms | Speedup: $([math]::Round($uncached.TotalMilliseconds / $cached.TotalMilliseconds, 1))x"
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates the performance improvement that caching provides by measuring execution time.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 15 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Set up daily rotation of different colorscripts
$seed = (Get-Date).DayOfYear
Get-Random -SetSeed $seed
Show-ColorScript -Random -PassThru | Select-Object Name
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Displays a consistent but different colorscript each day based on the date.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 16 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Export rendered colorscript to file for sharing
Show-ColorScript -Name "aurora-waves" -ReturnText |
    Out-File -FilePath "./aurora.ansi" -Encoding UTF8</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para># Later, display the saved file
Get-Content "./aurora.ansi" -Raw | Write-Host
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Saves a rendered colorscript to a file that can be displayed later or shared with others.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 17 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Create a slideshow of geometric colorscripts
Get-ColorScriptList -Category Geometric -AsObject |
    ForEach-Object {
        Show-ColorScript -Name $_.Name
        Start-Sleep -Seconds 3
    }
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Automatically displays a sequence of geometric colorscripts with 3-second delays between each.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 18 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Error handling example
try {
    Show-ColorScript -Name "nonexistent-script" -ErrorAction Stop
} catch {
    Write-Warning "Script not found: $_"
    Show-ColorScript  # Fallback to random
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates error handling when requesting a script that doesn't exist.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 19 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Build automation integration
if ($env:CI) {
    Show-ColorScript -Name "nerd-font-test" -NoCache
} else {
    Show-ColorScript  # Random display for interactive use
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Shows how to conditionally display different colorscripts in CI/CD environments vs. interactive sessions.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
      <command:example>
        <maml:title>--------- EXAMPLE 20 ---------</maml:title>
        <maml:introduction>
          <maml:para>```powershell
# Scheduled task for terminal greeting
$scriptPath = "$(Get-Module ColorScripts-Enhanced).ModuleBase\Scripts\mandelbrot-zoom.ps1"
if (Test-Path $scriptPath) {
    &amp; $scriptPath
} else {
    Show-ColorScript -Name mandelbrot-zoom
}
```</maml:para>
          <maml:para>&#x80;</maml:para>
          <maml:para>Demonstrates running a specific colorscript as part of scheduled task or startup automation.</maml:para>
        </maml:introduction>
        <dev:code />
        <dev:remarks />
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/PS-Color-Scripts-Enhanced/blob/main/ColorScripts-Enhanced/ru/Show-ColorScript.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-ColorScriptList</maml:linkText>
        <command:uri>Get-ColorScriptList.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-ColorScriptCache</maml:linkText>
        <command:uri>New-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Clear-ColorScriptCache</maml:linkText>
        <command:uri>Clear-ColorScriptCache.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-ColorScriptMetadata</maml:linkText>
        <command:uri>Export-ColorScriptMetadata.md</command:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Online Documentation</maml:linkText>
        <command:uri>https://github.com/Nick2bad4u/ps-color-scripts-enhanced</command:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>